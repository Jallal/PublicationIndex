Authors,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,bothKeywords,Correspondence Address,Editors,Publisher Address,Conference name,Conference location,Conference date,Publisher,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Source,Subject,EID,duplicatedIn,country,emailHost,institution,institutionWithCountry,authorFull
"Lyerly, R., Kim, S.H., Ravindran, B.",1ibMPNode: An OpenMP Runtime For Parallel Processing Across Incoherent Domains,2019,PROCEEDINGS OF THE TENTH INTERNATIONAL WORKSHOP ON PROGRAMMING MODELS AND APPLICATIONS FOR MULTICORES AND MANYCORES (PMAM 2019),,,,81,90,10,0,10.1145/3303084.3309495,,"[Lyerly, Robert; Ravindran, Binoy] Virginia Tech, Bradley Dept Elect & Comp Engn, Blacksburg, VA 24061 USA; [Kim, Sang-Hoon] Ajou Univ, Dept Software & Comp Engn, Suwon, South Korea",,"In this work we describe 1ibMPNode, an OpenMP runtime designed for efficient multithreaded execution across systems composed of multiple non-cache-coherent domains. Rather than requiring extensive compiler-level transformations or building new programming model abstractions, 1ibMPNode builds on recent works that allow developers to use a traditional shared-memory programming model to build applications that are migratable between incoherent domains. 1ibMPNode handles migrating threads between domains, or nodes, and optimizes many OpenMP mechanisms to reduce cross-node communication. While applications may not scale as written, we describe early experiences in simple code refactoring techniques that help scale performance by only changing a handful of lines of code. We describe and evaluate the current implementation, report on experiences using the runtime, and describe future research directions for multi-domain OpenMP.",OpenMP; non-cache-coherent multicores; scalability,SYSTEM,OpenMP;non-cache-coherent multicores;scalability;SYSTEM,rlyerly@vt.edu; sanghoonkim@ajou.ac.kr; binoy@vt.edu,"Chen, Q; Huang, ZY; Si, M","1515 BROADWAY, NEW YORK, NY 10036-9998 USA",10th International Workshop on Programming Models and Applications for Multicores and Manycores (PMAM),"Washington, DC","FEB 17, 2019",ASSOC COMPUTING MACHINERY,,978-1-4503-6290-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000475556300009,,United States;South Korea,vt.edu,Virginia Tech;Ajou Univ,"Virginia Tech, United States;Ajou Univ, South Korea","Lyerly, Robert; Kim, Sang-Hoon; Ravindran, Binoy"
"Cordy J.R., Inoue K., Koschke R.","2012 6th International Workshop on Software Clones, IWSC 2012 - Proceedings: Foreword",2012,"2012 6th International Workshop on Software Clones, IWSC 2012 - Proceedings",,, 6227859,,,,0,10.1109/IWSC.2012.6227859,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864240585&doi=10.1109%2fIWSC.2012.6227859&partnerID=40&md5=ed71bb7f80a3fc02ca20b3f10c3676fe,"Queen's University, Canada; Osaka University, Japan; University of Bremen, Germany","Cordy, J.R., Queen's University, Canada; Inoue, K., Osaka University, Japan; Koschke, R., University of Bremen, Germany","Software clones are identical or similar pieces of code or design. Clones are known to be closely related to various issues on software engineering, such as software quality, complexity, architecture, refactoring, evolution, licensing, plagiarism, and so on. Various characteristics of software systems can be uncovered through the clone analysis, and system restructuring can be performed by merging clones. The purpose of this workshop is to continue to solidify and give shape to this research/application area and community. More specifically, the goals are to bring together academic and industrial researchers and practitioners from around the world to evaluate the current state of research and applications, discuss common problems, discover new opportunities for collaboration, exchange ideas, and envision new areas of research and applications. In this, the 6th international clone workshop, we will discuss issues in software clone detection, analysis and management, as well as applications to software engineering contexts that can benefit from knowledge of clones. As befits a maturing workshop, we have this year added independent program committee chairs to oversee the technical program. © 2012 IEEE.",,Clone analysis; International workshops; Program committee; Refactorings; Research and application; Software clone detection; Software clones; Software Quality; Software systems; State of research; Technical programs; Computer software selection and evaluation; Industrial research; Software engineering; Cloning,Clone analysis;International workshops;Program committee;Refactorings;Research and application;Software clone detection;Software clones;Software Quality;Software systems;State of research;Technical programs;Computer software selection and evaluation;Industrial research;Software engineering;Cloning,"Cordy, J.R.; Queen's UniversityCanada",,,,,,,,9781467317955,,,English,"Int. Workshop Softw. Clones, IWSC - Proc.",Conference Paper,Scopus,,2-s2.0-84864240585,,Canada;Japan;Germany,No email,,,"Cordy J.R., Inoue K., Koschke R."
Koschke R.,"2013 7th International Workshop on Software Clones, IWSC 2013 - Proceedings: Foreword",2013,"2013 7th International Workshop on Software Clones, IWSC 2013 - Proceedings",,, 6613031,,,,0,10.1109/IWSC.2013.6613031,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886649318&doi=10.1109%2fIWSC.2013.6613031&partnerID=40&md5=0cb7eaf4a23e8cea69a4bd321af74676,"University of Bremen, Germany","Koschke, R., University of Bremen, Germany","Software clones are identical or similar pieces of code or design. Clones are known to be closely related to various issues on software engineering, such as software quality, complexity, architecture, refactoring, evolution, licensing, plagiarism, and so on. Various characteristics of software systems can be uncovered through clone analysis, and system restructuring can be performed by merging clones. © 2013 IEEE.",,Computer software selection and evaluation; Software engineering; Clone analysis; International workshops; Refactorings; Software clones; Software Quality; Software systems; Cloning,Computer software selection and evaluation;Software engineering;Clone analysis;International workshops;Refactorings;Software clones;Software Quality;Software systems;Cloning,"Koschke, R.; University of BremenGermany",,,,,,IEEE Computer Society,,9781467364454,,,English,"Int. Workshop Softw. Clones, IWSC - Proc.",Conference Paper,Scopus,,2-s2.0-84886649318,,Germany,No email,,,Koschke R.
"Namiot D.E., Romanov V.Yu.",3D visualization of architecture and metrics of the software [3D визуализация архитектуры и метрик программного обеспечения],2018,Scientific Visualization,10,5,,123,129,,0,10.26583/sv.10.5.08,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062674609&doi=10.26583%2fsv.10.5.08&partnerID=40&md5=830706cbc24d1a3d5a8bd389dfd3dd93,"Lomonosov Moscow State University, Russian Federation","Namiot, D.E., Lomonosov Moscow State University, Russian Federation; Romanov, V.Yu., Lomonosov Moscow State University, Russian Federation","This article provides an overview of the methods of 3D visualization of software architecture and metrics. Metrics for programs (packages, classes, repositories) form one of the most actively used directions in software engineering. This line of research refers to the analysis of software, and visual analysis here is one of the most frequently used tools. This kind of visualization is usually part of the software quality analysis process. It can be used for training, for refactoring programs, and for integrating (combining) individual components (packages) into complex software systems. Obviously, visualization facilitates and speeds up the process of understanding the structure of software components. This is becoming more and more relevant, because now many open-source software components (what most often integrate into other systems), for example, are large and rather complex software packages. Accordingly, their integration into a new project is a very difficult task. We note that the integration problem becomes even more complicated if there is no access to the source texts of components in questions. In this case, the visual representation of metrics is, in fact, the main element of analysis. Analysis of third-party components is not the only area of application. Exactly the same problems arise in corporate development when separate groups work on a large project, which, moreover, can often vary in the composition of performers. In this paper, we consider, for example, the methods of visualization and analysis of the structure of a program in 3D space, which are based on the metaphor of the representation of a software component as a city, which consists of individual buildings that are grouped into districts, etc. We also consider the use of virtual reality for the presentation of software metrics. © 2018 Verduci Editore s.r.l. All Rights Reserved.",3D visualization; Software analysis; Software engineering; Software metrics,Computer software selection and evaluation; Open systems; Quality control; Software engineering; Three dimensional computer graphics; Virtual reality; Visualization; 3D Visualization; Complex software systems; Corporate development; Individual components; Software analysis; Software metrics; Visual representations; Visualization and analysis; Open source software,3D visualization;Software analysis;Software engineering;Software metrics;Computer software selection and evaluation;Open systems;Quality control;Three dimensional computer graphics;Virtual reality;Visualization;Complex software systems;Corporate development;Individual components;Visual representations;Visualization and analysis;Open source software,,,,,,,National Research Nuclear University,20793537,,,,Russian,Sci. Visualization,Article,Scopus,,2-s2.0-85062674609,,Russian Federation,No email,,,"Namiot D.E., Romanov V.Yu."
"Favre, J.M., Heckel, R., Mens, T.",3rd international workshop on software evolution through transformations: Embracing change,2006,"GRAPH TRANSFORMATIONS, PROCEEDINGS",4178,,,470,472,3,0,,,"Univ Grenoble 1, Grenoble, France; Univ Leicester, Leicester, Leics, England; Univ Mons, B-7000 Mons, Belgium",,"Transformation-based techniques such as refactoring, model transformation and model-driven development, architectural reconfiguration, etc. are at the heart of many software engineering activities, making it possible to cope with an ever changing environment. This workshop provides a forum for discussing these techniques, their formal foundations and applications.",,,,Jean-Marie.Favre@imag.fr; reiko@mcs.le.ac.uk; tom.mens@umh.ac.be,"Corradini, A; Ehrig, H; Montanari, U; Ribeiro, L; Rozenberg, G","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",3rd International Conference on Graph Transformations,"Natal, BRAZIL","SEP 17-23, 2006",SPRINGER-VERLAG BERLIN,0302-9743,3-540-38870-2,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000241436800036,2-s2.0-33750279879,France;United Kingdom;Belgium,imag.fr,Grenoble;Leicester;B-7000 Mons,"Grenoble, France;Leicester, United Kingdom;B-7000 Mons, Belgium","Favre, Jean-Marie; Heckel, Reiko; Mens, Tom"
"Abbott R., Sun C.",Abstraction abstracted,2008,Proceedings - International Conference on Software Engineering,,,,23,30,,1,10.1145/1370164.1370171,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951635378&doi=10.1145%2f1370164.1370171&partnerID=40&md5=54eb3eea2a967cf566edc1dcf7acb7f4,"Department of Computer Science, California State University, Los Angeles, CA, United States","Abbott, R., Department of Computer Science, California State University, Los Angeles, CA, United States; Sun, C., Department of Computer Science, California State University, Los Angeles, CA, United States","An abstraction is the reification and conceptualization of a distinction. We use the process of forming abstractions to make sense of the world, i.e., to form concepts. Once created we are often able to externalize these concepts as software. Abstractions are what give software elegance. Abstractions build on each other, producing a hierarchical dependency structure that often creates challenges for understanding. We can teach the use of pre-packaged abstractions. It is more difficult to teach the self-awareness necessary for inventing new abstractions. The process of building abstractions is bottom-up. Thought externalization is where top-down meets bottom-up. © 2008 ACM.",Abstraction; Conceptual model; Mental model; Refactoring; Self-awareness; Thought externalization,Abstraction; Conceptual model; Mental model; Refactorings; Self-awareness; Thought externalization; Software engineering; Abstracting,Abstraction;Conceptual model;Mental model;Refactoring;Self-awareness;Thought externalization;Refactorings;Software engineering;Abstracting,"Abbott, R.; Department of Computer Science, California State University, Los Angeles, CA, United States; email: Russ.Abbott@GMail.com",,,,,,,02705257,,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-79951635378,,United States,GMail.com,,,"Abbott R., Sun C."
"Wuyts, R., Kienle, H.M., Mens, K., van den Brand, M., Kuhn, A.",Academic Software Development Tools and Techniques Report on the 1st Workshop WASDeTT at ECOOP 2008,2009,OBJECT-ORIENTED TECHNOLOGY: ECOOP 2008 WORKSHOP READER,5475,,,87,+,4,3,,,"[Wuyts, Roel] Katholieke Univ Leuven, IMEC, Louvain, Belgium; [Kienle, Holger M.] Univ Victoria, Dept Comp Sci, Victoria, BC 8001, Canada; [Mens, Kim] Catholic Univ Louvain, Dept Ingn Informat, Louvain, Belgium; [van den Brand, Mark] Eindhoven Univ Technol, Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands; [Kuhn, Adrian] Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland",,"The objective of the 1st International Workshop on Advanced Software Development Tools and Techniques (WASDeTT-1) wits to provide interested researchers with a forum to share their tool building experiences and to explore how tools can be built more effectively and efficiently. The theme for this workshop did focus on tools that target object-oriented languages and that are implemented with object-oriented languages. This workshop report provides a brief overview of the presented tools and of the discussions that took place. The presented tools, 15 in total, covered it broad range Of functionalities, among them: refactoring, modeling, behavioral specification, static and dynamic program checking, user interface composition, and program understanding. The discussion during the workshop centered around the following topics: language independent tools, tool building in an industrial context, tool building methodology, tool implementation language, and building tools with external code.",,,,,"Eugster, P","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",22nd European Conference on Object-Oriented Programming (ECOOP 2008),"Paphos, CYPRUS","JUL 07-11, 2008",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-02046-9,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000267260400010,2-s2.0-69849086834,Belgium;Canada;Netherlands;Switzerland,No email,Katholieke Univ Leuven;Univ Victoria;Catholic Univ Louvain;Eindhoven Univ Technol;Univ Bern,"Katholieke Univ Leuven, Belgium;Univ Victoria, Canada;Catholic Univ Louvain, Belgium;Eindhoven Univ Technol, Netherlands;Univ Bern, Switzerland","Wuyts, Roel; Kienle, Holger M.; Mens, Kim; van den Brand, Mark; Kuhn, Adrian"
Haendler T.,A card game for learning software-refactoring principles,2019,CEUR Workshop Proceedings,2497,,,,,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85075099301&partnerID=40&md5=2b8e41a26dd9d25614b783c60212c4dd,"University of Applied Sciences BFI Vienna, Institute for Information Systems and New Media, WU Vienna, Austria","Haendler, T., University of Applied Sciences BFI Vienna, Institute for Information Systems and New Media, WU Vienna, Austria","While software refactoring is considered important to keep a software system maintainable and extensible, it is often neglected in practice due to several reasons. Besides the associated costs, software developers often perceive refactoring as a difficult and risky activity. However, apart from textbooks that document rules and best practices for identifying bad smells and applying appropriate refactoring techniques, learning and teaching refactoring poses multiple challenges. The application of these rules and techniques to code examples requires (advanced) skills in programming as well as an adequate handling of the programming environment. These circumstances can distract the focus and set barriers to the introduction of refactoring. In this paper, we present REFACTORY, a non-digital multi-player card game for learning principles of software refactoring without the development-related complexities. In our game, the players simulate a software-development team confronted with bad code smells. The players learn to combine refactoring techniques to remove the smells and to balance costs and value of refactoring. We specify the game design and illustrate the game workflow. In addition, experiences and lessons learned from a first game-play study are presented, e.g. regarding game fun and mediation of competences. Finally, we discuss limitations and further potential for improving the game. Copyright © 2019 for this paper by its authors.",Card game; Game-based learning; Serious game; Software refactoring,Computer programming; Odors; Software design; Card games; Game-based Learning; Learning and teachings; Learning software; Programming environment; Software developer; Software development teams; Software refactoring; Serious games,Card game;Game-based learning;Serious game;Software refactoring;Computer programming;Odors;Software design;Card games;Learning and teachings;Learning software;Programming environment;Software developer;Software development teams;Serious games,"Haendler, T.; University of Applied Sciences BFI Vienna, Institute for Information Systems and New Media, WU ViennaAustria; email: thorsten.haendler@fh-vie.ac.at",Arnedo-Moreno J.Gonzalez C.S.Mora A.,,,,,CEUR-WS,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-85075099301,,Austria,fh-vie.ac.at,,,Haendler T.
"Hills, M., Klint, P., van der Storm, T., Vinju, J.",A Case of Visitor versus Interpreter Pattern,2011,"OBJECTS, MODELS, COMPONENTS, PATTERNS, TOOLS 2011",6705,,,228,243,16,8,,,"[Hills, Mark; Klint, Paul; van der Storm, Tijs; Vinju, Jurgen] Ctr Wiskunde & Informat, Amsterdam, Netherlands; [Hills, Mark; Klint, Paul; Vinju, Jurgen] INRIA Lille Nord Europe, Le Chesnay, France",,"We compare the Visitor pattern with the Interpreter pattern, investigating a single case in point for the Java language. We have produced and compared two versions of an interpreter for a programming language. The first version makes use of the Visitor pattern. The second version was obtained by using an automated refactoring to transform uses of the Visitor pattern to uses of the Interpreter pattern. We compare these two nearly equivalent versions on their maintenance characteristics and execution efficiency. Using a tailored experimental research method we can highlight differences and the causes thereof. The contributions of this paper are that it isolates the choice between Visitor and Interpreter in a realistic software project and makes the difference experimentally observable.",,DESIGN PATTERNS; SOFTWARE; MAINTENANCE,DESIGN PATTERNS;SOFTWARE;MAINTENANCE,,"Bishop, J; Vallecillo, A","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY","49th International Conference on Objects, Models, Components, Patterns (TOOLS)","Swiss Fed Inst Technol, Zurich, SWITZERLAND","JUN 28-30, 2011",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-21952-8,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000392144900017,2-s2.0-79960176707,Netherlands;France,No email,Ctr Wiskunde & Informat;INRIA Lille Nord Europe,"Ctr Wiskunde & Informat, Netherlands;INRIA Lille Nord Europe, France","Hills, Mark; Klint, Paul; van der Storm, Tijs; Vinju, Jurgen"
"Kastner, C., Apel, S., Batory, D.",A case study implementing features using AspectJ,2007,"SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS",,,,223,+,3,51,10.1109/SPLINE.2007.12,,"[Kaestner, Christian] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany; [Apel, Sven] Univ Passau, Dept Informat & Math, D-94030 Passau, Germany; [Batory, Don] Univ Texas Austin, Dept Comp Sci, Austin, TX 78712 USA",,"Software product lines aim to create highly configurable programs from a set of features. Common belief and recent studies suggest that aspects are well-suited for implementing features. We evaluate the suitability of AspectJ with respect to this task by a case study that refactors the embedded database system Berkeley DB into 38 features. Contrary to our initial expectations, the results were not encouraging. As the number of aspects in a feature grows, there is a noticeable decrease in code readability and maintainability. Most of the unique and powerful features of AspectJ were not needed. We document where AspectJ is unsuitable for implementing features of refactored legacy applications and explain why.",,,,ckaestne@ovgu.de; apel@uni-passau.de; batory@cs.utexas.edu,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",11th International Software Product Line Conference,"Kyoto, JAPAN","SEP 10-14, 2007",IEEE COMPUTER SOC,,978-0-7695-2888-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000251450700022,,Germany;United States,ovgu.de,Univ Magdeburg;Univ Passau;Univ Texas Austin,"Univ Magdeburg, Germany;Univ Passau, Germany;Univ Texas Austin, United States","Kaestner, Christian; Apel, Sven; Batory, Don"
"Kazman, R., Cai, Y.F., Mo, R., Feng, Q., Xiao, L., Haziyev, S., Fedak, V., Shapochka, A.",A Case Study in Locating the Architectural Roots of Technical Debt,2015,"2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2",,,,179,188,10,41,10.1109/ICSE.2015.146,,"[Kazman, Rick] CMU, SEU, Pittsburgh, PA 15213 USA; [Kazman, Rick] Univ Hawaii, Honolulu, HI 96822 USA; [Haziyev, Serge; Fedak, Volodymyr; Shapochka, Andriy] SoftServe Inc, Lvov, Ukraine; [Cai, Yuanfang; Mo, Ran; Feng, Qiong; Xiao, Lu] Drexel Univ, Philadelphia, PA 19104 USA",,"Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.",,,,kazman@hawaii.edu; yc349@drexel.edu; rm859@drexel.edu; lx52@drexel.edu; shaziyev@softserveinc.com; vfedak@softserveinc.com; ashopoch@softserveinc.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE/ACM 2nd International Workshop on Software Architecture and Metrics (SAM),"Florence, ITALY","MAY 16-16, 2015",IEEE,,978-1-4799-1934-5,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380572400020,2-s2.0-84943346141,United States;Ukraine,hawaii.edu,CMU;Univ Hawaii;SoftServe Inc;Drexel Univ,"CMU, United States;Univ Hawaii, United States;SoftServe Inc, Ukraine;Drexel Univ, United States","Kazman, Rick; Cai, Yuanfang; Mo, Ran; Feng, Qiong; Xiao, Lu; Haziyev, Serge; Fedak, Volodymyr; Shapochka, Andriy"
"Dillon, B.S.",A Case Study in Object-oriented Patterns Identified During Manual Refactoring,2016,"2016 IEEE/ACIS 14TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA)",,,,91,98,8,0,,,"[Dillon, Brian S.] Virginia Tech, Naval Surface Warfare Ctr, Dahlgren Div, Blacksburg, VA 24061 USA",,"Software design patterns are often-repeated implementations that have been identified and cataloged. These are commonly seen as useful and good patterns to implement. Occasionally the term ""anti-pattern"" has been used to identify less-useful patterns that also appear regularly. The exact definition of an anti-pattern is somewhat subjective, and the term has even been applied to some recognized design patterns. This paper discusses four manual refactoring case studies where patterns were discovered and cataloged. Evidence observed in the source code is used to infer how these patterns evolved. Based on these findings, preventive development practices are suggested. Potential improvements to development tools and a new method for pattern classification are suggested as subjects for future work.",Software evolution; reverse engineering; software aging; software quality; refactoring; design patterns; anti-patterns,,Software evolution;reverse engineering;software aging;software quality;refactoring;design patterns;anti-patterns,briand81@vt.edu,"Song, YT","345 E 47TH ST, NEW YORK, NY 10017 USA","IEEE/ACIS 14th International Conference on Software Engineering Research, Management and Application (SERA)","Towson Univ, Baltimore, MD","JUN 08-10, 2016",IEEE,,978-1-5090-0809-4,,,English,,Proceedings Paper,WoS,Engineering,WOS:000383222400012,2-s2.0-84983380226,United States,vt.edu,Virginia Tech,"Virginia Tech, United States","Dillon, Brian S."
"Kolb, R., Muthig, D., Patzke, T., Yamauchi, K.",A case study in refactoring a legacy component for reuse in a product line,2005,ICSM 2005: PROCEEDINGS OF THE 21ST IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,369,378,10,30,,,"Fraunhofer Inst Expt Software Engn, D-67661 Kaiserslautern, Germany",,"This paper describes activities performed to systematically improve the design and implementation of an existing software component in order to reuse it in a software product line. The activities are embedded in the application of Fraunhofer's PuLSE (TM)-DSSA approach for defining the architecture of a new product line. The component under investigation is the so called Image Memory Handier (IMH) which is used in Ricoh's current products of office appliances such as copier machines, printers, and multi-functional peripherals. It is responsible for controlling memory usage and compressing and decompressing image data. Both the improvement of the component's design and implementation are based on a systematic analysis and focused on increasing maintainability and reusability and hence suitability for use in a product line.",,,,kolb@iese.fraunhofer.de; muthig@iese.fraunhofer.de; patzke@iese.fraunhofer.de; kaz@nts.ricoh.co.jp,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",21st International Conference on Software Maintenance (ICSM 2005),"Budapest, HUNGARY","SEP 26-29, 2005",IEEE COMPUTER SOC,1063-6773,0-7695-2368-4,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000234333200037,2-s2.0-33646425541,Germany,iese.fraunhofer.de,D-67661 Kaiserslautern,"D-67661 Kaiserslautern, Germany","Kolb, R; Muthig, D; Patzke, T; Yamauchi, K"
"Szoke, G., Nagy, C., Ferenc, R., Gyimothy, T.",A Case Study of Refactoring Large-Scale Industrial Systems to Efficiently Improve Source Code Quality,2014,"COMPUTATIONAL SCIENCE AND ITS APPLICATIONS - ICCSA 2014, PT V",8583,,,524,540,17,6,,,"[Szoke, Gabor; Nagy, Csaba; Ferenc, Rudolf; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, Szeged, Hungary",,"Refactoring source code has many benefits (e.g. improving maintainability, robustness and source code quality), but it takes time away from other implementation tasks, resulting in developers neglecting refactoring steps during the development process. But what happens when they know that the quality of their source code needs to be improved and they can get the extra time and money to refactor the code? What will they do? What will they consider the most important for improving source code quality? What sort of issues will they address first or last and how will they solve them? In our paper, we look for answers to these questions in a case study of refactoring large-scale industrial systems where developers participated in a project to improve the quality of their software systems. We collected empirical data of over a thousand refactoring patches for 5 systems with over 5 million lines of code in total, and we found that developers really optimized the refactoring process to significantly improve the quality of these systems.",software engineering; refactoring; software quality,,software engineering;refactoring;software quality,,"Murgante, B; Misra, S; Rocha, AMAC; Torre, C; Rocha, JG; Falcao, MI; Taniar, D; Apduhan, BO; Gervasi, O","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",14th International Conference on Computational Science and Its Applications (ICCSA),"Guimaraes, PORTUGAL","JUN 30-JUL 03, 2014",SPRINGER-VERLAG BERLIN,0302-9743,978-3-319-09156-3; 978-3-319-09155-6,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000349533300036,2-s2.0-84904878254,Hungary,No email,Univ Szeged,"Univ Szeged, Hungary","Szoke, Gabor; Nagy, Csaba; Ferenc, Rudolf; Gyimothy, Tibor"
"Riechers T.M., Kuo S.H., Goh R.S.M., Soh H., Hung T., Malik A.M.",A case study on dynamic kernel adaptation in a component-based infectious disease simulator,2009,"Proceedings of the 2009 Workshop on Component-Based High-Performance Computing, CBHPC 2009",,, 1687782,,,,1,10.1145/1687774.1687782,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77749260884&doi=10.1145%2f1687774.1687782&partnerID=40&md5=23a8db187aa58b8b77dd63d82d62874a,"RWTH Aachen University, Germany; Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore","Riechers, T.M., RWTH Aachen University, Germany; Kuo, S.-H., Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore; Goh, R.S.M., Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore; Soh, H., Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore; Hung, T., Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore; Malik, A.M., Institute of High Performance Computing, 1 Fusionopolis way #16-16 Connexis, Singapore 138632, Singapore","We present in this paper a case study of the benefits of refactoring a large-scale agent-based infectious disease simulator into components. This approach of software development has the potential to increase the productivity of the developer as well as to offer better application performance through a component-based programming paradigm. In our approach, we have designed and developed a generalized component-based optimizer for the compositional adaptation of the compute-intensive kernels. This optimizer provides an efficient mechanism for creating multiple implementations of kernels. It possesses dynamic adaptation feature which selects the most appropriate kernel implementation based on runtime conditions so as to achieve performance that is otherwise unattainable with a single implementation. Our experimental results demonstrate that the component-based simulator with dynamic adaptation enabled has performance gain of 2 to 4 times as compared to the original non-component-based code. Copyright © 2009 ACM.",Adaptation; Component-based software engineering,Agent based; Application performance; Component based; Component-based programming; Component-based software engineering; Dynamic adaptations; Infectious disease; Kernel adaptation; ON dynamics; Optimizers; Performance Gain; Refactorings; Runtimes; Software development; Computer software; Simulators,Adaptation;Component-based software engineering;Agent based;Application performance;Component based;Component-based programming;Dynamic adaptations;Infectious disease;Kernel adaptation;ON dynamics;Optimizers;Performance Gain;Refactorings;Runtimes;Software development;Computer software;Simulators,"Riechers, T. M.; RWTH Aachen UniversityGermany; email: thorsten.riechers@rwthaachen.de",,,,,,,,9781605587189,,,English,"Proc. Workshop Compon.-Based High-Perform. Comput., CBHPC",Conference Paper,Scopus,,2-s2.0-77749260884,,Germany;Singapore,rwthaachen.de,,,"Riechers T.M., Kuo S.-H., Goh R.S.M., Soh H., Hung T., Malik A.M."
"Lee, D.Y.",A Case Study on Refactoring in Haskell Programs,2011,2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE),,,,1164,1166,3,2,,,"N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA",,"Programmers use refactoring to improve the design of existing code without changing external behavior. Current research does not empirically answer the question, ""Why and how do programmers refactor functional programs?"" In order to answer the question, I conducted a case study on three open source projects in Haskell. I investigated changed portions of code in 55 successive versions of a given project to classify how programmers refactor. I found a total of 143 refactorings classified by 12 refactoring types. I also found 5 new refactoring types and propose two new refactoring tools that would be useful for developers.",Refactoring; Functional Language; Haskell,,Refactoring;Functional Language;Haskell,dlee10@ncsu.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",33rd International Conference on Software Engineering (ICSE),"Honolulu, HI","MAY 21-28, 2011",IEEE,,978-1-4503-0445-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000297156400183,2-s2.0-79959903902,United States,ncsu.edu,Dept Comp Sci,"Dept Comp Sci, United States","Lee, Da Young"
"Moser, R., Abrahamsson, P., Pedrycz, W., Sillitti, A., Succi, G.",A case study on the impact of refactoring on quality and productivity in an agile team,2008,BALANCING AGILITY AND FORMALISM IN SOFTWARE ENGINEERING,5082,,,252,+,4,45,,,"[Moser, Raimund; Sillitti, Alberto; Succi, Giancarlo] Free Univ Bolzano Bozen, Bolzano, Italy; [Abrahamsson, Pekka] VTT Elect, Oulu, Finland; [Pedrycz, Witold] Univ Alberta, Edmonton, AB T6G 2M7, Canada",,"Refactoring is a hot and controversial issue. Supporters claim that it helps increasing the quality of the code, making it easier to understand, modify and maintain. Moreover, there are also claims that refactoring yields higher development productivity - however, there is only limited empirical evidence of such assumption. A case study has been conducted to assess the impact of refactoring in a close-to industrial environment. Results indicate that refactoring not only increases aspects of software quality, but also improves productivity. Our findings are applicable to small teams working in similar, highly volatile domains (ours is application development for mobile devices). However, additional research is needed to ensure that this is indeed true and to generalize it to other contexts.",refactoring; software process; methodologies; software metrics,DESIGN,refactoring;software process;methodologies;software metrics;DESIGN,rmoser@unibz.it; pekka.abrahamsson@vtt.fi; pedrycz@ee.ualberta.ca; asillitti@unibz.it; gsucci@unibz.it,"Meyer, B; Nawrocki, JR; Walter, B","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",2nd IFIP Central and East European Conference on Software Engineering Techniques (CEE-SET 2007),"Poznan, POLAND","OCT 10-12, 2007",SPRINGER-VERLAG BERLIN,0302-9743,978-3-540-85278-0,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000258930500020,2-s2.0-50949085401,Italy;Finland;Canada,unibz.it,Free Univ Bolzano Bozen;VTT Elect;Univ Alberta,"Free Univ Bolzano Bozen, Italy;VTT Elect, Finland;Univ Alberta, Canada","Moser, Raimund; Abrahamsson, Pekka; Pedrycz, Witold; Sillitti, Alberto; Succi, Giancarlo"
"Orru, M., Marchesi, M.",A Case Study on the Relationship between Code Ownership and Refactoring Activities in a Java Software System,2016,PROCEEDINGS OF 2016 IEEE/ACM 7TH INTERNATIONAL WORKSHOP ON EMERGING TRENDS IN SOFTWARE METRICS (WETSOM),,,,43,49,7,1,10.1145/2897695.2897702,,"[Orru, Matteo; Marchesi, Michele] Univ Cagliari, Dept Elect & Elect Engn, Piazza DArmi, I-09123 Cagliari, Italy",,"Refactoring, the activity of changing source code design without affecting its external behavior, is a widely used practice among developers, since it is considered to positively affect the quality of software systems. However, there are some ""human factors"" to be considered while performing refactoring, including developers knowledge of systems architecture. Recent studies showed how much ""people"" metrics, such as code ownership, might affect software quality as well. In this preliminary study we investigated the relationship between code ownership and refactoring activity performed by developers. This study can provide useful insights on who performs refactoring and help team leaders to properly manage human resources during software development.",Code ownership; Refactoring; Developers Activity; Java Software Systems,,Code ownership;Refactoring;Developers Activity;Java Software Systems,matteo.orru@diee.unica.it; michele@diee.unica.it,,"345 E 47TH ST, NEW YORK, NY 10017 USA",7th IEEE/ACM International Workshop on Emerging Trends in Software Metrics (WETSoM),"Austin, TX","MAY 14-15, 2016",IEEE,2327-0950,978-1-4503-4177-6,,,English,INT WORKS EMERG TREN,Proceedings Paper,WoS,Computer Science,WOS:000400695900007,2-s2.0-84974623996,Italy,diee.unica.it,Univ Cagliari,"Univ Cagliari, Italy","Orru, Matteo; Marchesi, Michele"
"Nanthaamornphong, A.",A Case Study: Test-Driven Development in a Microscopy Image-Processing Project,2016,PROCEEDINGS OF SE-HPCCSE 2016: 4TH INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING OR HIGH PERFORMANCE COMPUTING IN COMPUTATIONAL SCIENCE AND ENGINEERING,,,,9,16,8,2,10.1109/SE-HPCCSE.2016.5,,"[Nanthaamornphong, Aziz] Prince Songkla Univ, Fac Technol & Environm, Dept Informat & Commun Technol, Phuket Campus, Phuket, Thailand",,"Many scientific software developers have applied software engineering practices to their work in recent years. Agile methods are gaining increased interest from both industry and research fields, including scientific application domains. Test-driven development (TDD) and refactoring practices are critical for the success of agile methods. Although many scientific projects employ agile practices, the effect of TDD on scientific software development remains unknown and should thus be investigated. The objective of this study was to investigate the effects of using TDD to develop scientific software in a high-performance- computing (HPC) environment. The results show that the TDD provides both advantages and disadvantages in a parallel computing environment. In particular, developers face problems when writing tests and there is a lack of software engineering practices.",Test-driven development; scientific software; empirical study; high-performance-computing,SOFTWARE,Test-driven development;scientific software;empirical study;high-performance-computing;SOFTWARE,aziz.n@phuket.psu.ac.th,,"345 E 47TH ST, NEW YORK, NY 10017 USA",4th International Workshop on Software Engineering for High Performance Computing in Computational Science and Engineering (SE-HPCCSE),"Salt Lake City, UT","NOV 14, 2016",IEEE,,978-1-5090-5224-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000401818000002,2-s2.0-85015393512,Thailand,phuket.psu.ac.th,Prince Songkla Univ,"Prince Songkla Univ, Thailand","Nanthaamornphong, Aziz"
"Perez J., Crespo Y., Hoffmann B., Mens T.",A case study to evaluate the suitability of graph transformation tools for program refactoring,2010,International Journal on Software Tools for Technology Transfer,12,3,,183,199,,12,10.1007/s10009-010-0153-y,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953960112&doi=10.1007%2fs10009-010-0153-y&partnerID=40&md5=e9adf39f859e4e740799c0242e013250,"Departamento de Informática, Universidad de Valladolid, Valladolid, Spain; Fachbereich Mathematik und Informatik, Universität Bremen, Bremen, Germany; Faculté des Sciences, Institut d'Informatique, Université de Mons, Mons, Belgium","Pérez, J., Departamento de Informática, Universidad de Valladolid, Valladolid, Spain; Crespo, Y., Departamento de Informática, Universidad de Valladolid, Valladolid, Spain; Hoffmann, B., Fachbereich Mathematik und Informatik, Universität Bremen, Bremen, Germany; Mens, T., Faculté des Sciences, Institut d'Informatique, Université de Mons, Mons, Belgium","This article proposes a case study to evaluate the suitability of graph transformation tools for program refactoring. To qualify for this purpose, a graph transformation system must be able to (1) import a graph-based representation of models of Java programs, (2) allow these models to be transformed interactively with well-known program refactorings and (3) export the resulting models in the same graph-based format used as input. The case study aims to enable comparison of various features of graph transformation tools, such as their expressiveness and their ability to interact with the user. The model of Java programs is presented and some examples for translating Java source code into the model are provided. The refactorings selected for the case study are specified in detail. © 2010 Springer-Verlag.",Case study; Graph transformation; Java program graphs; Refactoring,Graph Transformation; Graph transformation system; Graph-based; Graph-based representations; Java program; Java source codes; Refactorings; Computer software; Graph theory; Program translators; Research; Java programming language,Case study;Graph transformation;Java program graphs;Refactoring;Graph transformation system;Graph-based;Graph-based representations;Java program;Java source codes;Refactorings;Computer software;Graph theory;Program translators;Research;Java programming language,"Pérez, J.; Departamento de Informática, Universidad de Valladolid, Valladolid, Spain; email: jperez@infor.uva.es",,,,,,,14332779,,,,English,Int. J. Softw. Tools Technol. Trans.,Article,Scopus,,2-s2.0-77953960112,,Spain;Germany;Belgium,infor.uva.es,,,"Perez J., Crespo Y., Hoffmann B., Mens T."
Viana T.,A catalog of bad smells in design-by-contract methodologies with Java modeling language,2013,Journal of Computing Science and Engineering,7,4,,251,262,,2,10.5626/JCSE.2013.7.4.251,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85008254621&doi=10.5626%2fJCSE.2013.7.4.251&partnerID=40&md5=d2edeebcc2c73b0bed326cfaeb696845,"Coordenaçao de Sistemas de Informaçao, Instituto Federal de Pernambuco, Recife, PE, Brazil","Viana, T., Coordenaçao de Sistemas de Informaçao, Instituto Federal de Pernambuco, Recife, PE, Brazil","Bad smells are usually related to program source code, arising from bad design and programming practices. Refactoring activities are often motivated by the detection of bad smells. With the increasing adoption of Design-by-Contract (DBC) methodologies in formal software development, evidence of bad design practices can similarly be found in programs that combine actual production code with interface contracts. These contracts can be written in languages, such as the Java Modeling Language (JML), an extension to the Java syntax. This paper presents a catalog of bad smells that appear during DBC practice, considering JML as the language for specifying contracts. These smells are described over JML constructs, although several can appear in other DBC languages. The catalog contains 6 DBC smells. We evaluate the recurrence of DBC smells in two ways: first by describing a small study with graduate student projects, and second by counting occurrences of smells in contracts from the JML models application programming interface (API). This API contains classes with more than 1,600 lines in contracts. Along with the documented smells, suggestions are provided for minimizing the impact or even removing a bad smell. It is believed that initiatives towards the cataloging of bad smells are useful for establishing good design practices in DBC. © 2013. The Korean Institute of Information Scientists and Engineers.",Bad smells; Design-by-contract; Java modeling language; Refactoring,Application programming interfaces (API); Computer programming; Design; Java programming language; Students; Bad smells; Design by contracts; Formal software development; Graduate students; Java Modeling Language; Program source codes; Programming practices; Refactorings; Odors,Bad smells;Design-by-contract;Java modeling language;Refactoring;Application programming interfaces (API);Computer programming;Design;Java programming language;Students;Design by contracts;Formal software development;Graduate students;Program source codes;Programming practices;Refactorings;Odors,"Viana, T.; Coordenaçao de Sistemas de Informaçao, Instituto Federal de Pernambuco, Recife, PE, Brazil; email: tamnv@recife.ifpe.edu.br",,,,,,Korean Institute of Information Scientists and Engineers,19764677,,,,English,J. Comput. Sci. Eng.,Article,Scopus,,2-s2.0-85008254621,,Brazil,recife.ifpe.edu.br,,,Viana T.
"Parnin, C., Gorg, C., Nnadi, O.",A Catalogue of Lightweight Visualizations to Support Code Smell Inspection,2008,SOFTVIS 2008: PROCEEDINGS OF THE 4TH ACM SYMPOSIUM ON SOFTWARE VISUALIZATION,,,,77,86,10,20,,,"[Parnin, Chris; Goerg, Carsten; Nnadi, Ogechi] Georgia Inst Technol, Coll Comp, Atlanta, GA 30332 USA",,"Preserving the integrity of software systems is essential in ensuring future product success. Commonly, companies allocate only a limited budget toward perfective maintenance and instead pressure developers to focus on implementing new features. Traditional techniques, such as code inspection, consume many staff resources and attention from developers. Metrics automate the process of checking for problems but produce voluminous, imprecise, and incongruent results. An opportunity exists for visualization to assist where automated measures have failed; however, current software visualization techniques only handle the voluminous aspect of data but fail to address imprecise and incongruent aspects. In this paper, we describe several techniques for visualizing possible defects reported by automated inspection tools. We propose a catalogue of lightweight visualizations that assist reviewers in weeding out false positives. We implemented the visualizations in a tool called NOSEPRINTS and present a case study on several commercial systems and open source applications in which we examined the impact of our tool on the inspection process.",Code inspection; lightweight visualization; code smells; refactoring,,Code inspection;lightweight visualization;code smells;refactoring,chris.parnin@gatech.edu; goerg@cc.gatech.edu; ogechi.nnadi@gatech.edu,"Spencer, SN","1515 BROADWAY, NEW YORK, NY 10036-9998 USA",4th ACM Symposium on Software Visualization,"Herrsching am Ammersee, GERMANY","SEP 16-17, 2008",ASSOC COMPUTING MACHINERY,,978-1-60558-112-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000265740700010,2-s2.0-63149148759,United States,gatech.edu,Georgia Inst Technol,"Georgia Inst Technol, United States","Parnin, Chris; Goerg, Carsten; Nnadi, Ogechi"
"Sidhu, B.K., Singh, K., Sharma, N.",A Catalogue of Model Smells and Refactoring Operations for Object-Oriented Software,2018,PROCEEDINGS OF THE 2018 SECOND INTERNATIONAL CONFERENCE ON INVENTIVE COMMUNICATION AND COMPUTATIONAL TECHNOLOGIES (ICICCT),,,,313,319,7,0,,,"[Sidhu, Brahmaleen K.] Punjabi Univ, Dept Comp Engn, Patiala, Punjab, India; [Singh, Kawaljeet] Punjabi Univ, Univ Comp Ctr, Patiala, Punjab, India; [Sharma, Neeraj] Punjabi Univ, Dept Comp Sci, Patiala, Punjab, India",,"The advent of Model Driven Engineering has promoted software quality assurance activities to a higher level of abstraction than code, i.e. architectural models. Early quality assessment facilitates better design, reduces maintenance costs, manages requirement volatility and leads to faster software development. Less than optimal design decisions made during development and subsequent evolution introduce smells in the software. Model Refactoring uncovers smells at architectural level and transforms graphical representations of software to enhance design without affecting its observable behaviour. Focusing on object-oriented software systems, this paper presents a catalogue of smells and refactoring operations for UML class diagrams. The paper concludes by highlighting challenges in model refactoring and the potential of learning-based approach in automating the process.",Deep Learning; Model Refactoring; Model Smells; Software Quality,EVOLUTION; DESIGN,Deep Learning;Model Refactoring;Model Smells;Software Quality;EVOLUTION;DESIGN,brahmaleen@pbi.ac.in; singhkawaljeet@pbi.ac.in; sharma_neeraj@hotmail.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Inventive Communication and Computational Technologies (ICICCT),"Coimbatore, INDIA","APR 20-21, 2018",IEEE,,978-1-5386-1974-2,,,English,,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000456251700060,2-s2.0-85059866952,India,pbi.ac.in,Punjabi Univ,"Punjabi Univ, India","Sidhu, Brahmaleen K.; Singh, Kawaljeet; Sharma, Neeraj"
"Medeiros, F., Ribeiro, M., Gheyi, R., Fonseca, B.",A Catalogue of Refactorings to Remove Incomplete Annotations,2014,JOURNAL OF UNIVERSAL COMPUTER SCIENCE,20,5,,746,771,26,2,,,"[Medeiros, Flavio; Gheyi, Rohit] Univ Fed Campina Grande, Campina Grande, Brazil; [Ribeiro, Marcio; Fonseca, Baldoino] Univ Fed Alagoas, Maceio, Brazil",,"Developers use the C Preprocessor (CPP) to handle portability and variability in program families of different sizes and domains. However, despite the widely use of the CPP in practice, it is often criticised due to its negative impact on code quality and maintainability, tool development, and its error-prone characteristics. In particular, developers aggravate these problems when using incomplete annotations, i.e., directives encompassing only parts of syntactical units. In a previous work, we performed an empirical study on 41 C program family releases and found that almost 90% of syntax errors occur in incomplete annotations. There are some refactorings to remove incomplete annotations proposed in the literature. However, they clone code and increase Lines of Code (LOC). To avoid incomplete annotations and their intrinsic problems, in this article we propose a catalogue of refactorings that converts incomplete annotations into complete ones without cloning code. We implement an Eclipse plug-in to help developers applying our refactorings automatically. To evaluate our catalogue, we performed a study to analyse questions related to code cloning, LOC, and number of directives. To answer our research questions, we analyse releases of 12 C program families of different domains ranging from 4.9 thousand to 1.5 million LOC. The results show that our catalogue can remove all incomplete annotations without cloning code, and increasing only in 0.04% the LOC and in 2.10% the number of directives.",Refactoring; C Language; Preprocessors; Program Families,CODE,Refactoring;C Language;Preprocessors;Program Families;CODE,flaviomedeiros@copin.ufcg.edu.br; marcio@ic.ufal.br; rohit@dsc.ufcg.edu.br; baldoino@ic.ufal.br,,"INFFELDGASSE 16C, GRAZ, A-8010, AUSTRIA",,,,"GRAZ UNIV TECHNOLGOY, INST INFORMATION SYSTEMS COMPUTER MEDIA-IICM",0948-695X,,,,English,J UNIVERS COMPUT SCI,Article,WoS,Computer Science,WOS:000339391100008,,Brazil,copin.ufcg.edu.br,Univ Fed Campina Grande;Univ Fed Alagoas,"Univ Fed Campina Grande, Brazil;Univ Fed Alagoas, Brazil","Medeiros, Flavio; Ribeiro, Marcio; Gheyi, Rohit; Fonseca, Baldoino"
"Joubert, W., Archibald, R., Berrill, M., Brown, W.M., Eisenbach, M., Grout, R., Larkin, J., Levesque, J., Messer, B., Norman, M., Philip, B., Sankaran, R., Tharrington, A., Turner, J.",Accelerated application development: The ORNL Titan experience,2015,COMPUTERS & ELECTRICAL ENGINEERING,46,,,123,138,16,12,10.1016/j.compeleceng.2015.04.008,,"[Joubert, Wayne; Archibald, Rick; Berrill, Mark; Brown, W. Michael; Eisenbach, Markus; Messer, Bronson; Norman, Matt; Philip, Bobby; Sankaran, Ramanan; Tharrington, Arnold; Turner, John] Oak Ridge Natl Lab, Oak Ridge, TN 37831 USA; [Levesque, John] Cray Inc, Knoxville, TN USA; [Grout, Ray] Natl Renewable Energy Lab, Golden, CO 80401 USA; [Larkin, Jeff] NVIDIA Corp, Oak Ridge, TN 37831 USA",,"The use of computational accelerators such as NVIDIA GPUs and Intel Xeon Phi processors is now widespread in the high performance computing community, with many applications delivering impressive performance gains. However, programming these systems for high performance, performance portability and software maintainability has been a challenge. In this paper we discuss experiences porting applications to the Titan system. Titan, which began planning in 2009 and was deployed for general use in 2013, was the first multi-petaflop system based on accelerator hardware. To ready applications for accelerated computing, a preparedness effort was undertaken prior to delivery of Titan. In this paper we report experiences and lessons learned from this process and describe how users are currently making use of computational accelerators on Titan. (C) 2015 Elsevier Ltd. All rights reserved.",High performance computing; Accelerated computing; GPU graphics processing units; Science applications; Code refactoring; Software optimization,,High performance computing;Accelerated computing;GPU graphics processing units;Science applications;Code refactoring;Software optimization,joubert@ornl.gov,,"THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, ENGLAND",,,,PERGAMON-ELSEVIER SCIENCE LTD,0045-7906,,,,English,COMPUT ELECTR ENG,Article,WoS,Computer Science; Engineering,WOS:000367122800011,2-s2.0-84928923259,United States,ornl.gov,Oak Ridge Natl Lab;Cray Inc;Natl Renewable Energy Lab;NVIDIA Corp,"Oak Ridge Natl Lab, United States;Cray Inc, United States;Natl Renewable Energy Lab, United States;NVIDIA Corp, United States","Joubert, Wayne; Archibald, Rick; Berrill, Mark; Brown, W. Michael; Eisenbach, Markus; Grout, Ray; Larkin, Jeff; Levesque, John; Messer, Bronson; Norman, Matt; Philip, Bobby; Sankaran, Ramanan; Tharrington, Arnold; Turner, John"
"Landman, J., Ray, J., Walters, J.P.",Accelerating HMMer searches on Opteron processors with minimally invasive recoding,2006,"20th International Conference on Advanced Information Networking and Applications, Vol 2, Proceedings",,,,628,632,5,0,,,,,"HMMer is a widely used tool for protein sequence homology detection, as well as functional annotation of homologous protein sequences, and protein family classification. The HMMer program is based upon a Viterbi algorithm coded in C, and is quite time consuming. Significant efforts have been undertaken to accelerate this program using custom special purpose hardware, as well as more recent attempts to leverage commodity special purpose hardware. This work will report on several minimally invasive code refactoring efforts independently undertaken by the authors, and their significant performance impact on wall clock execution time of the entire program for various test cases.",,,,,"Martin, DC","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",20th International Conference on Advanced Information Networking and Applications,"Vienna, AUSTRIA","APR 18-20, 2006",IEEE COMPUTER SOC,,0-7695-2466-4,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000238355300107,,,No email,,,"Landman, Joseph; Ray, Joydeep; Walters, J. P."
"Simpson, R.N., Liu, Z.",Acceleration of isogeometric boundary element analysis through a black-box fast multipole method,2016,ENGINEERING ANALYSIS WITH BOUNDARY ELEMENTS,66,,,168,182,15,15,10.1016/j.enganabound.2016.03.004,,"[Simpson, R. N.; Liu, Z.] Univ Glasgow, Sch Engn, Glasgow G12 8QQ, Lanark, Scotland",,"This work outlines the use of a black-box fast multipole method to accelerate the far-field computations in an isogeometric boundary element method. The present approach makes use of T-splines to discretise both the geometry and analysis fields allowing a direct integration of CAD and analysis technologies. A black-box fast multipole method of O(N) complexity is adopted that minimises refactoring of existing boundary element codes and facilitates the use of different kernels. This paper outlines an algorithm for implementing the open-source black-box fast multipole method BBFMM3D(1) within an existing isogeometric boundary element solver, but the approach is general in nature and can be applied to any boundary element surface discretisation. The O(N) behaviour of the approach is validated and compared against a standard direct solver. Finally, the ability to model large models of arbitrary geometric complexity directly from CAD models is demonstrated for potential problems. (C) 2016 Elsevier Ltd. All rights reserved.",Isogeometric analysis; T-splines; Boundary element method; Black-box fast multipole method,WAVE-RESISTANCE PROBLEM; B-SPLINES; PARTICLE SIMULATIONS; 3 DIMENSIONS; METHOD XIBEM; PHT-SPLINES; T-SPLINES; ALGORITHM; APPROXIMATION; SURFACES,Isogeometric analysis;T-splines;Boundary element method;Black-box fast multipole method;WAVE-RESISTANCE PROBLEM;B-SPLINES;PARTICLE SIMULATIONS;3 DIMENSIONS;METHOD XIBEM;PHT-SPLINES;ALGORITHM;APPROXIMATION;SURFACES,robert.simpson.2@glasgow.ac.uk,,"THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, OXON, ENGLAND",,,,ELSEVIER SCI LTD,0955-7997,,,,English,ENG ANAL BOUND ELEM,Article,WoS,Engineering; Mathematics,WOS:000374079600014,,United Kingdom,glasgow.ac.uk,Univ Glasgow,"Univ Glasgow, United Kingdom","Simpson, R. N.; Liu, Z."
"Tsantalis, N., Mansouri, M., Eshkevari, L.M., Mazinanian, D., Dig, D.",Accurate and Efficient Refactoring Detection in Commit History,2018,PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE),,,,483,494,12,6,10.1145/3180155.3180206,,"[Tsantalis, Nikolaos; Mansouri, Matin; Eshkevari, Laleh M.; Mazinanian, Davood] Concordia Univ, Montreal, PQ, Canada; [Dig, Danny] Oregon State Univ, Corvallis, OR 97331 USA",,"Refactoring detection algorithms have been crucial to a variety of applications: (i) empirical studies about the evolution of code, tests, and faults, (ii) tools for library API migration, (iii) improving the comprehension of changes and code reviews, etc. However, recent research has questioned the accuracy of the state-of-the-art refactoring detection tools, which poses threats to the reliability of their application. Moreover, previous refactoring detection tools are very sensitive to user-provided similarity thresholds, which further reduces their practical accuracy. In addition, their requirement to build the project versions/revisions under analysis makes them inapplicable in many real-world scenarios. To reinvigorate a previously fruitful line of research that has stifled, we designed, implemented, and evaluated RMINER, a technique that overcomes the above limitations. At the heart of RMINER is an AST-based statement matching algorithm that determines refactoring candidates without requiring user-defined thresholds. To empirically evaluate RMINER, we created the most comprehensive oracle to date that uses triangulation to create a dataset with considerably reduced bias, representing 3,188 refactorings from 185 open-source projects. Using this oracle, we found that RMINER has a precision of 98% and recall of 87%, which is a significant improvement over the previous state-of-the-art.",Refactoring; Commit; Git; Abstract Syntax Tree; Oracle; Accuracy,CODE; SUPPORT; THRESHOLDS,Refactoring;Commit;Git;Abstract Syntax Tree;Oracle;Accuracy;CODE;SUPPORT;THRESHOLDS,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",40th ACM/IEEE International Conference on Software Engineering (ICSE),"Gothenburg, SWEDEN","MAY 27-JUN 03, 2018",IEEE,,978-1-4503-5638-1,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000454843300057,,Canada;United States,No email,Concordia Univ;Oregon State Univ,"Concordia Univ, Canada;Oregon State Univ, United States","Tsantalis, Nikolaos; Mansouri, Matin; Eshkevari, Laleh M.; Mazinanian, Davood; Dig, Danny"
"Hinsman, C., Sangal, N., Stafford, J.",Achieving Agility through Architecture Visibility,2009,ARCHITECTURES FOR ADAPTIVE SOFTWARE SYSTEMS,5581,,,116,+,3,9,,,"[Hinsman, Carl] LL Bean Inc, Freeport, ME 04032 USA; [Sangal, Neeraj] Lattix Inc, Andover, MA USA; [Stafford, Judith] Tufts Univ, Medford, MA USA",,"L.L.Bean is a large retail organization whose development processes must be agile in order to allow rapid enhancement and maintenance of its technology infrastructure. Over the past decade L.L.Bean's software code-base had become brittle and difficult to evolve. An effort was launched to identify and develop new approaches to software development that would enable ongoing agility to support the ever-increasing demands of a successful business. This paper recounts L.L.Bean's effort in restructuring its code-base and adoption of process improvements that support an architecture-based agile approach to development, governance, and maintenance. Unlike traditional refactoring, this effort was guided by an architectural blueprint that was created in a Dependency Structure Matrix where the refactoring was first prototyped before being applied to the actual code base.",architecture; dependency; agility,,architecture;dependency;agility,chinsman@llbean.com; neeraj.sangal@lattix.com; jas@cs.tufts.edu,"Mirandola, R; Gorton, I; Hofmeister, C","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",5th International Conference on the Quality of Software Architectures,"E Stroudsburg, PA","JUN 24-26, 2009",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-02350-7,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000270318900008,2-s2.0-70350640676,United States,llbean.com,LL Bean Inc;Lattix Inc;Tufts Univ,"LL Bean Inc, United States;Lattix Inc, United States;Tufts Univ, United States","Hinsman, Carl; Sangal, Neeraj; Stafford, Judith"
"Faiz, F., Easmin, R., Gias, A.U.",Achieving better requirements to code traceability: Which refactoring should be done first?,2016,PROCEEDINGS 2016 10TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC),,,,9,14,6,1,10.1109/QUATIC.2016.10,,"[Faiz, Farina; Gias, Alim Ul] Univ Dhaka, Inst Informat Technol, Dhaka 1000, Bangladesh; [Easmin, Rubaida] Daffodil Int Univ, Dept Software Engn, Dhaka 1207, Bangladesh",,"During system evolution, trace links among requirements and source code could get distorted due to vocabulary mismatch problem. Nevertheless, researchers have shown that those links can be recovered by code refactoring. Moreover, it is shown that refactoring methods like rename identifier has positive impact in supporting traceability. This leads to the question that will other refactoring methods will have same impact on traceability? If yes, then which refactoring technique should be applied first? For this investigation, we used four refactoring techniques - introducing parameter object, pull up field, inline class and decompose conditional. The methods were applied on two different code bases namely iTrust and eTour. The traceability links were generated by an automated tool named TraceME. From the experiment, we observed that introducing parameter object improves requirements to code traceability. Inline class and decompose conditional show a little but positive influence. Pull up method shows no improvements in traceability. We conclude that introducing parameter object should have high priority to achieve better traceability.",,,,bit0406@iit.du.ac.bd; rubaida.swe@diu.edu.bd; alim@iit.du.ac.bd,"Paulk, M; Machado, RJ; Brito, MA; Amaral, V; Goulao, M","345 E 47TH ST, NEW YORK, NY 10017 USA",10th International Conference on the Quality of Information and Communications Technology (QUATIC),"Lisbon, PORTUGAL","SEP 06-09, 2016",IEEE,,978-1-5090-3581-6,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000400069400002,,Bangladesh,iit.du.ac.bd,Univ Dhaka;Daffodil Int Univ,"Univ Dhaka, Bangladesh;Daffodil Int Univ, Bangladesh","Faiz, Farina; Easmin, Rubaida; Gias, Alim Ul"
"Kramer M.E., Klein J., Steel J.R.H., Morin B., Kienzle J., Barais O., Jezequel J.M.",Achieving Practical Genericity in Model Weaving through Extensibility,2013,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),7909 LNCS,,,108,124,,5,10.1007/978-3-642-38883-5_12,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884409371&doi=10.1007%2f978-3-642-38883-5_12&partnerID=40&md5=6465d8aa2006601ad6647f71d5937b25,"Karlsruhe Institute of Technology, Karlsruhe, Germany; University of Luxembourg, Luxembourg, Luxembourg; University of Queensland, Brisbane, QLD, Australia; SINTEF ICT, Oslo, Norway; McGill University, Montréal, QC, Canada; IRISA-INRIA, Triskell, Rennes, France","Kramer, M.E., Karlsruhe Institute of Technology, Karlsruhe, Germany; Klein, J., University of Luxembourg, Luxembourg, Luxembourg; Steel, J.R.H., University of Queensland, Brisbane, QLD, Australia; Morin, B., SINTEF ICT, Oslo, Norway; Kienzle, J., McGill University, Montréal, QC, Canada; Barais, O., IRISA-INRIA, Triskell, Rennes, France; Jézéquel, J.-M., IRISA-INRIA, Triskell, Rennes, France","Many tasks in Model-Driven Engineering (MDE) involve cross-cutting model modifications that are bound to certain conditions. These transformation tasks may affect numerous model elements and appear in different forms, such as refactoring, model completions or aspect-oriented model weaving. Although the operations at the heart of these tasks are domain-independent, generic solutions that can easily be used and customized are rare. General-purpose model transformation languages as well as existing model weavers exhibit metamodel-specific restrictions and introduce accidental complexity. In this paper, we present a model weaver that addresses these problems using an extensible approach that is defined for metamodelling languages and therefore generic. Through examples of different formalisms we illustrate how our weaver manages homogeneous in-place model transformations that may involve the duplication, merge, and removal of model elements in a generic way. Possibilities to extend and customize our weaver are exemplified for the non-software domain of Building Information Modelling (BIM). © 2013 Springer-Verlag.",,Aspect oriented modeling; Building Information Modelling; Generic solutions; Model completions; Model modification; Model transformation; Model transformation languages; Model-driven Engineering; Architectural design; Weaving; Mathematical models,Aspect oriented modeling;Building Information Modelling;Generic solutions;Model completions;Model modification;Model transformation;Model transformation languages;Model-driven Engineering;Architectural design;Weaving;Mathematical models,"Karlsruhe Institute of Technology, Karlsruhe, Germany",,,,,,,03029743,9783642388828,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-84884409371,,Germany;Luxembourg;Australia;Norway;Canada;France,No email,,,"Kramer M.E., Klein J., Steel J.R.H., Morin B., Kienzle J., Barais O., Jezequel J.-M."
Bosch J.,Achieving simplicity with the three-layer product model,2013,Computer,46,11, 6587454,34,39,,16,10.1109/MC.2013.295,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84890038400&doi=10.1109%2fMC.2013.295&partnerID=40&md5=b14c192e599e13639c897367954245d8,"Software Center, Chalmers University of Technology, Sweden","Bosch, J., Software Center, Chalmers University of Technology, Sweden","Increased system complexity has historically been treated as an inevitable consequence of architecture evolution over time. The three-layer product model offers an innovative framework for managing system growth that encourages greater efficiency, nimbler responsiveness, and more opportunities for innovation during all stages of the software development life cycle. © 2013 IEEE.",commoditization; refactoring; software architecture complexity; software evolution; software life cycle; software product management; software R&amp;D,Commoditization; Refactorings; Software Evolution; Software life cycles; Software product management; Computer science,commoditization;refactoring;software architecture complexity;software evolution;software life cycle;software product management;software R&amp;D;Refactorings;Software life cycles;Computer science,"Bosch, J.; Software Center, Chalmers University of TechnologySweden; email: jan@janbosch.com",,,,,,,00189162,,CPTRB,,English,Computer,Article,Scopus,,2-s2.0-84890038400,,Sweden,janbosch.com,,,Bosch J.
"Salgado, R.S., Diaz, O.G.F., Marrero, M.A.V., Mendez, I.M.V., Castillo, L.E.S.",Achieving software reuse using the interface separation principle of object-oriented design,2004,"8TH WORLD MULTI-CONFERENCE ON SYSTEMICS, CYBERNETICS AND INFORMATICS, VOL I, PROCEEDINGS: INFORMATION SYSTEMS, TECHNOLOGIES AND APPLICATIONS",,,,456,461,6,0,,,"Natl Res & Technol Dev Ctr, Ctr Comp Sci, Cuernavaca 62490, Morelos, Mexico",,"Object-Oriented programming is one of the current paradigms for producing quality software, providing that the object-oriented principles are respected and fulfilled. One principle is the interface separation, which states that clients of any given software must not be forced to depend on interfaces they do not need. If an object-oriented framework complies with this principle, it can be reused and extended without any trouble as we will show in this paper. If code reuse is achieved, we reduce the time of programming a new application, and also reduce the possibility of errors, since we are using already-proven code. When a framework does not comply with this principle because it has the interface dependency problem, its functionality cannot be reused separately, and cannot be extended either without violating other object-oriented principles, like the open / close principle. To solve this problem, in this paper a refactoring method for separating interface based on the interface separation principle is presented.",software reuse; interface separation principle; interface separation method; interface dependency problem; framework,,software reuse;interface separation principle;interface separation method;interface dependency problem;framework,,"Callaos, N; Lesso, W; Sanchez, B","14269 LORD BARCLAY DR, ORLANDO, FL 32837 USA","8th World Multi-Conference on Systemics, Cybernetics and Informatics","Orlando, FL","JUL 18-21, 2004",INT INST INFORMATICS & SYSTEMICS,,980-6560-13-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000227674200083,,Mexico,No email,Ctr Comp Sci,"Ctr Comp Sci, Mexico","Salgado, RS; Diaz, OGF; Marrero, MAV; Mendez, IMV; Castillo, LES"
"Marin, M., Moonen, L., van Deursen, A.",A classification of crosscutting concerns,2005,ICSM 2005: PROCEEDINGS OF THE 21ST IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,673,676,4,20,,,"Delft Univ Technol, Software Evolut Res Lab, Delft, Netherlands",,"Refactoring software to apply aspect oriented solutions requires a clear understanding of what are the potential crosscutting concerns and which aspect solutions to replace them with. This process can benefit from the recognition of recurring generic concerns and their reusable aspect solutions. In this paper we propose a classification of crosscutting concerns in sorts based on the analysis of various refactoring efforts. We discuss how sorts help concern understanding and refactoring, how they support the identification of crosscutting concerns, and how they can contribute to the evolution of aspect languages.",,,,A.M.Marin@ewi.tudelft.nl; Leon.Moonen@computer.org; Arie.van.Deursen@cwi.nl,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",21st International Conference on Software Maintenance (ICSM 2005),"Budapest, HUNGARY","SEP 26-29, 2005",IEEE COMPUTER SOC,1063-6773,0-7695-2368-4,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000234333200076,2-s2.0-33646922342,Netherlands,ewi.tudelft.nl,Software Evolut Res Lab,"Software Evolut Res Lab, Netherlands","Marin, M; Moonen, L; van Deursen, A"
"Greenberg, A., Hjaimtysson, G., Maltz, D.A., Myers, A., Rexford, J., Xie, G., Yan, H., Zhan, J.B., Zhang, H.",A clean slate 4D approach to network control and management,2005,ACM SIGCOMM COMPUTER COMMUNICATION REVIEW,35,5,,41,+,13,302,10.1145/1096536.1096541,,"Univ Penn, Philadelphia, PA 19104 USA",,"Today's data networks are surprisingly fragile and difficult to manage. We argue that the root of these problems lies in the complexity of the control and management planes-the software and protocols coordinating network elements-and particularly the way the decision logic and the distributed-systems issues are inexorably intertwined. We advocate a complete refactoring of the functionality and propose three key principles-network-level objectives, network-wide views, and direct control-that we believe should underlie a new architecture. Following these principles, we identify an extreme design point that we call ""4D,"" after the architecture's four planes: decision, dissemination, discovery, and data. The 4D architecture completely separates an AS's decision logic from protocols that govern the interaction among network elements. The AS-level objectives are specified in the decision plane, and enforced through direct configuration of the state that drives how the data plane forwards packets. In the 4D architecture, the routers and switches simply forward packets at the behest of the decision plane, and collect measurement data to aid the decision plane in controlling the network. Although 4D would involve substantial changes to today's control and management planes, the format of data packets does not need to change; this eases the deployment path for the 4D architecture, while still enabling substantial innovation in network control and management. We hope that exploring an extreme design point will help focus the attention of the research and industrial communities on this crucially important and intellectually challenging area.",network management; robustness; control,,network management;robustness;control,albert@research.att.com; gisli@ru.is; dmaltz@cs.cmu.edu; acm@cs.cmu.edu; jrex@cs.princeton.edu; xie@nps.edu; yh@cs.cmu.edu; jibin@cs.cmu.edu; hzhang@cs.cmu.edu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,0146-4833,,,,English,ACM SIGCOMM COMP COM,Article,WoS,Computer Science,WOS:000233120300005,2-s2.0-33750037341,United States,research.att.com,Philadelphia,"Philadelphia, United States","Greenberg, A; Hjaimtysson, G; Maltz, DA; Myers, A; Rexford, J; Xie, G; Yan, H; Zhan, JB; Zhang, H"
"Ma, P.J., Bian, Y.X., Su, X.H.",A Clustering Method for Pruning False Positive of Clonde Code Detection,2013,"PROCEEDINGS 2013 INTERNATIONAL CONFERENCE ON MECHATRONIC SCIENCES, ELECTRIC ENGINEERING AND COMPUTER (MEC)",,,,1917,1920,4,0,,,"[Ma, Peijun; Bian, Yixin; Su, Xiaohong] Harbin Inst Technol, Dept Comp Sci, Harbin 150006, Peoples R China",,"There are some false positives when detect syntax similar cloned code with clone code technology based on token. In this paper, we propose a novel algorithm to automatically prune false positives of clone code detection by performing clustering with different attribute and weights. First, closely related statements are grouped into a cluster by performing clustering. Second, compare the hash values of the statements in the two clusters to prune false positives. The experimental results show that our method can effectively prune clone code false positives caused by switching the orders of same structure statments. It not only improves the accuracy of cloned code detection and cloned code related defects detection but also contribute to the following study of cloned code refactoring",Cloned code; false positives; style; clustering; refactoring,,Cloned code;false positives;style;clustering;refactoring,ma@hit.edu.cn; Bianyu79@163.com; sxh@hit.edu.cn,,"345 E 47TH ST, NEW YORK, NY 10017 USA","International Conference on Mechatronic Sciences, Electric Engineering and Computer (MEC)","Shenyang, PEOPLES R CHINA","DEC 20-22, 2013",IEEE,,978-1-4799-2565-0,,,English,,Proceedings Paper,WoS,Engineering,WOS:000366663001123,,China,hit.edu.cn,Harbin Inst Technol,"Harbin Inst Technol, China","Ma, Peijun; Bian, Yixin; Su, Xiaohong"
"Meng, S., Barbosa, L.S.",A Coalgebraic Semantic Framework for Reasoning about UML Sequence Diagrams,2008,QSIC 2008: PROCEEDINGS OF THE EIGHTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE,,,,17,+,3,3,10.1109/QSIC.2008.13,,"[Meng, Sun; Barbosa, Luis S.] CWI, Kruislaan 413, NL-1009 AB Amsterdam, Netherlands",,"If, as a well-known aphorism states, modelling is for reasoning, this paper is an attempt to define and apply a formal semantics to UML sequence diagrams in order to enable rigourous reasoning about them. Actually, model transformation plays a fundamental role in the process of software development, in general, and in model driven engineering in particular Being a de facto standard in this area, UML is no exception, even if the number and diversity of diagrams expressing UML models makes it difficult to base its semantics on a single framework. This paper builds on previous attempts to base UML semantics in a coalgebraic setting and illustrates the application of the proposed framework to reason about composition and refactoring of sequence diagrams.",,SOFTWARE COMPONENTS; REFINEMENT; SPECIFICATIONS; SCENARIOS; MODELS,SOFTWARE COMPONENTS;REFINEMENT;SPECIFICATIONS;SCENARIOS;MODELS,M.Sun@cwi.nl; lsb@di.uminho.pt,"Zhu, H","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",8th International Conference on Quality Software,"Oxford, ENGLAND","AUG 12-13, 2008",IEEE COMPUTER SOC,1550-6002,978-0-7695-3312-4,,,English,INT CONF QUAL SOFTW,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000259566300003,,Netherlands,cwi.nl,CWI,"CWI, Netherlands","Meng, Sun; Barbosa, Luis S."
"Kadar, I., Hegedus, P., Ferenc, R., Gyimothy, T.",A Code Refactoring Dataset and Its Assessment Regarding Software Maintainability,2016,"2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1",,,,599,603,5,8,10.1109/SANER.2016.42,,"[Kadar, Istvan; Hegedus, Peter; Ferenc, Rudolf; Gyimothy, Tibor] Univ Szeged, Szeged, Hungary",,"It is very common in various fields that there is a gap between theoretical results and their practical applications. This is true for code refactoring as well, which has a solid theoretical background while being used in development practice at the same time. However, more and more studies suggest that developers perform code refactoring entirely differently than the theory would suggest. Our paper encourages the further investigation of code refactorings in practice by providing an excessive open dataset of source code metrics and applied refactorings through several releases of 7 open-source systems. As a first step of processing this dataset, we examined the quality attributes of the refactored source code classes and the values of source code metrics improved by those refactorings. Our early results show that lower maintainability indeed triggers more code refactorings in practice and these refactorings significantly decrease complexity, code lines, coupling and clone metrics. However, we observed a decrease in comment related metrics in the refactored code.",code refactoring; software maintainability; empirical study,,code refactoring;software maintainability;empirical study,ikadar@inf.u-szeged.hu; hpeter@inf.u-szeged.hu; ferenc@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu,,"345 E 47TH ST, NEW YORK, NY 10017 USA","23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)","Osaka, JAPAN","MAR 14-18, 2016",IEEE,,978-1-5090-1855-0,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000382672700056,2-s2.0-85015318688,Hungary,inf.u-szeged.hu,Univ Szeged,"Univ Szeged, Hungary","Kadar, Istvan; Hegedus, Peter; Ferenc, Rudolf; Gyimothy, Tibor"
"Aliyu, Z., Ab Rahim, L., Mustapha, E.E.",A Combine Usability Framework for IMCAT Evaluation,2014,2014 INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCES (ICCOINS),,,,,,5,0,,,"[Aliyu, Ziyaulhaq; Ab Rahim, Lukman; Mustapha, Emy Elyanee] Univ Teknol PETRONAS, Dept Comp & Info Sci, Tronoh 31750, Perak, Malaysia",,"Model transformation (MT) is a key component of model driven software development. It is used to transform source model into a target model, to increase model quality and introduce design pattern and refactoring. As with other software development artifacts, MTs are not free from bugs and thus they must be verified. Various researches have been carried out on model transformation verification approaches, but no one has evaluated their usability. Indirect model checking approach for transformation (IMCAT) is an approach that can verify code generators by model checking the generated code. In this paper a combine usability model to evaluate IMCAT usability related to its learnability, efficiency and effectiveness will be presented.",Model-driven Engineering; Model Transformation Verification; Model checking; Usability,MODEL TRANSFORMATIONS; VERIFICATION,Model-driven Engineering;Model Transformation Verification;Model checking;Usability;MODEL TRANSFORMATIONS;VERIFICATION,ziyaulhaqaliyu@yahoo.com; Emy.elyanee@petronas.com.my; lukmanrahim@petronas.com.my,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Computer and Information Sciences (ICCOINS),MALAYSIA,"JUN 03-05, 2014",IEEE,,978-1-4799-4391-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000347892600103,2-s2.0-84938769726,Malaysia,yahoo.com,Univ Teknol PETRONAS,"Univ Teknol PETRONAS, Malaysia","Aliyu, Ziyaulhaq; Ab Rahim, Lukman; Mustapha, Emy Elyanee"
"Cojocar, G.S., Guran, A.M.",A Comparative Analysis of Monitoring Concerns Implementation in Object Oriented Systems,2018,2018 IEEE 12TH INTERNATIONAL SYMPOSIUM ON APPLIED COMPUTATIONAL INTELLIGENCE AND INFORMATICS (SACI),,,,355,359,5,0,,,"[Cojocar, Grigoreta-Sofia; Guran, Adriana-Mihaela] Babes Bolyai Univ, Dept Comp Sci, 1 M Kogalniceanu St, Cluj Napoca, Romania",,"Monitoring concerns are crosscutting concerns that record the behaviour of a software system during development, testing and execution in its own environment. Their implementation using the object oriented paradigm affects an important part of a software system's source code, and, also, the system's maintainability and understandability. Complementary programming paradigms could be used for their design and implementation in order to improve these qualities. In order to refactor the existing implementation first we need to identify the monitoring concerns in the source code. In this article we describe our findings about how monitoring concerns are implemented in object oriented systems, as a starting point in developing an automatic approach for their identification and refactoring. We have analyzed ten open source object oriented software systems developed in Java or C#, and we have performed a comparative analysis of their implementation. We have also identified possible challenges in their automatic identification.",,,,grigo@cs.ubbcluj.ro; adriana@cs.ubbcluj.ro,,"345 E 47TH ST, NEW YORK, NY 10017 USA",12th IEEE International Symposium on Applied Computational Intelligence and Informatics (SACI),"Timisoara, ROMANIA","MAY 17-19, 2018",IEEE,,978-1-5386-4640-3,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000448144200062,2-s2.0-85053399167,Romania,cs.ubbcluj.ro,Babes Bolyai Univ,"Babes Bolyai Univ, Romania","Cojocar, Grigoreta-Sofia; Guran, Adriana-Mihaela"
"Kodhai E., Kanmani S.",A comparative analysis of software clone management techniques,2013,International Review on Computers and Software,8,12,,2784,2796,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84894551736&partnerID=40&md5=4e4cd962797e71de7a5aeeaf56eb7921,"Department of CSE, Pondicherry Engineering College, Puducherry, India; Department of IT, Pondicherry Engineering College, Puducherry, India","Kodhai, E., Department of CSE, Pondicherry Engineering College, Puducherry, India; Kanmani, S., Department of IT, Pondicherry Engineering College, Puducherry, India","Software clone research has proved that there are redundancies in software. This redundancy increased the maintenance effort. For nearly past two decades a number of software clone detection techniques and clone management techniques have been proposed in the software clone research. In literature some researchers has also proposed clone management techniques such as clone removal, clone modification, analyses the effect of clones during maintainability, investigating their evolution, and assessing the root causes of clones. There have been a number of researches which also focused on the evaluation of clone detection approaches. This paper is the analysis of different clone detection and management techniques. First, we analyze and evaluate all the currently available clone detection techniques and tools. Second, we study and discuss the different clone management techniques and tools which are currently available. © 2013 Praise Worthy Prize S.r.l. - All rights reserved.",Clone detection; Clone management; Refactoring; Software clones; Software maintenance,,Clone detection;Clone management;Refactoring;Software clones;Software maintenance,"Department of CSE, Pondicherry Engineering College, Puducherry, India",,,,,,,18286003,,,,English,Int. Rev. Comput. Softw.,Article,Scopus,,2-s2.0-84894551736,,India,No email,,,"Kodhai E., Kanmani S."
"Sajnani, H., Saini, V., Lopes, C.V.",A Comparative Study of Bug Patterns in Java Cloned and Non-cloned Code,2014,2014 14TH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION (SCAM 2014),,,,21,30,10,11,10.1109/SCAM.2014.12,,"[Sajnani, Hitesh; Saini, Vaibhav; Lopes, Cristina V.] Univ Calif Irvine, Bren Sch Informat & Comp Sci, Irvine, CA 92697 USA",,"Code cloning via copy-and-paste is a common practice in software engineering. Traditionally, this practice has been considered harmful, and a symptom that some important design abstraction is being ignored. As such, many previous studies suggest approaches to facilitate the discovery, removal, and refactoring of clones. However, not many studies exist that empirically investigate the relationship of code clones with code quality. In this paper, we conduct an empirical study of 31 open source Java projects (1.7 MSLOC) to explore the relationship between code clones and a set of bug patterns reported by FindBugs. We found that: (i) the defect density in cloned code is 3.7 times less than that of the rest of the code; (ii) 66% of the bug patterns associated with code clones are related to issues in coding style and practice, the two least problematic of the FindBugs categories, while that number is 49% for non-cloned code; and (iii) 75% of the bug patterns in cloned code are duplicated without any changes, while 25% are only present in one of the clones. These results show that, when using FindBugs to detect bug patterns, there is a positive differentiation of cloned code with respect to the rest of the code: the cloned code has considerably less, and less problematic, bug patterns. While our study does not unveil any explanation for this, results from other, more qualitative studies indicate that developers use copy-and-paste intentionally and wisely, which may explain the quantitative observations of our study. Overall, these research results suggest that the practice of code cloning in Java, and possibly in all other object-oriented languages, needs to be given serious consideration on the part of tool designers.",,SYSTEM,SYSTEM,hsajnani@ics.uci.edu; vpsaini@ics.uci.edu; lopes@ics.uci.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",14th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM),"Victoria, CANADA","SEP 28-29, 2014",IEEE,1942-5430,978-0-7695-5304-7,,,English,IEEE INT WORK C SO,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000358876700003,2-s2.0-84924872048,United States,ics.uci.edu,Univ Calif Irvine,"Univ Calif Irvine, United States","Sajnani, Hitesh; Saini, Vaibhav; Lopes, Cristina V."
"Negara, S., Chen, N., Vakilian, M., Johnson, R.E., Dig, D.",A Comparative Study of Manual and Automated Refactorings,2013,ECOOP 2013 - OBJECT-ORIENTED PROGRAMMING,7920,,,552,576,25,42,,,"[Negara, Stas; Chen, Nicholas; Vakilian, Mohsen; Johnson, Ralph E.; Dig, Danny] Univ Illinois, Urbana, IL 61801 USA",,"Despite the enormous success that manual and automated refactoring has enjoyed during the last decade, we know little about the practice of refactoring. Understanding the refactoring practice is important for developers, refactoring tool builders, and researchers. Many previous approaches to study refactorings are based on comparing code snapshots, which is imprecise, incomplete, and does not allow answering research questions that involve time or compare manual and automated refactoring. We present the first extended empirical study that considers both manual and automated refactoring. This study is enabled by our algorithm, which infers refactorings from continuous changes. We implemented and applied this algorithm to the code evolution data collected from 23 developers working in their natural environment for 1,520 hours. Using a corpus of 5,371 refactorings, we reveal several new facts about manual and automated refactorings. For example, more than half of the refactorings were performed manually. The popularity of automated and manual refactorings differs. More than one third of the refactorings performed by developers are clustered in time. On average, 30% of the performed refactorings do not reach the Version Control System.",,,,snegara2@illinois.edu; nchen@illinois.edu; mvakili2@illinois.edu; rjohnson@illinois.edu; dig@illinois.edu,"Castagna, G","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",27th European Conference on Object-Oriented Programming (ECOOP),"Sao Paulo, FRANCE","JUL 01-05, 2013",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-39038-8,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000342758800023,,United States,illinois.edu,Univ Illinois,"Univ Illinois, United States","Negara, Stas; Chen, Nicholas; Vakilian, Mohsen; Johnson, Ralph E.; Dig, Danny"
"Li, H.Q., Thompson, S.",A comparative study of refactoring Haskell and Erlang programs,2006,"SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS",,,,197,+,2,9,,,"[Li, Huiqing; Thompson, Simon] Univ Kent, Comp Lab, Canterbury, Kent, England",,"Refactoring is about changing the design of existing code without changing its behaviour but with the aim of making code easier to understand, modify, or reuse. Taking Haskell and Erlang as examples, we investigate the application of refactoring techniques to functional programs, and building tools for supporting interactive refactoring. Although both Haskell and Erlang are general-purpose functional programming languages, they have many differences in their language design and programming idioms. As a result, program refactoring in the two languages has much in common, but also considerable differences. This paper makes this comparison, and in particular looks in more detail at the refactorings applicable in each language, the program analysis required by typical refactorings, and at tool support for refactoring Haskell and Erlang programs.",,,,H.Li@kent.ac.uk; S.J.Thompson@kent.ac.uk,"DiPenta, M; Moonen, L","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",6th IEEE International Workshop on Source Code Analysis and Manipulation,"Philadelphia, PA","SEP 27-29, 2006",IEEE COMPUTER SOC,,978-0-7695-2353-8,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000244589600020,2-s2.0-34948823376,United Kingdom,kent.ac.uk,Univ Kent,"Univ Kent, United Kingdom","Li, Huiqing; Thompson, Simon"
"Mondal, M., Roy, C.K., Schneider, K.A.",A Comparative Study on the Bug-Proneness of Different Types of Code Clones,2015,2015 31ST INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME) PROCEEDINGS,,,,91,100,10,15,,,"[Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 0W0, Canada",,"Code clones are defined to be the exactly or nearly similar code fragments in a software system's code-base. The existing clone related studies reveal that code clones are likely to introduce bugs and inconsistencies in the code-base. However, although there are different types of clones, it is still unknown which types of clones have a higher likeliness of introducing bugs to the software systems and so, should be considered more important for managing with techniques such as refactoring or tracking. With this focus, we performed a study that compared the bug-proneness of the major clone-types: Type 1, Type 2, and Type 3. According to our experimental results on thousands of revisions of seven diverse subject systems, Type 3 clones exhibit the highest bug-proneness among the three clone-types. The bug-proneness of Type 1 clones is the lowest. Also, Type 3 clones have the highest likeliness of being co-changed consistently while experiencing bug-fixing changes. Moreover, the Type 3 clones that experience bug-fixes have a higher possibility of evolving following a Similarity Preserving Change Pattern (SPCP) compared to the bug-fix clones of the other two clone-types. From the experimental results it is clear that Type 3 clones should be given a higher priority than the other two clone-types when making clone management decisions. We believe that our study provides useful implications for ranking clones for refactoring and tracking.",,,,mshankar.mondal@usask.ca; chanchal.roy@usask.ca; kevin.schneider@usask.ca,"Koschke, R; Krinke, J; Robillard, M","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 31st International Conference on Software Maintenance and Evolution (ICSME),"Bremen, GERMANY","SEP 29-OCT 01, 2015",IEEE,1063-6773,978-1-4673-7532-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380398300010,2-s2.0-84961654706,Canada,usask.ca,Univ Saskatchewan,"Univ Saskatchewan, Canada","Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A."
"Mondal, M., Roy, C.K., Schneider, K.A.",A comparative study on the intensity and harmfulness of late propagation in near-miss code clones,2016,SOFTWARE QUALITY JOURNAL,24,4,,883,915,33,4,10.1007/s11219-016-9305-y,,"[Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK, Canada",,"Exact or nearly similar code fragments in a software system's source code are referred to as code clones. It is often the case that updates (i.e., changes) to a code clone will need to be propagated to its related code clones to preserve their similarity and to maintain source code consistency. When there is a delay in propagating the changes (possibly because the developer is unaware of the related cloned code), the system might behave incorrectly. A delay in propagating a change is referred to as 'late propagation,' and a number of studies have investigated this phenomenon. However, these studies did not investigate the intensity of late propagation nor how late propagation differs by clone type. In this research, we investigate late propagation separately for each of the three clone types (Type 1, Type 2, and Type 3). According to our experimental results on thousands of revisions of eight diverse subject systems written in two programming languages, late propagation occurs more frequently in Type 3 clones compared with the other two clone types. More importantly, there is a higher probability that Type 3 clones will experience buggy late propagations compared with the other two clone types. Also, we discovered that block clones are more involved in late propagation than method clones. Refactoring and tracking of Similarity Preserving Change Pattern (SPCP) clones (i.e., the clone fragments that evolve following a SPCP) can help us minimize the occurrences of late propagation in clones.",Code clones; Late propagation; Clone genealogy; Near-miss clones,NICAD,Code clones;Late propagation;Clone genealogy;Near-miss clones;NICAD,mshankar.mondal@usask.ca; chanchal.roy@usask.ca; kevin.schneider@usask.ca,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",,,,SPRINGER,0963-9314,,,,English,SOFTWARE QUAL J,Article,WoS,Computer Science,WOS:000388954000003,2-s2.0-84955299585,Canada,usask.ca,Univ Saskatchewan,"Univ Saskatchewan, Canada","Mondal, Manishankar; Roy, Chanchal K.; Schneider, Kevin A."
"Chen, T., He, C.W.",A Comparison of Approaches to Legacy System Crosscutting Concerns Mining,2013,2013 INTERNATIONAL CONFERENCE ON COMPUTER SCIENCES AND APPLICATIONS (CSA),,,,813,816,4,0,10.1109/CSA.2013.194,,"[Chen, Tong; He, Chengwan] Wuhan Inst Technol, Sch Comp Sci & Engn, Hubei Prov Key Lab Intelligent Robot, Wuhan, Peoples R China",,"Mining of crosscutting concerns is a process that crosscutting concerns are automated identified from code of legacy system. The mining of crosscutting concerns provides the possibility for aspect-oriented refactoring of legacy system. This paper compares and analyzes existing crosscutting concerns mining approaches by four aspects: dynamics, mining ranges, mining principle and mining level, and puts forward some future research directions.",Legacy system; aspect oriented programming; crosscutting concerns; crosscutting concerns mining,,Legacy system;aspect oriented programming;crosscutting concerns;crosscutting concerns mining,Chentong9019@163.com; hechengwan@hotmail.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Computer Sciences and Applications (CSA),"Hubei Univ Technol, Wuhan, PEOPLES R CHINA","DEC 14-15, 2013",IEEE,,978-0-7695-5125-8,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000357013800187,,China,163.com,Wuhan Inst Technol,"Wuhan Inst Technol, China","Chen, Tong; He, Chengwan"
"Ragkhitwetsagul, C., Krinke, J., Clark, D.",A comparison of code similarity analysers,2018,EMPIRICAL SOFTWARE ENGINEERING,23,4,,2464,2519,56,7,10.1007/s10664-017-9564-7,,"[Ragkhitwetsagul, Chaiyong; Krinke, Jens; Clark, David] UCL, Dept Comp Sci, Ctr Res Evolut Search & Testing, Gower St, London WC1E 6BT, England",,"Copying and pasting of source code is a common activity in software engineering. Often, the code is not copied as it is and it may be modified for various purposes; e.g. refactoring, bug fixing, or even software plagiarism. These code modifications could affect the performance of code similarity analysers including code clone and plagiarism detectors to some certain degree. We are interested in two types of code modification in this study: pervasive modifications, i.e. transformations that may have a global effect, and local modifications, i.e. code changes that are contained in a single method or code block. We evaluate 30 code similarity detection techniques and tools using five experimental scenarios for Java source code. These are (1) pervasively modified code, created with tools for source code and bytecode obfuscation, and boiler-plate code, (2) source code normalisation through compilation and decompilation using different decompilers, (3) reuse of optimal configurations over different data sets, (4) tool evaluation using ranked-based measures, and (5) local + global code modifications. Our experimental results show that in the presence of pervasive modifications, some of the general textual similarity measures can offer similar performance to specialised code similarity tools, whilst in the presence of boiler-plate code, highly specialised source code similarity detection techniques and tools outperform textual similarity measures. Our study strongly validates the use of compilation/decompilation as a normalisation technique. Its use reduced false classifications to zero for three of the tools. Moreover, we demonstrate that optimal configurations are very sensitive to a specific data set. After directly applying optimal configurations derived from one data set to another, the tools perform poorly on the new data set. The code similarity analysers are thoroughly evaluated not only based on several well-known pair-based and query-based error measures but also on each specific type of pervasive code modification. This broad, thorough study is the largest in existence and potentially an invaluable guide for future users of similarity detection in source code.",Empirical study; Code similarity measurement; Clone detection; Plagiarism detection; Parameter optimisation,CLONE DETECTION; PROGRAM SIMILARITY; PLAGIARISM; OBFUSCATION; DECOMPILATION; HARMFUL; SYSTEM,Empirical study;Code similarity measurement;Clone detection;Plagiarism detection;Parameter optimisation;PROGRAM SIMILARITY;PLAGIARISM;OBFUSCATION;DECOMPILATION;HARMFUL;SYSTEM,chaiyong.ragkhitwetsagul.14@ucl.ac.uk; j.krinke@ucl.ac.uk; david.clark@ucl.ac.uk,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",,,,SPRINGER,1382-3256,,,,English,EMPIR SOFTW ENG,Article,WoS,Computer Science,WOS:000435804100020,2-s2.0-85032177107,United Kingdom,ucl.ac.uk,UCL,"UCL, United Kingdom","Ragkhitwetsagul, Chaiyong; Krinke, Jens; Clark, David"
"Erturk, E., Sezer, E.A.",A comparison of some soft computing methods for software fault prediction,2015,EXPERT SYSTEMS WITH APPLICATIONS,42,4,,1872,1879,8,40,10.1016/j.eswa.2014.10.025,,"[Erturk, Ezgi] Sci & Technol Res Council Turkey TUBITAK, Software Technol Res Inst, Ankara, Turkey; [Sezer, Ebru Akcapinar] Hacettepe Univ, Dept Comp Engn, TR-06800 Ankara, Turkey",,"The main expectation from reliable software is the minimization of the number of failures that occur when the program runs. Determining whether software modules are prone to fault is important because doing so assists in identifying modules that require refactoring or detailed testing. Software fault prediction is a discipline that predicts the fault proneness of future modules by using essential prediction metrics and historical fault data. This study presents the first application of the Adaptive Neuro Fuzzy Inference System (ANFIS) for the software fault prediction problem. Moreover, Artificial Neural Network (ANN) and Support Vector Machine (SVM) methods, which were experienced previously, are built to discuss the performance of ANFIS. Data used in this study are collected from the PROMISE Software Engineering Repository, and McCabe metrics are selected because they comprehensively address the programming effort. ROC-AUC is used as a performance measure. The results achieved were 0.7795, 0.8685, and 0.8573 for the SVM, ANN and ANFIS methods, respectively. (C) 2014 Elsevier Ltd. All rights reserved.",Software fault prediction; McCabe metrics; Adaptive neuro fuzzy systems; Artificial Neural Networks; Support Vector Machines,FUZZY INFERENCE SYSTEM; NEURAL-NETWORK; METRICS; ATTRIBUTES; STRATEGIES; ANFIS,Software fault prediction;McCabe metrics;Adaptive neuro fuzzy systems;Artificial Neural Networks;Support Vector Machines;FUZZY INFERENCE SYSTEM;NEURAL-NETWORK;METRICS;ATTRIBUTES;STRATEGIES;ANFIS,erturkezgi@gmail.com; ebruakcapinarsezer@gmail.com,,"THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, ENGLAND",,,,PERGAMON-ELSEVIER SCIENCE LTD,0957-4174,,,,English,EXPERT SYST APPL,Article,WoS,Computer Science; Engineering; Operations Research & Management Science,WOS:000347579500010,2-s2.0-84969780549,Turkey,gmail.com,Sci & Technol Res Council Turkey TUBITAK;Hacettepe Univ,"Sci & Technol Res Council Turkey TUBITAK, Turkey;Hacettepe Univ, Turkey","Erturk, Ezgi; Sezer, Ebru Akcapinar"
"Spacek P., Dony C., Tibermacine C.",A component-based meta-level architecture and prototypical implementation of a reflective component-based programming and modeling language,2014,CBSE 2014 - Proceedings of the 17th International ACM SIGSOFT Symposium on Component-Based Software Engineering (Part of CompArch 2014),,,,13,22,,2,10.1145/2602458.2602476,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904490675&doi=10.1145%2f2602458.2602476&partnerID=40&md5=554a9df54ce2781964075d754ab4988f,"LIRMM, CNRS and Montpellier II University, 161, rue Ada, 34392 Montpellier Cedex 5, France; Faculty of Information Technology, Czech Technical University in Prague, Thakurova 9, 16000 Prague 6, Czech Republic","Spacek, P., LIRMM, CNRS and Montpellier II University, 161, rue Ada, 34392 Montpellier Cedex 5, France, Faculty of Information Technology, Czech Technical University in Prague, Thakurova 9, 16000 Prague 6, Czech Republic; Dony, C., LIRMM, CNRS and Montpellier II University, 161, rue Ada, 34392 Montpellier Cedex 5, France; Tibermacine, C., LIRMM, CNRS and Montpellier II University, 161, rue Ada, 34392 Montpellier Cedex 5, France","Component-based Software Engineering studies the design, development and maintenance of software constructed upon sets of connected components. Using existing standard solutions, component-based models are frequently transformed into non-component-based programs, most of the time object-oriented, for run-time execution. As a consequence many component-level descriptions (part of code), e.g. explicit architectures or ports declarations, vanish at the implementation stage, making debugging, transformations or reverse-engineering difficult. It has been shown that component-based programming languages contribute to bridge this gap between design and implementation and to provide a conceptual and practical continuum to fully develop applications with components. In this paper we go one step further in this direction by making a componentoriented programming and modeling language truly reective, thus making verification, evolution or transformation stages of software development part of this new continuum. The gained reection capabilities indeed make it possible to perform architecture checking, code refactoring, model transformations or even to implement new languages constructs with and for components. The paper presents an original executable meta-level architecture achieving the vision that""everything is a component"" and an operational implementation demonstrating its feasibility and effectiveness. Our system revisits some standard solutions for reification in the component's context and also handles new cases, such as ports reification, to allow for runtime introspection and intercession on components and on their descriptors. We validate these ideas in the context of an executable prototypical and minimal component-based language, named Compo, whose first goal is to help imagining the future. Copyright © 2014 ACM.",,Computer simulation languages; Model checking; Software engineering; Component-based language; Component-based programming; Component-based programming language; Component-based software engineering; Component-oriented programming; Design and implementations; Meta-level architectures; Prototypical implementation; Bridges,Computer simulation languages;Model checking;Software engineering;Component-based language;Component-based programming;Component-based programming language;Component-based software engineering;Component-oriented programming;Design and implementations;Meta-level architectures;Prototypical implementation;Bridges,,,,,,,Association for Computing Machinery,,9781450325776,,,English,CBSE - Proc. Int. ACM SIGSOFT Symp. Compon.-Based Softw. Eng. (Part CompArch),Conference Paper,Scopus,,2-s2.0-84904490675,,France;Czech Republic,No email,,,"Spacek P., Dony C., Tibermacine C."
"Kim I.G., Bae D.H., Hong J.E.","A component composition model providing dynamic, flexible, and hierarchical composition of components for supporting software evolution",2007,Journal of Systems and Software,80,11,,1797,1816,,17,10.1016/j.jss.2007.02.047,https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548642370&doi=10.1016%2fj.jss.2007.02.047&partnerID=40&md5=4a74a2b25e13d48dace2ef14f42305d4,"Department of Electrical Engineering and Computer Science, KAIST, 373-1, Guseong-dong, Yuseong-gu, Daejon, 305-701, South Korea; School of Electrical and Computer Engineering, CBNU, 12, Gaeshin-dong, Heungduk-gu, Cheongju, 361-763, South Korea","Kim, I.-G., Department of Electrical Engineering and Computer Science, KAIST, 373-1, Guseong-dong, Yuseong-gu, Daejon, 305-701, South Korea; Bae, D.-H., Department of Electrical Engineering and Computer Science, KAIST, 373-1, Guseong-dong, Yuseong-gu, Daejon, 305-701, South Korea; Hong, J.-E., School of Electrical and Computer Engineering, CBNU, 12, Gaeshin-dong, Heungduk-gu, Cheongju, 361-763, South Korea","Component composition is one of the practical and effective approaches for supporting software evolution. However, existing component composition techniques need to be complemented by advanced features which address various sophisticated composition issues. In this paper, we introduce a set of features that supports and manages dynamic as well as flexible composition of components in a controlled way. We also propose a component composition model that supports these features. The proposed model enables dynamic, flexible, and hierarchical composition of components by providing and manipulating dedicated composition information, which in turn increases reusability of components and capabilities for supporting software evolution. To show the benefits of our model concretely, we provide a Hotel Reservation System case study. The experimental results show that our model supports software evolution effectively and provides efficient and modular structures, refactoring, and collaboration-level extensions as well. © 2007 Elsevier Inc. All rights reserved.",Component composition model; Component reuse; Software composition technique; Software evolution,Computer aided software engineering; Computer supported cooperative work; Hierarchical systems; Mathematical models; Software packages; Component composition models; Component reuse; Software composition techniques; Software evolution; Computer software reusability,Component composition model;Component reuse;Software composition technique;Software evolution;Computer aided software engineering;Computer supported cooperative work;Hierarchical systems;Mathematical models;Software packages;Component composition models;Software composition techniques;Computer software reusability,"Kim, I.-G.; Department of Electrical Engineering and Computer Science, KAIST, 373-1, Guseong-dong, Yuseong-gu, Daejon, 305-701, South Korea; email: igkim@se.kaist.ac.kr",,,,,,,01641212,,JSSOD,,English,J Syst Software,Article,Scopus,,2-s2.0-34548642370,,South Korea,se.kaist.ac.kr,,,"Kim I.-G., Bae D.-H., Hong J.-E."
"Schafer, M., Thies, A., Steimann, F., Tip, F.",A Comprehensive Approach to Naming and Accessibility in Refactoring Java Programs,2012,IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,38,6,,1233,1257,25,13,10.1109/TSE.2012.13,,"[Schaefer, Max] IBM TJ Watson Res Ctr, Hawthorne, NY 10532 USA; [Thies, Andreas; Steimann, Friedrich] Fernuniv, D-58097 Hagen, Germany; [Tip, Frank] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada",,"Automated tool support for refactoring is now widely available for mainstream programming languages such as Java. However, current refactoring tools are still quite fragile in practice and often fail to preserve program behavior or compilability. This is mainly because analyzing and transforming source code requires consideration of many language features that complicate program analysis, in particular intricate name lookup and access control rules. This paper introduces J(L), a lookup-free, access control-free representation of Java programs. We present algorithms for translating Java programs into J(L) and vice versa, thereby making it possible to formulate refactorings entirely at the level of J(L) and to rely on the translations to take care of naming and accessibility issues. We demonstrate how complex refactorings become more robust and powerful when lifted to J(L). Our approach has been implemented using the JastAddJ compiler framework, and evaluated by systematically performing two commonly used refactorings on an extensive suite of real-world Java applications. The evaluation shows that our tool correctly handles many cases where current refactoring tools fail to handle the complex rules for name binding and accessibility in Java.",Restructuring; reverse engineering; and reengineering; object-oriented languages; Java,JASTADD; COMPILER,Restructuring;reverse engineering;and reengineering;object-oriented languages;Java;JASTADD;COMPILER,mschaefer@us.ibm.com; andreas.thies@fernuni-hagen.de; steimann@acm.org; ftip@uwaterloo.ca,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0098-5589,,,,English,IEEE T SOFTWARE ENG,Article,WoS,Computer Science; Engineering,WOS:000311556100001,2-s2.0-84870485197,United States;Germany;Canada,us.ibm.com,IBM TJ Watson Res Ctr;Fernuniv;Univ Waterloo,"IBM TJ Watson Res Ctr, United States;Fernuniv, Germany;Univ Waterloo, Canada","Schaefer, Max; Thies, Andreas; Steimann, Friedrich; Tip, Frank"
"Foetsch, D., Pulvermueller, E.",A concept and implementation of higher-level XML transformation languages,2009,KNOWLEDGE-BASED SYSTEMS,22,3,,186,194,9,8,10.1016/j.knosys.2008.11.003,,"[Pulvermueller, Elke] Univ Osnabruck, Dept Math & Comp Sci, D-49069 Osnabruck, Germany; [Foetsch, Daniel] Univ Kiel, Dept Comp Sci, D-24098 Kiel, Germany",,"In the software development (e.g. with product lines or refactoring) transformations play an increasing role. To ease and automate these transformations, we propose a solution based on the operator hierarchy concept. it allows to define transformation operator hierarchies containing different levels of transformation operators. The operators capture reusable knowledge units. The concrete realization of such a higher-level transformation language construction is demonstrated by an application of the XML operator hierarchy concept to the transformation language XSLT. XSLT serves as an example which is employed to provide the elementary transformation operators. On top of these elementary operators the layered concept allows the definition of new higher-level operators, e.g. domain-independent and domain-specific ones. In an application example the construction of the higher-level language XML2DSV is presented. This is a stand-alone domain-specific transformation language, which can be used to create delimiter-separated values (DSV) files from XML documents, on the base of XSLT. We developed XTC (XML Transformation Coordinator) to automate the multi-level transformation process. (C) 2008 Elsevier B.V. All rights reserved.",Software generation and transformation; Higher-level transformation operators; Operator hierarchy concept; Transformation language; XML; XSLT,,Software generation and transformation;Higher-level transformation operators;Operator hierarchy concept;Transformation language;XML;XSLT,elke.pulvermueller@informatik.uni-osnabrueck.de,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS","6th International Conference on Software Methodologies, Tools and Techniques (SoMeT 2007)","Rome, ITALY","NOV 07-09, 2007",ELSEVIER SCIENCE BV,0950-7051,,,,English,KNOWL-BASED SYST,Article; Proceedings Paper,WoS,Computer Science,WOS:000264818000006,2-s2.0-60949104295,Germany,informatik.uni-osnabrueck.de,Univ Osnabruck;Univ Kiel,"Univ Osnabruck, Germany;Univ Kiel, Germany","Foetsch, Daniel; Pulvermueller, Elke"
"Ghofrani, J., Mohseni, M., Bozorgmehr, A.",A Conceptual Framework for Clone Detection using Machine Learning,2017,2017 IEEE 4TH INTERNATIONAL CONFERENCE ON KNOWLEDGE-BASED ENGINEERING AND INNOVATION (KBEI),,,,810,817,8,1,,,"[Ghofrani, Javad] Leibniz Univ Hannover, Software Engn Grp, Hannover, Germany; [Mohseni, Mandi] Univ Tehran, Tehran, Iran; [Bozorgmehr, Arezoo] DZHW, Hannover, Germany",,"Code clones can happen in any software project. One of the challenges is that, code clones come in various forms which makes them hard to detect using standard templates. Due to this variety in structure and form of semantically similar clones, machine learning techniques are required to detect them. Recently in many domains, e.g., natural language processing, deep neural networks drew a lot of attention due to their accuracy. In this paper, we exploit the results of some convolutional neural networks for code summarization to find the code clones. We use the generated descriptions for two code snippets as a metric to measure the similarities between them. We propose a vector similarity measure to calculate a similarity indicator between these measures which can decide which code snippets are clones.",Clone detection; Convolutional attention neural networks; summarization; refactoring; extractive software product lines; reusability,,Clone detection;Convolutional attention neural networks;summarization;refactoring;extractive software product lines;reusability,javad.ghofrani@inf.uni-hannover.de; mandi.mohseni@ut.ac.ir; bozorgmehr@dzhw.eu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 4th International Conference on Knowledge-Based Engineering and Innovation (KBEI),"Iran Univ Sci & Technol, Tehran, IRAN","DEC 22, 2017",IEEE,,978-1-5386-2640-5,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000435249700140,2-s2.0-85049220022,Germany;Iran,inf.uni-hannover.de,Leibniz Univ Hannover;Univ Tehran;DZHW,"Leibniz Univ Hannover, Germany;Univ Tehran, Iran;DZHW, Germany","Ghofrani, Javad; Mohseni, Mandi; Bozorgmehr, Arezoo"
"Sagardui, G., Etxeberria, L., Agirre, J.A., Arrieta, A., Nicolas, C.F., Martin, J.M.",A Configurable Validation Environment for Refactored Embedded Software: an Application to the Vertical Transport Domain,2017,2017 IEEE 28TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING WORKSHOPS (ISSREW 2017),,,,16,19,4,1,10.1109/ISSREW.2017.9,,"[Sagardui, Goiuria; Etxeberria, Leire; Agirre, Joseba A.; Arrieta, Aitor] Mondragon Unibertsitatea, Arrasate Mondragon, Spain; [Fernando Nicolas, Carlos] IK4 Ikerlan, Arrasate Mondragon, Spain; [Maria Martin, Jose] Orona EIC, Hernani, Spain",,"As systems evolve, their embedded software needs constantly to be refactored. Moreover, given the different needs of different customers, embedded systems require to be customizable. The variability of these systems is large, and requires automated testing solutions. In this paper we propose a methodology that automatically generates validation environments for highly configurable embedded software that is being refactored. The method has allowed for systematically testing a real-world industrial case study involving the software in charge of controlling the doors of an elevator. Finally, we extract the lessons learned from its application.",,,,gsagardui@mondragon.edu; letxberria@mondragon.edu; jaagirre@mondragon.edu; aarrieta@mondragon.edu; cfnicolas@ikerlan.es; jmmartinc@orona-group.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",28th IEEE International Symposium on Software Reliability Engineering,"Toulouse, FRANCE","OCT 23-26, 2017",IEEE,2375-821X,978-1-5386-2387-9,,,English,IEEE INT SYMP SOFTW,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000418465000006,,Spain,mondragon.edu,Mondragon Unibertsitatea;IK4 Ikerlan;Orona EIC,"Mondragon Unibertsitatea, Spain;IK4 Ikerlan, Spain;Orona EIC, Spain","Sagardui, Goiuria; Etxeberria, Leire; Agirre, Joseba A.; Arrieta, Aitor; Fernando Nicolas, Carlos; Maria Martin, Jose"
"Zibran, M.F., Roy, C.K.",A Constraint Programming Approach to Conflict-aware Optimal Scheduling of Prioritized Code Clone Refactoring,2011,11TH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION (SCAM 2011),,,,105,114,10,23,10.1109/SCAM.2011.21,,"[Zibran, Minhaz F.; Roy, Chanchal K.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 5C9, Canada",,"Duplicated code, also known as code clones, are one of the malicious 'code smells' that often need to be removed through refactoring for enhancing maintainability. Among all the potential refactoring opportunities, the choice and order of a set of refactoring activities may have distinguishable effect on the design/code quality. Moreover, there may be dependencies and conflicts among those refactorings. The organization may also impose priorities on certain refactoring activities. Addressing all these conflicts, priorities, and dependencies, manual formulation of an optimal refactoring schedule is very expensive, if not impossible. Therefore, an automated refactoring scheduler is necessary, which will maximize benefit and minimize refactoring effort. In this paper, we present a refactoring effort model, and propose a constraint programming approach for conflict-aware optimal scheduling of code clone refactoring.",,,,minhaz.zibran@usask.ca; chanchal.roy@usask.ca,"Beszedes, A; Lawrie, D","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",11th IEEE International Working Conference on Source Code Analysis and Manipulation/IEEE International Conference on Software Maintenance/IEEE International Symposium on Web Systems Evolution/VISSOFT/MESOCA,"Williamsburg, VA","SEP 25-26, 2011",IEEE COMPUTER SOC,1942-5430,978-0-7695-4347-5,,,English,IEEE INT WORK C SO,Proceedings Paper,WoS,Computer Science,WOS:000299279600012,2-s2.0-82055196656,Canada,usask.ca,Univ Saskatchewan,"Univ Saskatchewan, Canada","Zibran, Minhaz F.; Roy, Chanchal K."
"Kessentini M., Dea T.J., Ouni A.",A context-based refactoring recommendation approach using simulated annealing: Two industrial case studies,2017,GECCO 2017 - Proceedings of the 2017 Genetic and Evolutionary Computation Conference,,,,1303,1310,,3,10.1145/3071178.307l334,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026351243&doi=10.1145%2f3071178.307l334&partnerID=40&md5=3458c60e5e1a0a43e349c157625be54a,"CIS Department, University of Michigan, Dearborn, MI, United States; College of Information Technology, UAE University, Al Ain, United Arab Emirates","Kessentini, M., CIS Department, University of Michigan, Dearborn, MI, United States, College of Information Technology, UAE University, Al Ain, United Arab Emirates; Dea, T.J., CIS Department, University of Michigan, Dearborn, MI, United States, College of Information Technology, UAE University, Al Ain, United Arab Emirates; Ouni, A., CIS Department, University of Michigan, Dearborn, MI, United States, College of Information Technology, UAE University, Al Ain, United Arab Emirates","Refactoring is a highly valuable solution to reduce and manage the growing complexity of software systems. However, programmers are ""opportunistic"" when they apply refactorings since most of them are interested in improving the quality of the code fragments that they frequently update or those related to the planned activities for the next release (fixing bugs, adding new functionalities, etc.). In this paper, we describe a search based approach to recommend refactorings based on the analysis of the history of changes to maximize the recommended refactorings for recently modified classes, classes containing incomplete refactorings detected in previous releases, and buggy classes identified in the history of previous bug reports. The obtained results on two industrial projects show significant improvements of the relevance of recommended refactorings, as evaluated by the original developers of the systems. © 2017 ACM.",Refactoring; Search based software engineering; Software quality,Computer software selection and evaluation; Software engineering; Code fragments; Context-based; Industrial case study; Industrial projects; Refactorings; Search-based software engineering; Software Quality; Software systems; Simulated annealing,Refactoring;Search based software engineering;Software quality;Computer software selection and evaluation;Software engineering;Code fragments;Context-based;Industrial case study;Industrial projects;Refactorings;Search-based software engineering;Software systems;Simulated annealing,,,,,,,"Association for Computing Machinery, Inc",,9781450349208,,,English,GECCO - Proc. Genet. Evol. Comput. Conf.,Conference Paper,Scopus,,2-s2.0-85026351243,,United States;United Arab Emirates,No email,,,"Kessentini M., Dea T.J., Ouni A."
"Pascua, S.M.","A Control Structure - Token Based Metric for Software Functional Cohesion, Entropy and Re-Engineering",2016,"2016 7TH INTERNATIONAL CONFERENCE ON INFORMATION, INTELLIGENCE, SYSTEMS & APPLICATIONS (IISA)",,,,,,8,0,,,"[Pascua, Sonia M.] Univ Philippines Diliman, Sch Lib & Informat Studies, Dept Comp Sci, Quezon City, Philippines",,"This Building a metric to quantify software entropy (disorderliness) in terms of measuring control structure to token module cohesion is the goal of this study. Categorized under the field of software engineering and falls under software configuration management which concentrates to tasks of tracking and controlling changes in the software, this research proposes an algorithm that predicts the degree of the module togetherness and the need for element separation while changes in Lines-Of-Codes (LOC) happen. Thus cohesion when measured becomes a good tool that aids in the decision for codes re-engineering, refactoring and / or migration. Finally this research performed a theoretical application on standard control and / or conditional statements.",software engineering; software entropy; cohesion; functional cohesion,DESIGN,software engineering;software entropy;cohesion;functional cohesion;DESIGN,smpascua@up.edu.ph,,"345 E 47TH ST, NEW YORK, NY 10017 USA","7th International Conference on Information, Intelligence, Systems & Applications (IISA)","Chalkidiki, GREECE","JUL 13-15, 2016",IEEE,2379-3732,978-1-5090-3429-1,,,English,INT CONF INFORM INTE,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000392155300077,2-s2.0-85013157823,Philippines,up.edu.ph,Univ Philippines Diliman,"Univ Philippines Diliman, Philippines","Pascua, Sonia M."
"Czabacski W., Bruntink M., Martin P.",Actionable measurements – Improving the actionability of architecture level software quality violations,2018,CEUR Workshop Proceedings,2361,,,,,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85065758538&partnerID=40&md5=7ed349822cd23cc272a17525fb07c058,"Institute for Informatics University of Amsterdam, Amsterdam, Netherlands; Software Improvement Group, Amsterdam, Netherlands","Czabaćski, W., Institute for Informatics University of Amsterdam, Amsterdam, Netherlands; Bruntink, M., Software Improvement Group, Amsterdam, Netherlands; Martin, P., Institute for Informatics University of Amsterdam, Amsterdam, Netherlands","When system components become more coupled over time, more effort must be dedicated to software architecture refactoring. Tightly coupled components present higher risk—they make the system more difficult to understand, test and modify. In order to allocate the refactoring effort effectively, it is crucial to identify how severely components are coupled and which areas of the system involve the most risk to modify. In this paper we apply the concept of architecture hotspots together with the Software Improvement Group Maintainability Model to identify violations in architecture design. We propose a prototype tool that can identify and present architecture smells to developers as refactoring recommendations. We then apply the tool to open-source projects, validating our approach through interviews with developers. Developers found the hotspots comprehensible and relevant, but there is room for improvement with regards to actionability. © 2018 CEUR-WS. All rights reserved.",,Closed loop control systems; Computer software selection and evaluation; Actionability; Architecture designs; Maintainability modeling; Open source projects; Prototype tools; Software Quality; System components; Tightly-coupled; Open source software,Closed loop control systems;Computer software selection and evaluation;Actionability;Architecture designs;Maintainability modeling;Open source projects;Prototype tools;Software Quality;System components;Tightly-coupled;Open source software,,Hejderup J.Gousios G.,,,,,CEUR-WS,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-85065758538,,Netherlands,No email,,,"Czabacski W., Bruntink M., Martin P."
"Dos Santos, P.S.M., Travassos, G.H.",Action Research Can Swing the Balance in Experimental Software Engineering,2011,"ADVANCES IN COMPUTERS, VOL 83",83,,,205,276,72,7,10.1016/B978-0-12-385510-7.00005-9,,"[Medeiros Dos Santos, Paulo Sergio; Travassos, Guilherme Horta] Univ Fed Rio de Janeiro, COPPE, Syst Engn & Comp Sci Dept, BR-21945 Rio De Janeiro, Brazil",,"In general, professionals still ignore scientific evidence in place of expert opinions in most of their decision making. For this reason, it is still common to see the adoption of new software technologies in the field without any scientific basis or well-grounded criteria, but on the opinions of experts. Experimental Software Engineering is of paramount importance to provide the foundations to understand the limits and applicability of software technologies. The need to better observe and understand the practice of Software Engineering leads us to look for alternative experimental approaches to support our studies. Different research strategies can be used to explore different Software Engineering practices. Action Research can be seen as one alternative to intensify the conducting of important experimental studies with results of great value while investigating the Software Engineering practices in depth. In this chapter, a discussion on the use of Action Research in Software Engineering is presented. As indicated by a technical literature survey, along the years a growing tendency for addressing different research topics in Software Engineering through Action Research studies has been seen. This behavior can indicate the great potential of its applicability in our scientific field. Despite their clear benefits and diversity of application, the initial findings also revealed that the rigor and control of such studies should improve in Software Engineering. Aiming at better explaining the application of Action Research, an experimental study (in vivo) on the investigation of the subjective decisions of software developers, concerned with the refactoring of source code to improve source code quality in a distributed software development context is depicted. A Software Engineering theory regarding refactoring and some guidance on how to accomplish an Action Research study in Software Engineering supplement the discussions in this chapter.",,QUALITATIVE RESEARCH; KNOWLEDGE; PARADIGM; SYSTEMS,QUALITATIVE RESEARCH;KNOWLEDGE;PARADIGM;SYSTEMS,pasemes@cos.ufrj.br; ght@cos.ufrj.br,"Zelkowitz, MV","525 B STREET, SUITE 1900, SAN DIEGO, CA 92101-4495 USA",,,,ELSEVIER ACADEMIC PRESS INC,0065-2458,978-0-12-385510-7,,,English,ADV COMPUT,Article; Book Chapter,WoS,Computer Science,WOS:000291320500005,,Brazil,cos.ufrj.br,Univ Fed Rio de Janeiro,"Univ Fed Rio de Janeiro, Brazil","Medeiros Dos Santos, Paulo Sergio; Travassos, Guilherme Horta"
"Bastide, G., Seriai, A., Oussalah, M.",Adaptation of monolithic software components by their transformation into composite configurations based on refactoring,2006,"COMPONENT-BASED SOFTWARE ENGINEERING, PROCEEDINGS",4063,,,368,375,8,0,,,"Ecole Mines Douai, F-59508 Douai, France; Univ Nantes, LINA, F-44322 Nantes, France",,"We present in this paper an approach aiming at adapting component structures instead of adapting component services. It focuses on transforming a software component from a monolithic configuration to a composite one. Among the motivations of this kind of adaptation, we note its possible application to permit flexible deployment of software components and flexible loading of component service-code according to the available resources (CPU, memory). This adaptation is based on the analysis and the instrumentation of component codes.",software component; adaptation; restructuration; composite-component; refactoring,,software component;adaptation;restructuration;composite-component;refactoring,bastide@ensm-douai.fr; seriai@ensm-douai.fr; oussalah@lina.univ-nantes.fr,"Gorton, I; Heineman, GT; Crnkovic, I; Schmidt, HW; Stafford, JA; Szyperski, CA; Wallnau, K","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",9th International Symposium on Component-Based Software Engineering,"Vasteras, SWEDEN","JUN 29-JUL 01, 2006",SPRINGER-VERLAG BERLIN,0302-9743,3-540-35628-2,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000239520500029,2-s2.0-33746469542,France,ensm-douai.fr,F-59508 Douai;LINA,"F-59508 Douai, France;LINA, France","Bastide, Gautier; Seriai, Abdelhak; Oussalah, Mourad"
"Arnaoudova V., Constantinides C.",Adaptation of refactoring strategies to multiple axes of modularity: Characteristics and criteria,2008,"Proceedings - 6th ACIS International Conference on Software Engineering Research, Management and Applications, SERA 2008",,, 4609416,105,114,,0,10.1109/SERA.2008.38,https://www.scopus.com/inward/record.uri?eid=2-s2.0-53149115648&doi=10.1109%2fSERA.2008.38&partnerID=40&md5=c7e015f7045082b1ca2bf572702bf087,"Department of Computer Science and Software Engineering, Concordia University, 1455 De Maisonneuve Blvd. Ouest, Montréal, QC H3G 1M8, Canada","Arnaoudova, V., Department of Computer Science and Software Engineering, Concordia University, 1455 De Maisonneuve Blvd. Ouest, Montréal, QC H3G 1M8, Canada; Constantinides, C., Department of Computer Science and Software Engineering, Concordia University, 1455 De Maisonneuve Blvd. Ouest, Montréal, QC H3G 1M8, Canada","In object-oriented programming, the adoption of modules as mixins provides a second axis of modularity. Furthermore, support for aspect-oriented programming introduces a third such axis. In this paper we define criteria under which a feature should be placed in a given unit of modularity and investigate the degree to which the presence of multiple dimensions of modularity affects existing refactoring strategies. We reason about the dilemmas involved and we provide guidelines for applying existing refactoring strategies in order to support the above criteria. We adopt Ruby and Aquarium as example technologies in order to provide an environment with classes, modules and aspects. © 2008 IEEE.",,Corundum; Object oriented programming; Software engineering; Aspect-oriented programming; International conferences; Multiple dimensions; Object-oriented; Refactoring; Software engineering research; Engineering research,Corundum;Object oriented programming;Software engineering;Aspect-oriented programming;International conferences;Multiple dimensions;Object-oriented;Refactoring;Software engineering research;Engineering research,"Arnaoudova, V.; Department of Computer Science and Software Engineering, Concordia University, 1455 De Maisonneuve Blvd. Ouest, Montréal, QC H3G 1M8, Canada; email: v_arnaou@cse.concordia.ca",,,,,,,,9780769533025,,,English,"Proc. - ACIS Int. Conf. Softw. Eng. Res., Manage. Appl., SERA",Conference Paper,Scopus,,2-s2.0-53149115648,,Canada,cse.concordia.ca,,,"Arnaoudova V., Constantinides C."
"Lanc I., Bui P., Thain D., Emrich S.",Adapting bioinformatics applications for heterogeneous systems: A case study,2011,ECMLS'11 - Proceedings of the 2nd International Workshop on Emerging Computational Methods for the Life Sciences,,,,7,13,,5,10.1145/1996023.1996025,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960963025&doi=10.1145%2f1996023.1996025&partnerID=40&md5=cbd45cf4a2094fc57d3537795086b143,"University of Notre Dame, Notre Dame, IN, United States","Lanc, I., University of Notre Dame, Notre Dame, IN, United States; Bui, P., University of Notre Dame, Notre Dame, IN, United States; Thain, D., University of Notre Dame, Notre Dame, IN, United States; Emrich, S., University of Notre Dame, Notre Dame, IN, United States","The advent of new sequencing technologies has generated extremely large amounts of information. To successfully apply bioinformatics tools to such large datasets, they need to exhibit scalability and ideally elasticity in diverse computing environments. We describe the application of Weaver to the PEMer structural variation detection workflow. Because the original workflow has an intractable sequential running time on large datasets, it also has a batch implementation designed for a shared file system. Using scripts provided by the developers of PEMer, along with the Weaver Python module, the Starch archive generator, and the Makeflow workflow engine, we have refactored PEMer for elastic scaling on personal clouds. Our case study describes the various challenges faced when constructing such a workflow, from dealing with failure detection, to managing dependencies, to handling the quirks of the underlying operating systems. The practice of scaling bioinformatics tools is increasingly commonplace. As such, the hands-on application of refactoring techniques to PEMer can serve as a valuable guide for those looking to reconfigure other bioinformatics software. Significantly, our customized Makeflow framework enabled elastic deployment on a wider variety of systems while substantially reducing wall clock runtimes using hundreds of cores. © Copyright 2011 ACM.",Bioinformatics; Distributed systems,Bioinformatics applications; Bioinformatics software; Bioinformatics tools; Computing environments; Distributed systems; Elastic deployment; Failure detection; File systems; Heterogeneous systems; Large datasets; Refactorings; Running time; Runtimes; Structural variations; Workflow engines; Computational methods; Elasticity; Bioinformatics,Bioinformatics;Distributed systems;Bioinformatics applications;Bioinformatics software;Bioinformatics tools;Computing environments;Elastic deployment;Failure detection;File systems;Heterogeneous systems;Large datasets;Refactorings;Running time;Runtimes;Structural variations;Workflow engines;Computational methods;Elasticity,"Emrich, S.; University of Notre Dame, Notre Dame, IN, United States; email: semrich@nd.edu",,,,,,,,9781450307024,,,English,ECMLS - Proc. Int. Workshop Emerg. Comput. Methods Life Sci.,Conference Paper,Scopus,,2-s2.0-79960963025,,United States,nd.edu,,,"Lanc I., Bui P., Thain D., Emrich S."
"Gradisnik, M., Beranic, T., Karakatic, S., Mausa, G.",Adapting God Class thresholds for software defect prediction: A case study,2019,"2019 42ND INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO)",,,,1537,1542,6,0,,,"[Gradisnik, Mitja; Beranic, Tina; Karakatic, Saso] Univ Maribor, Fac Elect Engn & Comp Sci, Koroska Cesta 46, Maribor, Slovenia; [Mausa, Goran] Univ Rijeka, Fac Engn, Vukovarska 58, Rijeka 51000, Croatia",,"In software engineering there is an active research field of defect prediction using software metrics. While the research shows that the prediction of defects using software metrics performs well, prediction using metrics alone lacks clear refactoring capabilities. On the other hand, code smells have the ability to describe the code anomalies precisely, and suggest their refactoring. Therefore, code smells can be a much better starting position for software fault prediction. In this paper, we present the results of preliminary research on the ability to predict software defects with the code smell God Class. The aim of our research was to test the definition of God Class, as defined by Lanza and Marinescu in 2006, in the ability to predict defects in a case study of the open source projects JDT and PDE within the Eclipse framework. The definition of the God Class was adapted using the grid search technique, with the goal of maximizing the fault prediction ability while keeping the base of the original definition. The results show that adaption of the definition in the specific project resulted in improved fault prediction ability.",,,,mitja.gradisnik@um.si; tina.beranic@um.si; saso.karakatic@um.si; goran.mausa@riteh.hr,"Koricic, M; Butkovic, Z; Skala, K; Car, Z; CicinSain, M; Babic, S; Sruk, V; Skvorc, D; Ribaric, S; Gros, S; Vrdoljak, B; Mauher, M; Tijan, E; Pale, P; Huljenic, D; Grbac, TG; Janjic, M","345 E 47TH ST, NEW YORK, NY 10017 USA","42nd International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO)","Opatija, CROATIA","MAY 20-24, 2019",IEEE,,978-953-233-098-4,,,English,,Proceedings Paper,WoS,Engineering; Telecommunications,WOS:000484544500274,2-s2.0-85070263786,Slovenia;Croatia,um.si,Univ Maribor;Univ Rijeka,"Univ Maribor, Slovenia;Univ Rijeka, Croatia","Gradisnik, Mitja; Beranic, Tina; Karakatic, Saso; Mausa, Goran"
"Bastide G., Seriai A., Oussalah M.",Adapting software components by structure fragmentation,2006,Proceedings of the ACM Symposium on Applied Computing,2,,,1751,1758,,8,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33751057986&partnerID=40&md5=e15919e7e8874684f76ae23cd663453a,"Ecole de Mines de Douai, 941 rue Charles Bourseul, 59558 Douai, France; LINA, Université de Nantes, 2 rue de la Houssinière, 44322 Nantes, France","Bastide, G., Ecole de Mines de Douai, 941 rue Charles Bourseul, 59558 Douai, France; Seriai, A., Ecole de Mines de Douai, 941 rue Charles Bourseul, 59558 Douai, France; Oussalah, M., LINA, Université de Nantes, 2 rue de la Houssinière, 44322 Nantes, France","We present in this paper an approach aiming at adapting software components. It focuses on adapting component structures instead of adapting component services. Among the motivations of this kind of adaptation, we note its possible application to permit flexible deployment of software components and flexible loading of component code according to the available resources (CPU, memory). Our adaptation process is based on the analysis and the instrumentation of component codes. It respects the black-box property when it is implemented as a service provided by the component to be adapted. To support this structural adaptation technique, we developed an adaptation process which we have experimented using the Java framework of the Fractal component model. Copyright 2006 ACM.",Object-oriented; Refactoring; Software component; Structural adaptation,Computer programming languages; Mathematical models; Network components; Object oriented programming; Resource allocation; Fractal component model; Refactoring; Software component; Structural adaptation; Software engineering,Object-oriented;Refactoring;Software component;Structural adaptation;Computer programming languages;Mathematical models;Network components;Object oriented programming;Resource allocation;Fractal component model;Software engineering,"Bastide, G.; Ecole de Mines de Douai, 941 rue Charles Bourseul, 59558 Douai, France; email: bastide@ensm-douai.fr",,,,,,,,1595931082; 9781595931085,,,English,Proc ACM Symp Appl Computing,Conference Paper,Scopus,,2-s2.0-33751057986,,France,ensm-douai.fr,,,"Bastide G., Seriai A., Oussalah M."
"Patil, S., Drozdov, D., Vyatkin, V.",Adapting Software Design Patterns to Develop Reusable IEC 61499 Function Block Applications,2018,2018 IEEE 16TH INTERNATIONAL CONFERENCE ON INDUSTRIAL INFORMATICS (INDIN),,,,725,732,8,2,,,"[Patil, Sandeep; Drozdov, Dmitrii; Vyatkin, Valeriy] Lulea Univ Technol, Lulea, Sweden; [Drozdov, Dmitrii] Penza State Univ, Penza, Russia; [Vyatkin, Valeriy] Aalto Univ, Helsinki, Finland",,"Design patterns in software engineering is a generic solution provided for repeatable problems occurring frequently in a software design. They are used a lot in the field of software engineering, especially for object-oriented software development. Different standards exist for design and development of industrial cyber-physical systems and the IEC 61499 standard is one of them. The standard presents a reference component architecture for design and development of distributed industrial cyber-physical systems. There is a lack of design patterns for application development with IEC 61499 standard and this paper address this by proposing some patterns. The design patterns presented are inspired by popular design patterns used in software engineering.",Design Patterns; IEC 61499; Model-driven Design; Refactoring,MODEL,Design Patterns;IEC 61499;Model-driven Design;Refactoring;MODEL,sandeep.patil@ltu.se; dmitrii.drozdov@ltu.se; vyatkin@ieee.org,,"345 E 47TH ST, NEW YORK, NY 10017 USA",16th IEEE International Conference on Industrial Informatics (INDIN),"Univ Porto, Fac Engn, Porto, PORTUGAL","JUL 18-20, 2018",IEEE,1935-4576,978-1-5386-4829-2,,,English,IEEE INTL CONF IND I,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000450180200106,2-s2.0-85050108283,Sweden;Russian Federation;Finland,ltu.se,Lulea Univ Technol;Penza State Univ;Aalto Univ,"Lulea Univ Technol, Sweden;Penza State Univ, Russian Federation;Aalto Univ, Finland","Patil, Sandeep; Drozdov, Dmitrii; Vyatkin, Valeriy"
"Garces, K., Vara, J.M., Jouault, F., Marcos, E.",Adapting transformations to metamodel changes via external transformation composition,2014,SOFTWARE AND SYSTEMS MODELING,13,2,,789,806,18,7,10.1007/s10270-012-0297-1,,"[Garces, Kelly] INRIA EMN, ASCOLA, AtlanMod, Nantes, France; [Vara, Juan M.; Marcos, Esperanza] Rey Juan Carlos Univ, Kybele Res Grp, Madrid, Spain; [Jouault, Frederic] INRIA EMN, AtlanMod, Nantes, France",,"Evolution is inherent to software systemsbecause of the rapid improvement of technologies and business logic. As a software development paradigm, model driven engineering (MDE) is also affected by this problem. More concretely, being metamodels the cornerstone of MDE, their evolution impacts the rest of software artefacts involved in a development process, i.e., models and transformations. The influence over models has been tackled and partially solved in previous works. This paper focuses on the impact over transformations. We propose an approach to adapt transformations by means of external transformation composition. That is, we chain impacted transformations to particular adaptation transformations which deal with either refactoring/destruction changes or construction changes. Our approach semi-automatically generates such transformations by using the AtlanMod matching language, a DSL to define model matching strategies. To provide with a proof of concept for our proposal, we adapt transformations written in terms of object-relational database metamodels when such metamodels evolve in time.",Model-driven engineering; Metamodel evolution; Transformation adaptation,MODEL TRANSFORMATIONS; COUPLED EVOLUTION,Model-driven engineering;Metamodel evolution;Transformation adaptation;MODEL TRANSFORMATIONS;COUPLED EVOLUTION,kelly.garces.pernett@gmail.com; juanmanuel.vara@urjc.es; frederic.jouault@inria.fr; esperanza.marcos@urjc.es,,"TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY",,,,SPRINGER HEIDELBERG,1619-1366,,,,English,SOFTW SYST MODEL,Article,WoS,Computer Science,WOS:000335236300016,2-s2.0-84899955170,France;Spain,gmail.com,INRIA EMN;Rey Juan Carlos Univ,"INRIA EMN, France;Rey Juan Carlos Univ, Spain","Garces, Kelly; Vara, Juan M.; Jouault, Frederic; Marcos, Esperanza"
Kreimer J.,Adaptive detection of design flaws,2005,Electronic Notes in Theoretical Computer Science,141,4 SPEC. ISS.,,117,136,,26,10.1016/j.entcs.2005.02.059,https://www.scopus.com/inward/record.uri?eid=2-s2.0-28444473551&doi=10.1016%2fj.entcs.2005.02.059&partnerID=40&md5=251b1bd4e99dd4614d72441d1babe92d,"Research Group Programming Languages and Compilers, Department of Computer Science, University of Paderborn, Germany","Kreimer, J., Research Group Programming Languages and Compilers, Department of Computer Science, University of Paderborn, Germany","Criteria for software quality measurement depend on the application area. In large software systems criteria like maintainability, comprehensibility and extensibility play an important role. My aim is to identify design flaws in software systems automatically and thus to avoid ""bad"" - incomprehensible, hardly expandable and changeable - program structures. Depending on the perception and experience of the searching engineer, design flaws are interpreted in a different way. I propose to combine known methods for finding design flaws on the basis of metrics with machine learning mechanisms, such that design flaw detection is adaptable to different views. This paper presents the underlying method, describes an analysis tool for Java programs and shows results of an initial case study. © 2005 Elsevier B.V. All rights reserved.",Code smell; Design flaw; Machine learning; Object-oriented design; Program analysis; Refactoring; Software quality,Design; Error detection; Java programming language; Learning systems; Maintainability; Code smell; Design flow; Object-oriented design; Program analysis; Refactoring; Software quality; Computer software,Code smell;Design flaw;Machine learning;Object-oriented design;Program analysis;Refactoring;Software quality;Design;Error detection;Java programming language;Learning systems;Maintainability;Design flow;Computer software,"Kreimer, J.; Research Group Programming Languages and Compilers, Department of Computer Science, University of PaderbornGermany; email: jotte@uni-paderborn.de",,,,,,Elsevier,15710661,,,,English,Electron. Notes Theor. Comput. Sci.,Conference Paper,Scopus,,2-s2.0-28444473551,,Germany,uni-paderborn.de,,,Kreimer J.
Kreimer J.,Adaptive recognition of software-design shortcomings [Adaptive Erkennung von Software-Entwurfsmängeln],2005,Informatik - Forschung und Entwicklung,19,3,,151,161,,0,10.1007/s00450-005-0177-9,https://www.scopus.com/inward/record.uri?eid=2-s2.0-19044386252&doi=10.1007%2fs00450-005-0177-9&partnerID=40&md5=1492c5322266edacdc971e59cc9ee5ed,"Institut für Informatik, Universität Paderborn, Fürstenallee 11, 33102 Paderborn, Germany","Kreimer, J., Institut für Informatik, Universität Paderborn, Fürstenallee 11, 33102 Paderborn, Germany","Criteria for software quality measurement depend on the application area. In large software systems criteria like maintainability, comprehensibility and extensibility play an important role. My aim is to identify design flaws in software systems automatically and thus to avoid ""bad"" - incomprehensible, hardly expandable and changeable - program structures. Depending on the perception and experience of the searching engineer, design flaws are interpreted in a different way. I propose to combine known methods for finding design flaws on the basis of metrics with machine learning mechanisms, such that design flaw detection is adaptable to different views. This paper presents the underlying method, describes an analysis tool for Java programs and shows results of an initial case study. © Springer-Verlag 2005.",Machine learning; Metrics; Object-oriented design; Program analysis; Refactoring; Software quality,Automation; Computer systems programming; Java programming language; Learning systems; Quality control; Systems analysis; Onject-oriented design; Program analysis; Refactoring; Software quality; Object oriented programming,Machine learning;Metrics;Object-oriented design;Program analysis;Refactoring;Software quality;Automation;Computer systems programming;Java programming language;Learning systems;Quality control;Systems analysis;Onject-oriented design;Object oriented programming,"Kreimer, J.; Institut Für Informatik, Universität Paderborn, Fürstenallee 11, 33102 Paderborn, Germany; email: jotte@uni-paderborn",,,,,,,01783564,,,,German,Inform. Forsch. Entwickl.,Article,Scopus,,2-s2.0-19044386252,,Germany,uni-paderborn,,,Kreimer J.
"Czibula, G., Czibula, I.G.",Adaptive Refactoring Using a Core-Based Clustering Approach,2010,"SEPADS'10: PROCEEDINGS OF THE 9TH WSEAS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, PARALLEL AND DISTRIBUTED SYSTEMS",,,,133,138,6,0,,,"[Czibula, Gabriela; Czibula, Istvan Gergely] Univ Babes Bolyai, Dept Comp Sci, R-3400 Cluj Napoca, Romania",,"Improving the software systems design through refactoring is the most important issue during the evolution of object oriented software systems. Refactoring aims at changing a software system in such a way that it does not alter the external behavior of the code, but improves its internal structure. We have previously intoduced an original approach, named CARD (Clustering Approach for Refactorings Determination) that uses clustering for improving the class structure of a software system. In this paper we extend our approach and propose an adaptive method to cope with the evolving structure of any object oriented application. Namely, we handle here the case when new application classes are added to the software system and the current restructuring scheme must be accordingly adapted. We provide an example illustrating the efficiency of the proposed approach.",Restructuring; refactoring; clustering,,Restructuring;refactoring;clustering,gabis@cs.ubbcluj.ro; istvanc@cs.ubbcluj.ro,"Zadeh, LA; Kacprzyk, J; Mastorakis, N; KuriMorales, A; Borne, P; Kazovsky, L","AG LOANNOU THEOLOGOU 17-23, 15773 ZOGRAPHOU, ATHENS, GREECE","9th WSEAS International Conference on Software Engineering, Parallel and Distributed Systems","Univ Cambridge, Cambridge, ENGLAND","FEB 20-22, 2010",WORLD SCIENTIFIC AND ENGINEERING ACAD AND SOC,,978-960-474-156-4,,,English,ELE COM ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000276718800022,,Romania,cs.ubbcluj.ro,Univ Babes Bolyai,"Univ Babes Bolyai, Romania","Czibula, Gabriela; Czibula, Istvan Gergely"
"Dolby, J., Hammer, C., Marino, D., Tip, F., Vaziri, M., Vitek, J.",A Data-Centric Approach to Synchronization,2012,ACM TRANSACTIONS ON PROGRAMMING LANGUAGES AND SYSTEMS,34,1,4,,,48,2,10.1145/2160910.2160913,,"[Dolby, Julian; Tip, Frank; Vaziri, Mandana] IBM Corp, TJ Watson Res Ctr, Yorktown Hts, NY 10598 USA; [Hammer, Christian] Univ Saarland, Cyber Secur Lab, D-66123 Saarbrucken, Germany; [Vitek, Jan] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA; [Marino, Daniel] Symantec Res Labs, Culver City, CA 90230 USA",,"Concurrency-related errors, such as data races, are frustratingly difficult to track down and eliminate in large object-oriented programs. Traditional approaches to preventing data races rely on protecting instruction sequences with synchronization operations. Such control-centric approaches are inherently brittle, as the burden is on the programmer to ensure that all concurrently accessed memory locations are consistently protected. Data-centric synchronization is an alternative approach that offloads some of the work on the language implementation. Data-centric synchronization groups fields of objects into atomic sets to indicate that these fields must always be updated atomically. Each atomic set has associated units of work, that is, code fragments that preserve the consistency of that atomic set. Synchronization operations are added automatically by the compiler. We present an extension to the Java programming language that integrates annotations for data-centric concurrency control. The resulting language, called AJ, relies on a type system that enables separate compilation and supports atomic sets that span multiple objects and that also supports full encapsulation for more efficient code generation. We evaluate our proposal by refactoring classes from standard libraries, as well as a number of multithreaded benchmarks, to use atomic sets. Our results suggest that data-centric synchronization is easy to use and enjoys low annotation overhead, while successfully preventing data races. Moreover, experiments on the SPECjbb benchmark suggest that acceptable performance can be achieved with a modest amount of tuning.",Concurrent object-oriented programming; data races; serializability; programming model,,Concurrent object-oriented programming;data races;serializability;programming model,tip@acm.org,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,0164-0925,,,,English,ACM T PROGR LANG SYS,Article,WoS,Computer Science,WOS:000303333300004,,United States;Germany,acm.org,IBM Corp;Univ Saarland;Purdue Univ;Symantec Res Labs,"IBM Corp, United States;Univ Saarland, Germany;Purdue Univ, United States;Symantec Res Labs, United States","Dolby, Julian; Hammer, Christian; Marino, Daniel; Tip, Frank; Vaziri, Mandana; Vitek, Jan"
"Reutelshoefer J., Baumeister J., Puppe F.",A data structure for the refactoring of multimodal knowledge,2009,CEUR Workshop Proceedings,486,,,33,45,,2,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887220331&partnerID=40&md5=e17c5241faaf65e8f238e8e566fe420e,"Institute for Computer Science, University of Würzburg, Germany","Reutelshoefer, J., Institute for Computer Science, University of Würzburg, Germany; Baumeister, J., Institute for Computer Science, University of Würzburg, Germany; Puppe, F., Institute for Computer Science, University of Würzburg, Germany","Knowledge often appears in different shapes and formalisms, thus available as multimodal knowledge. This heterogeneity denotes a challenge for the people involved in today's knowledge engineering tasks. In this paper, we discuss an approach for refactoring of multimodal knowledge on the basis of a generic tree-based data structure. We explain how this data structure is created from documents (i.e., the most general mode of knowledge), and how different refactorings can be performed considering different levels of formality.",,Different shapes; Multi-modal; Refactorings; Tree-based data structures; Data structures; Knowledge engineering; Software engineering,Different shapes;Multi-modal;Refactorings;Tree-based data structures;Data structures;Knowledge engineering;Software engineering,"Institute for Computer Science, University of WürzburgGermany",,,,,,,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-84887220331,,Germany,No email,,,"Reutelshoefer J., Baumeister J., Puppe F."
"Holst G., Berg S., Kare K., Magistretti P., Cali C.",Adding large em stack support,2016,"2016 4th Saudi International Conference on Information Technology (Big Data Analysis), KACSTIT 2016",,, 7756066,,,,3,10.1109/KACSTIT.2016.7756066,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85006827152&doi=10.1109%2fKACSTIT.2016.7756066&partnerID=40&md5=76929866fdd2f03881674ac11d2757bd,"Visualization Core Lab KAUST, Thuwal, Saudi Arabia; HHMI, Janelia Research Campus Virginia, United States; BESE Division, KAUST, Thuwal, Saudi Arabia","Holst, G., Visualization Core Lab KAUST, Thuwal, Saudi Arabia; Berg, S., HHMI, Janelia Research Campus Virginia, United States; Kare, K., BESE Division, KAUST, Thuwal, Saudi Arabia; Magistretti, P., BESE Division, KAUST, Thuwal, Saudi Arabia; Cali, C., BESE Division, KAUST, Thuwal, Saudi Arabia","Serial section electron microscopy (SSEM) image stacks generated using high throughput microscopy techniques are an integral tool for investigating brain connectivity and cell morphology. FIB or 3View scanning electron microscopes easily generate gigabytes of data. In order to produce analyzable 3D dataset from the imaged volumes, efficient and reliable image segmentation is crucial. Classical manual approaches to segmentation are time consuming and labour intensive. Semiautomatic seeded watershed segmentation algorithms, such as those implemented by ilastik image processing software, are a very powerful alternative, substantially speeding up segmentation times. We have used ilastik effectively for small EM stacks - on a laptop, no less; however, ilastik was unable to carve the large EM stacks we needed to segment because its memory requirements grew too large - even for the biggest workstations we had available. For this reason, we refactored the carving module of ilastik to scale it up to large EM stacks on large workstations, and tested its efficiency. We modified the carving module, building on existing blockwise processing functionality to process data in manageable chunks that can fit within RAM (main memory). We review this refactoring work, highlighting the software architecture, design choices, modifications, and issues encountered. © 2016 IEEE.",blockwise carving; code refactoring; image analysis; large data; segmentation,Big data; Image analysis; Image processing; Random access storage; Scanning electron microscopy; blockwise carving; Code re-factoring; Image-processing software; Large data; Memory requirements; Microscopy technique; Processing functionality; Watershed segmentation algorithm; Image segmentation,blockwise carving;code refactoring;image analysis;large data;segmentation;Big data;Image processing;Random access storage;Scanning electron microscopy;Code re-factoring;Image-processing software;Memory requirements;Microscopy technique;Processing functionality;Watershed segmentation algorithm;Image segmentation,"Holst, G.; Visualization Core Lab KAUSTSaudi Arabia; email: glendon.holst@kaust.edu.sa",,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781467389563,,,English,"Saudi Int. Conf. Inf. Technol. (Big Data Anal.), KACSTIT",Conference Paper,Scopus,,2-s2.0-85006827152,,Saudi Arabia;United States,kaust.edu.sa,,,"Holst G., Berg S., Kare K., Magistretti P., Cali C."
"Holst, G., Berg, S., Kare, K., Magistretti, P., Cali, C.",Adding Large EM Stack Support A quick guide to the blockwise carving refactor of ilastik,2016,2016 4TH SAUDI INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY (BIG DATA ANALYSIS) (KACSTIT),,,,25,31,7,1,,,"[Holst, Glendon] KAUST, Visualizat Core Lab, Thuwal, Saudi Arabia; [Berg, Stuart] HHMI, Janelia Res Campus, Ashburn, VA USA; [Kare, Kalpana; Magistretti, Pierre; Cali, Corrado] KAUST, BESE Div, Thuwal, Saudi Arabia",,"Serial section electron microscopy (SSEM) image stacks generated using high throughput microscopy techniques are an integral tool for investigating brain connectivity and cell morphology. FIB or 3View scanning electron microscopes easily generate gigabytes of data. In order to produce analyzable 3D dataset from the imaged volumes, efficient and reliable image segmentation is crucial. Classical manual approaches to segmentation are time consuming and labour intensive. Semiautomatic seeded watershed segmentation algorithms, such as those implemented by ilastik image processing software, are a very powerful alternative, substantially speeding up segmentation times. We have used ilastik effectively for small EM stacks - on a laptop, no less; however, ilastik was unable to carve the large EM stacks we needed to segment because its memory requirements grew too large - even for the biggest workstations we had available. For this reason, we refactored the carving module of ilastik to scale it up to large EM stacks on large workstations, and tested its efficiency. We modified the carving module, building on existing blockwise processing functionality to process data in manageable chunks that can fit within RAM (main memory). We review this refactoring work, highlighting the software architecture, design choices, modifications, and issues encountered.",image analysis; segmentation; blockwise carving; large data; code refactoring,IMAGE-ANALYSIS,image analysis;segmentation;blockwise carving;large data;code refactoring;IMAGE-ANALYSIS,glendon.holst@kaust.edu.sa; corrado.cali@kaust.edu.sa,,"345 E 47TH ST, NEW YORK, NY 10017 USA",4th Saudi International Conference on Information Technology - Big Data Analysis (KACSTIT),"Riyadh, SAUDI ARABIA","NOV 06-09, 2016",IEEE,,978-1-4673-8956-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000391895600005,,Saudi Arabia;United States,kaust.edu.sa,KAUST;HHMI,"KAUST, Saudi Arabia;HHMI, United States","Holst, Glendon; Berg, Stuart; Kare, Kalpana; Magistretti, Pierre; Cali, Corrado"
Cyganek B.,Adding parallelism to the hybrid image processing library in multi-threading and multi-core systems,2011,"Proceedings - 2011 IEEE 2nd International Conference on Networked Embedded Systems for Enterprise Applications, NESEA 2011",,, 6144935,,,,5,10.1109/NESEA.2011.6144935,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84857553865&doi=10.1109%2fNESEA.2011.6144935&partnerID=40&md5=e999d22ed890fb0f1b18cac4b2b93758,"AGH University of Science and Technology, Al. Mickiewicza 30, Krakow 30-059, Poland","Cyganek, B., AGH University of Science and Technology, Al. Mickiewicza 30, Krakow 30-059, Poland","The paper presents a hybrid image processing library adapted to take full advantage of the multi-threading and multi-core computer systems. Architecture of the library follows the handle-body design pattern. The handle layer represents an abstract interface which hides implementation details and leaves the user's code untouched. Software/hardware implementations are hidden in the body layers which allow for high level of parallelism and best exploitation of the available resources. The first aim of this paper is to present a short introduction to the new version of the library which is available from the Internet. The second purpose is to present refactoring of the software layer with help of the OpenMP to take advantage of the multi-core systems, as well as to share expertise in using this technology in other object-oriented platforms for massive data processing. Experimental results show on average two-three times acceleration in the refactored layers. © 2011 IEEE.",,Abstract interfaces; Design Patterns; Hybrid image; Multi core; Multi-core systems; Multi-threading; Object-oriented platform; Refactorings; Software/hardware; Application programming interfaces (API); Data processing; Image processing; Industry; Microprocessor chips; Embedded systems,Abstract interfaces;Design Patterns;Hybrid image;Multi core;Multi-core systems;Multi-threading;Object-oriented platform;Refactorings;Software/hardware;Application programming interfaces (API);Data processing;Image processing;Industry;Microprocessor chips;Embedded systems,"Cyganek, B.; AGH University of Science and Technology, Al. Mickiewicza 30, Krakow 30-059, Poland",,,,,,,,,,,English,"Proc. - IEEE Int. Conf. Networked Embedded Syst. Enterp. Appl., NESEA",Conference Paper,Scopus,,2-s2.0-84857553865,,Poland,No email,,,Cyganek B.
"Noel, R., Valdes, G., Visconti, M., Astudillo, H.",Adding Planned Design to XP Might Help Novices' Productivity (or Might Not): Two Controlled Experiments,2008,ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT,,,,285,287,3,0,,,"[Noel, Rene; Valdes, Gonzalo; Visconti, Marcello; Astudillo, Hernan] Univ Tecn Federico Santa Maria, Valparaiso, Chile",,"Extreme Programming (XP) suggests using Evolutionary design, always implementing the simplest solution that satisfies the current iteration's requirements, instead of Planned (or Traditional) up-front design. Some developers have questioned the usefulness of Evolutionary approach's enabling practices (e.g., refactoring, test-driven development) arguing for the naturalness of and need for, Planned design. Two controlled experiments were conducted to compare both approaches regarding product quality and programmer productivity. Results from both studies show that (1) there is no significant difference in the product quality, independently of experience, but (2) novices are snore productive using the Planned approach.",Extreme Programming; Evolutionary Software Design; Planned Software Design; Experimental Studies,,Extreme Programming;Evolutionary Software Design;Planned Software Design;Experimental Studies,rnoel@inf.utfsm.cl; gvaldes@inf.utfsm.cl; visconti@inf.utfsm.cl; hernan@inf.utfsm.cl,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",ACM/IEEE International Symposium on Empirical Software Engineering and Measurement,"Kaiserslautern, GERMANY","OCT 09-10, 2008-2009",ASSOC COMPUTING MACHINERY,,978-1-59593-971-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000266371500035,2-s2.0-62949248341,Chile,inf.utfsm.cl,Univ Tecn Federico Santa Maria,"Univ Tecn Federico Santa Maria, Chile","Noel, Rene; Valdes, Gonzalo; Visconti, Marcello; Astudillo, Hernan"
"Shonle M., Griswold W.G., Lerner S.",Addressing common crosscutting problems with Arcum,2008,ACM SIGPLAN/SIGSOFT Workshop on Program Analysis for Software Tools and Engineering,,,,64,69,,2,10.1145/1512475.1512489,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77950552969&doi=10.1145%2f1512475.1512489&partnerID=40&md5=05fa0ae98dfdf94e48d581ea6ab4a10f,"Computer Science and Engineering, UC San Diego, San Diego, CA 92093-0404, United States","Shonle, M., Computer Science and Engineering, UC San Diego, San Diego, CA 92093-0404, United States; Griswold, W.G., Computer Science and Engineering, UC San Diego, San Diego, CA 92093-0404, United States; Lerner, S., Computer Science and Engineering, UC San Diego, San Diego, CA 92093-0404, United States","Crosscutting is an inherent part of software development and can typically be managed through modularization: A module's stable properties are defined in an interface while its likely-to-change properties are encapsulated within the module [19]. The cross-cutting of the stable properties, such as class and method names, can be mitigated with automated refactoring tools that allow, for example, the interface's elements to be renamed [9, 18]. However, often the crosscutting from design idioms (such as design patterns and coding styles) are so specific to the program's domain that their crosscutting would not likely have been anticipated by the developers of an automated refactoring system. The Arcum plug-in for Eclipse enables programmers to describe the implementation of a crosscutting design idiom as a set of syntactic patterns and semantic constraints. Arcum can process declarations of related implementations and infer the refactoring steps necessary to transform a program from using one implementation to its alternatives. As a result, automating refactoring for domain-specific crosscutting design idioms can be easy and practical. This paper presents a case study of how Arcum was used to mitigate four classic software engineering problems that are exacerbated by crosscutting: library migration, debugging, programmer-defined semantic checking, and architectural enforcement. Copyright 2008 ACM.",Aspect-oriented programming; Design patterns; Refactoring,Aspect-Oriented Programming; Cross-cutting; Design Patterns; Domain specific; Modularizations; Plug-ins; Refactoring tools; Refactorings; Semantic constraints; Software development; Stable property; Syntactic patterns; Computer software; Computer systems programming; Cutting tools; Design; Modular construction; Semantics; Technical presentations; Program debugging,Aspect-oriented programming;Design patterns;Refactoring;Cross-cutting;Domain specific;Modularizations;Plug-ins;Refactoring tools;Refactorings;Semantic constraints;Software development;Stable property;Syntactic patterns;Computer software;Computer systems programming;Cutting tools;Design;Modular construction;Semantics;Technical presentations;Program debugging,"Shonle, M.; Computer Science and Engineering, UC San Diego, San Diego, CA 92093-0404, United States; email: mshonle@cs.ucsd.edu",,,,,,,,9781605583822,,,English,ACM SIGPLAN SIGSOFT Workshop Program Anal Software Tools Eng,Conference Paper,Scopus,,2-s2.0-77950552969,,United States,cs.ucsd.edu,,,"Shonle M., Griswold W.G., Lerner S."
"Deng, G., Lenz, G., Schmidt, D.C.",Addressing domain evolution challenges in software product lines,2006,SATELLITE EVENTS AT THE MODELS 2005 CONFERENCE,3844,,,247,261,15,7,,,"Vanderbilt Univ, Dept EECS, Nashville, TN 37203 USA; Siemens Corp Res, Princeton, NJ 08540 USA",,"It is hard to develop and evolve software product-line architectures (PLAs) for large-scale distributed real-time and embedded (DRE) systems. Although certain challenges of PLAs can be addressed by combining model-driven development (MDD) techniques with component frameworks, domain evolution problems remain largely unresolved. In particular, extending or refactoring existing software product-lines to handle unanticipated requirements or better satisfy current requirements requires significant effort. This paper describes techniques for minimizing such impacts on MDD-based PLAs for DRE systems through a case study that shows how a layered architecture and model-to-model transformation tool support can reduce the effort of PLA evolution.",model-driven development; product-line architectures; model transformation,,model-driven development;product-line architectures;model transformation,dengg@dre.vanderbilt.edu; lenz.gunther@siemens.com; schmidt@dre.vanderbilt.edu,"Bruel, JM","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",International MoDELS 2005,"Montego Bay, JAMAICA","OCT 02-07, 2005",SPRINGER-VERLAG BERLIN,0302-9743,3-540-31780-5,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000235807000026,2-s2.0-33745644065,United States,dre.vanderbilt.edu,Dept EECS;Princeton,"Dept EECS, United States;Princeton, United States","Deng, G; Lenz, G; Schmidt, DC"
"Oyetoyan, T.D., Cruzes, D.S., Thurmann-Nielsen, C.",A Decision Support System to Refactor Class Cycles,2015,2015 31ST INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME) PROCEEDINGS,,,,231,240,10,2,,,"[Oyetoyan, Tosin Daniel] Norwegian Univ Sci & Technol, Comp & Informat Sci, Trondheim, Norway; [Cruzes, Daniela Soares] SINTEF, Software Engn Safety & Secur, Trondheim, Norway; [Thurmann-Nielsen, Christian] EVRY ASA, Oslo, Norway",,"Many studies show that real-world systems are riddled with large dependency cycles among software classes. Dependency cycles are claimed to affect quality factors such as testability, extensibility, modifiability, and reusability. Recent studies reveal that most defects are concentrated in classes that are in and near cycles. In this paper, we (1) propose a new metric: IRCRSS based on the Class Reachability Set Size (CRSS) to identify the reduction ratio between the CRSS of a class and its interfaces, and (2) presents a cycle-breaking decision support system (CB-DSS) that implements existing design approaches in combination with class edge contextual data. Evaluations of multiple systems show that (1) the IRCRSS metric can be used to identify fewer classes as candidates for breaking large cycles, thus reducing refactoring effort, and (2) the CB-DSS can assist software engineers to plan restructuring of classes involved in complex dependency cycles.",Dependency cycle; CRSS; refactoring; software quality; decision support system,DEPENDENCIES; SOFTWARE,Dependency cycle;CRSS;refactoring;software quality;decision support system;DEPENDENCIES;SOFTWARE,tosindo@idi.ntnu.no; danielac@sintef.no; christian.thurmann-nielsen@evry.com,"Koschke, R; Krinke, J; Robillard, M","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 31st International Conference on Software Maintenance and Evolution (ICSME),"Bremen, GERMANY","SEP 29-OCT 01, 2015",IEEE,1063-6773,978-1-4673-7532-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380398300024,2-s2.0-84961678007,Norway,idi.ntnu.no,Norwegian Univ Sci & Technol;SINTEF;EVRY ASA,"Norwegian Univ Sci & Technol, Norway;SINTEF, Norway;EVRY ASA, Norway","Oyetoyan, Tosin Daniel; Cruzes, Daniela Soares; Thurmann-Nielsen, Christian"
"Sun, Y., Gray, J., White, J.",A demonstration-based model transformation approach to automate model scalability,2015,SOFTWARE AND SYSTEMS MODELING,14,3,,1245,1271,27,2,10.1007/s10270-013-0374-0,,"[Sun, Yu] Univ Alabama Birmingham, Dept Comp & Informat Sci, Birmingham, AL 35294 USA; [Gray, Jeff] Univ Alabama, Dept Comp Sci, Tuscaloosa, AL 35487 USA; [White, Jules] Virginia Tech, Dept Elect & Comp Engn, Blacksburg, VA USA",,"An important aspect during software development is the ability to evolve and scale software models in order to handle design forces, such as enlarging and upgrading system features, or allocating more resources to handle additional users. Model scalability is the ability to refactor a base model, by adding or replicating the base model elements, connections or substructures, in order to build a larger and more complex model to satisfy new design requirements. Although a number of modeling tools have been developed to create and edit models for different purposes, mechanisms to scale models have not been well supported. In most situations, models are manually scaled using the basic point-and-click editing operations provided by the modeling environment. Manual model scaling is often tedious and error-prone, especially when the model to be scaled has hundreds or thousands of elements and the scaling process involves entirely manual operations. Although model scaling tasks can be automated by using model transformation languages, writing model transformation rules requires learning a model transformation language, as well as possessing a great deal of knowledge about the metamodel. Model transformation languages and metamodel concepts are often difficult for domain experts to understand. This requirement to learn a complex model transformation language exerts a negative influence on the usage of models by domain experts in software development. For instance, domain experts may be prevented from contributing to model scalability tasks from which they have significant domain experience. This paper presents a demonstration-based approach to automate model scaling. Instead of writing model transformation rules explicitly, users demonstrate how to scale models by directly editing the concrete model instances and simulate the model replication processes. By recording a user's operations, an inference engine analyzes the user's demonstration and generalizes model transformation patterns automatically, which can be reused to scale up other model instances. Using this approach, users are able to automate scaling tasks without learning a complex model transformation language. In addition, because the demonstration is performed on model instances, users are isolated from the underlying abstract metamodel definitions.",Model evolution; Model scalability; Model transformation by demonstration,FRAMEWORK; EXAMPLE; TOOL,Model evolution;Model scalability;Model transformation by demonstration;FRAMEWORK;EXAMPLE;TOOL,yu.sun.cs@gmail.com; gray@cs.ua.edu; julesw@vt.edu,,"TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY",,,,SPRINGER HEIDELBERG,1619-1366,,,,English,SOFTW SYST MODEL,Article,WoS,Computer Science,WOS:000360764200010,,United States,gmail.com,Univ Alabama Birmingham;Univ Alabama;Virginia Tech,"Univ Alabama Birmingham, United States;Univ Alabama, United States;Virginia Tech, United States","Sun, Yu; Gray, Jeff; White, Jules"
Rama G.M.,A desiderata for refactoring-based software modularity improvement,2010,ISEC'10 - Proceedings of the 2010 India Software Engineering Conference,,,,93,101,,5,10.1145/1730874.1730893,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77951468934&doi=10.1145%2f1730874.1730893&partnerID=40&md5=4a873d767c434ba7b256d758e6e5088b,"Infosys Technologies Limited, Electronics City, Bangalore, India","Rama, G.M., Infosys Technologies Limited, Electronics City, Bangalore, India","There exists number of large business critical software systems of recent vintage that are becoming increasingly difficult to maintain. These systems, written in newer languages such as C and Java are fast becoming legacy and showing the same symptoms of modularity deterioration reminiscent of older legacy systems written in Cobol and PL1. However, this problem has not received much attention from the software modularization community. In this paper, we argue that the modularization needs of these relatively newer systems, which generally have some modular structure, is significantly different from the needs of older, mainly monolithic, legacy systems. We emphasize the need for incrementally improving modularity and propose a software refactoring based approach to solve this problem, thereby, uniting hitherto two disparate threads of research - software modularization and software refactoring. As part of this refactoring based modularity improvement approach, we identify a set of modularity smells and specify how to detect these smells in poorly modularized software systems. A validation of these modularity smells is carried out using several open source systems. Copyright 2010 ACM.",Code smells; Preventive maintenance; Software maintenance; Software modularity; Software refactoring,Code smell; Code smells; Critical software; Large business; Modular structures; Modularizations; Modularized; Open source system; Refactorings; Software modularity; Software modularization; Software refactoring; Software systems; Computer software; Java programming language; Legacy systems; Management information systems; Modular construction; Odors; Open systems; Preventive maintenance; Computer software maintenance,Code smells;Preventive maintenance;Software maintenance;Software modularity;Software refactoring;Code smell;Critical software;Large business;Modular structures;Modularizations;Modularized;Open source system;Refactorings;Software modularization;Software systems;Computer software;Java programming language;Legacy systems;Management information systems;Modular construction;Odors;Open systems;Computer software maintenance,"Rama, G. M.; Infosys Technologies Limited, Electronics City, Bangalore, India; email: girish_rama@infosys.com",,,,,,,,9781605589220,,,English,ISEC - Proc. India Softw. Eng. Conf.,Conference Paper,Scopus,,2-s2.0-77951468934,,India,infosys.com,,,Rama G.M.
"Le Beux, S., Marquet, P., Dekeyser, J.L.",A design flow to map parallel applications onto FPGAS,2007,"2007 INTERNATIONAL CONFERENCE ON FIELD PROGRAMMABLE LOGIC AND APPLICATIONS, PROCEEDINGS, VOLS 1 AND 2",,,,605,608,4,0,10.1109/FPL.2007.4380727,,"[Le Beux, Sebastien; Marquet, Philippe; Dekeyser, Jean-Luc] Univ Lille, LIFL, Lille, France",,"This paper introduces a new flow able to fit a parallel application onto an FPGA according to the FPGA characteristics such as computing power and IOs. The flow is based on iterative refactoring and transformations of the application. From the resulting application, a VHDL code is generated. This code is finally used to simulate or synthesize the application. Significant experiments have validated the approach.",,,,Sebastien.Le-Beux@lifl.fr,"Bertels, K; Najjar, W; VanGenderen, A; Vassiliadis, S","345 E 47TH ST, NEW YORK, NY 10017 USA",17th International Conference on Field Programmable Logic and Applications,"Amsterdam, NETHERLANDS","AUG 27-29, 2007",IEEE,,978-1-4244-1059-0,,,English,I C FIELD PROG LOGIC,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000252360200111,,France,lifl.fr,Univ Lille,"Univ Lille, France","Le Beux, Sebastien; Marquet, Philippe; Dekeyser, Jean-Luc"
"Mascheroni, M.A., Irrazabal, E.",A Design Pattern Approach for RESTful tests: a case study,2018,OBRAS COLECTIVAS EN CIENCIAS DE LA COMPUTACION,,,,257,268,12,0,,,"[Agustin Mascheroni, Maximiliano; Irrazabal, Emanuel] Univ Nacl Nordeste, Corrientes, Argentina",,"The REST architectural style was introduced as an alternative to the design of web services. It is much simpler than SOAP and WSDL-based services, so many companies have started to use it. This makes the tests carried out on this architecture become more important. Even though there are many tools available, only a few of them can be incorporated to a process of continuous software development, where time is a key factor. In this paper, we present a design pattern for RESTful tests, based on the principles of this architecture and on the unit test basics. The approach has been implemented in three companies of software development as a framework. It has been proved that there has been a 90 % decrease in the time spent during automated regressions and refactoring in a continuous integration environment. Finally, the use of tools to execute automated tests has given rise to other kinds of improvements, such as the automatic generation of reports.",Web service testing; REST; continuous software development; design pattern,,Web service testing;REST;continuous software development;design pattern,,"Beltran, VMP; Paz, LP","CALLE 25 NO 115 85 KM 2 VIA CALI-JAMUNDI, CALI, 760030, COLOMBIA",12th Colombian Conference on Computing (CCC),"Cali, COLOMBIA","SEP 19-22, 2017",UNIV AUTONOMA OCCIDENTE,,978-958-5415-19-5,,,English,,Proceedings Paper,WoS,Computer Science; Robotics,WOS:000483360200017,,Argentina,No email,Univ Nacl Nordeste,"Univ Nacl Nordeste, Argentina","Agustin Mascheroni, Maximiliano; Irrazabal, Emanuel"
"Wang, C.X., Kang, S.Y.",ADFL: An Improved Algorithm for American Fuzzy Lop in Fuzz Testing,2018,"CLOUD COMPUTING AND SECURITY, PT V",11067,,,27,36,10,0,10.1007/978-3-030-00018-9_3,,"[Wang, Chenxin; Kang, Shunyao] Beijing Univ Chem Technol, Beijing 100029, Peoples R China",,"Fuzz testing is an effective software testing technology being used to find correctness problems and security issues in software. AFL (American Fuzzy Lop) is one of the most advanced fuzzy testing tools. However, it is difficult for AFL to explore deeper parts of the program. This paper proposes an improved method called ADFL for low hit branch of the tested program to solve this problem. The method first optimizes the selection strategy for seed files, and secondly generates test cases with hits and low hits at higher frequencies during the mutation phase. The experimental results show that compared with the latest version of AFL, the coverage of ADFL is significantly increased in 24 h than AFL. ADFL can cover more branches than AFL in each benchmark program and improve branch coverage of program refactoring by 19.7% and 74.5%. Moreover, ADFL can indeed find more bugs, especially for deep nested test programs.",Fuzzing; Software testing; AFL,,Fuzzing;Software testing;AFL,writingspace222@163.com,"Sun, X; Pan, Z; Bertino, E","GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND",4th International Conference on Cloud Computing and Security (ICCCS),"Nanjing Univ Informat Sci & Technol, Sch Comp & Software, Haikou, PEOPLES R CHINA","JUN 08-10, 2018",SPRINGER INTERNATIONAL PUBLISHING AG,0302-9743,978-3-030-00018-9; 978-3-030-00017-2,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000478658700003,2-s2.0-85054867967,China,163.com,Beijing Univ Chem Technol,"Beijing Univ Chem Technol, China","Wang, Chenxin; Kang, Shunyao"
"Fucci, D., Erdogmus, H., Turhan, B., Oivo, M., Juristo, N.",A Dissection of the Test-Driven Development Process: Does It Really Matter to Test-First or to Test-Last?,2017,IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,43,7,,597,614,18,10,10.1109/TSE.2016.2616877,,"[Fucci, Davide; Turhan, Burak; Oivo, Markku; Juristo, Natalia] Univ Oulu, Dept Informat Proc Sci, Oulu 90014, Finland; [Erdogmus, Hakan] Carnegie Mellon Univ, Silicon Valley Campus, Pittsburgh, PA 15213 USA; [Juristo, Natalia] Univ Politecn Madrid, Escuela Tecn Super Ingenieros Informat, E-28040 Madrid, Spain",,"Background: Test-driven development (TDD) is a technique that repeats short coding cycles interleaved with testing. The developer first writes a unit test for the desired functionality, followed by the necessary production code, and refactors the code. Many empirical studies neglect unique process characteristics related to TDD iterative nature. Aim: We formulate four process characteristic: sequencing, granularity, uniformity, and refactoring effort. We investigate how these characteristics impact quality and productivity in TDD and related variations. Method: We analyzed 82 data points collected from 39 professionals, each capturing the process used while performing a specific development task. We built regression models to assess the impact of process characteristics on quality and productivity. Quality was measured by functional correctness. Result: Quality and productivity improvements were primarily positively associated with the granularity and uniformity. Sequencing, the order in which test and production code are written, had no important influence. Refactoring effort was negatively associated with both outcomes. We explain the unexpected negative correlation with quality by possible prevalence of mixed refactoring. Conclusion: The claimed benefits of TDD may not be due to its distinctive test-first dynamic, but rather due to the fact that TDD-like processes encourage fine-grained, steady steps that improve focus and flow.",Test-driven development; empirical investigation; process dimensions; external quality; productivity,REGRESSION-ANALYSIS; MODEL; TDD,Test-driven development;empirical investigation;process dimensions;external quality;productivity;REGRESSION-ANALYSIS;MODEL;TDD,davide.fucci@oulu.fi; hakan.erdogmus@sv.cmu.edu; burak.turhan@oulu.fi; Markku.Oivo@oulu.fi; natalia@fi.upm.es,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0098-5589,,,,English,IEEE T SOFTWARE ENG,Article,WoS,Computer Science; Engineering,WOS:000405704400001,,Finland;United States;Spain,oulu.fi,Univ Oulu;Carnegie Mellon Univ;Univ Politecn Madrid,"Univ Oulu, Finland;Carnegie Mellon Univ, United States;Univ Politecn Madrid, Spain","Fucci, Davide; Erdogmus, Hakan; Turhan, Burak; Oivo, Markku; Juristo, Natalia"
"Iqbal S., Khalid M., Khan M.N.A.",A distinctive suite of performance metrics for software design,2013,International Journal of Software Engineering and its Applications,7,5,,197,208,,4,10.14257/ijseia.2013.7.5.18,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886382615&doi=10.14257%2fijseia.2013.7.5.18&partnerID=40&md5=6948f073877667dc9e6d917b6550f3c8,"Shaheed Zulfikar Ali Bhutto Institute of Science and Technology (SZABIST), Islamabad, Pakistan","Iqbal, S., Shaheed Zulfikar Ali Bhutto Institute of Science and Technology (SZABIST), Islamabad, Pakistan; Khalid, M., Shaheed Zulfikar Ali Bhutto Institute of Science and Technology (SZABIST), Islamabad, Pakistan; Khan, M.N.A., Shaheed Zulfikar Ali Bhutto Institute of Science and Technology (SZABIST), Islamabad, Pakistan","Software metrics proposed in various theories and literature have considerable variation among them. The sole purpose of all these theories is to improve the quality of software projects by producing and using quantitative measures. All these theories improve the quality of a software project and mend all the issues relating to software refactoring. As the software industry moves to a more mature state, the need for employing more effective tools, techniques and benchmarks for managing software projects has become significantly critical to minimize the negative risk factors as well as ensuring augmented adherence to quality assurance. In this study, we intend to explore how distinctive metrics with respect to different knowledge areas, especially in design engineering, could be useful to manage knowledgeably the software projects. The focus of this research study is to evaluate and highlight the importance of various performance metrics and measures to track the software project performance followed by some already proposed metrics for software design, development and management © 2013 SERSC.",Design management; Metrics for quality management; Project performance metrics; Software engineering; Software project management,,Design management;Metrics for quality management;Project performance metrics;Software engineering;Software project management,"Iqbal, S.; Shaheed Zulfikar Ali Bhutto Institute of Science and Technology (SZABIST), Islamabad, Pakistan; email: shahid.iqbal.skt@gmail.com",,,,,,,17389984,,,,English,Int. J. Softw. Eng. Appl.,Article,Scopus,,2-s2.0-84886382615,,Pakistan,gmail.com,,,"Iqbal S., Khalid M., Khan M.N.A."
"Antoniol G., Di Penta M.",A distributed architecture for dynamic analyses on user-profile data,2004,"Proceedings of the European Conference on Software Maintenance and Reengineering, CSMR",8,,,319,328,,7,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-3042773709&partnerID=40&md5=1ab296e16c505f5a7a51bf4ac64ba2d6,"Res. Centre on Software Technology, University of Sannio, Department of Engineering, Palazzo ex Poste, Via Traiano, 1, 82100 Benevento, Italy","Antoniol, G., Res. Centre on Software Technology, University of Sannio, Department of Engineering, Palazzo ex Poste, Via Traiano, 1, 82100 Benevento, Italy; Di Penta, M., Res. Centre on Software Technology, University of Sannio, Department of Engineering, Palazzo ex Poste, Via Traiano, 1, 82100 Benevento, Italy","Combining static and dynamic information is highly relevant in many reverse engineering, program comprehension and maintenance tasks. To allow dynamic information reflecting software system usage scenarios, it should be collected during a long period of time, in a real user environment. This, however, poses several challenges. First and foremost, it is necessary to model the extraction of any relevant dynamic information from execution traces, thus avoiding to collect a large amount of unmanageable data. Second, we need a distributed architecture that allows to collect and compress such an information from geographically distributed users. We propose a probabilistic model for representing dynamic information, as well as a web-service based distributed architecture for its collection and compression. The new architecture has been instantiated to collect inter-procedural program execution traces up to a selectable level of calling context sensitivity. The paper details the role and responsibilities of the architecture components, as well as performance and compression ratios achieved on a set of C and Java programs.",Dynamic analysis; Trace collection; User profiling,Codes (standards); Computer architecture; Computer software maintenance; Computer supported cooperative work; High level languages; Information retrieval; Java programming language; Reverse engineering; Software engineering; Dynamic analysis; Software refactoring; Trace collection; User profiling; World Wide Web,Dynamic analysis;Trace collection;User profiling;Codes (standards);Computer architecture;Computer software maintenance;Computer supported cooperative work;High level languages;Information retrieval;Java programming language;Reverse engineering;Software engineering;Software refactoring;World Wide Web,"Antoniol, G.; Res. Centre on Software Technology, University of Sannio, Department of Engineering, Palazzo ex Poste, Via Traiano, 1, 82100 Benevento, Italy; email: antoniol@ieee.org",,,,,,,15345351,,,,English,Proc. Eur. Conf. Software Maint. Reeng.,Conference Paper,Scopus,,2-s2.0-3042773709,,Italy,ieee.org,,,"Antoniol G., Di Penta M."
"Li, H.Q., Thompson, S.",A Domain-Specific Language for Scripting Refactorings in Erlang,2012,"FUNDAMENTAL APPROACHES TO SOFTWARE ENGINEERING, FASE 2012",7212,,,501,515,15,16,,,"[Li, Huiqing; Thompson, Simon] Univ Kent, Sch Comp, Canterbury CT2 7NZ, Kent, England",,"Refactoring is the process of changing the design of a program without changing its behaviour. Many refactoring tools have been developed for various programming languages; however, their support for composite refactorings - refactorings that are composed from a number of primitive refactorings - is limited. In particular, there is a lack of powerful and easy-to-use frameworks that allow users to script their own large-scale refactorings efficiently and effectively. This paper introduces the domain-specific language framework of Wrangler - a refactoring and code inspection tool for Erlang programs that allows users to script composite refactorings, test them and apply them on the fly. The composite refactorings are fully integrated into Wrangler and so can be previewed, applied and 'undone' interactively.",analysis; API; DSL; Erlang; refactoring; transformation; Wrangler,,analysis;API;DSL;Erlang;refactoring;transformation;Wrangler,H.Li@kent.ac.uk; S.J.Thompson@kent.ac.uk,"DeLara, J; Zisman, A","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",15th International Conference on Fundamental Approaches to Software Engineering (FASE),"Tallinn, ESTONIA","MAR 24-APR 01, 2012",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-28872-2,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000343044000034,2-s2.0-84859150236,United Kingdom,kent.ac.uk,Univ Kent,"Univ Kent, United Kingdom","Li, Huiqing; Thompson, Simon"
"Li H., Chen T.H.P., Hassan A.E., Nasser M., Flora P.",Adopting autonomic computing capabilities in existing large-scale systems: An industrial experience report,2018,Proceedings - International Conference on Software Engineering,,,,1,10,,2,10.1145/3183519.3183544,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85049686044&doi=10.1145%2f3183519.3183544&partnerID=40&md5=d3f3e411e3e0b815a8c8e8b760c7b1c0,"Queen's University, Canada; Concordia University, Canada; BlackBerry, Canada","Li, H., Queen's University, Canada; Chen, T.-H.P., Concordia University, Canada; Hassan, A.E., Queen's University, Canada; Nasser, M., BlackBerry, Canada; Flora, P., BlackBerry, Canada","In current DevOps practice, developers are responsible for the operation and maintenance of software systems. However, the human costs for the operation and maintenance grow fast along with the increasing functionality and complexity of software systems. Autonomic computing aims to reduce or eliminate such human intervention. However, there are many existing large systems that did not consider autonomic computing capabilities in their design. Adding autonomic computing capabilities to these existing systems is particularly challenging, because of 1) the significant amount of efforts that are required for investigating and refactoring the existing code base, 2) the risk of adding additional complexity, and 3) the difficulties for allocating resources while developers are busy adding core features to the system. In this paper, we share our industrial experience of re-engineering autonomic computing capabilities to an existing large-scale software system. Our autonomic computing capabilities effectively reduce human intervention on performance configuration tuning and significantly improve system performance. In particular, we discuss the challenges that we encountered and the lessons that we learned during this re-engineering process. For example, in order to minimize the change impact to the original system, we use a variety of approaches (e.g., aspect-oriented programming) to separate the concerns of autonomic computing from the original behaviour of the system. We also share how we tested such autonomic computing capabilities under different conditions, which has never been discussed in prior work. As there are numerous large-scale software systems that still require expensive human intervention, we believe our experience provides valuable insights to software practitioners who wish to add autonomic computing capabilities to these existing large-scale software systems. © 2018 ACM.",Autonomic computing; Performance engineering; Software re-engineering; Software testing,Aspect oriented programming; Computer software maintenance; Reengineering; Software testing; Autonomic Computing; Human intervention; Industrial experience; Large-scale software systems; Operation and maintenance; Performance engineering; Software practitioners; Software reengineering; Large scale systems,Autonomic computing;Performance engineering;Software re-engineering;Software testing;Aspect oriented programming;Computer software maintenance;Reengineering;Human intervention;Industrial experience;Large-scale software systems;Operation and maintenance;Software practitioners;Software reengineering;Large scale systems,,,,,,,IEEE Computer Society,02705257,9781450356596,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-85049686044,,Canada,No email,,,"Li H., Chen T.-H.P., Hassan A.E., Nasser M., Flora P."
"Licorish, S.A., Holvitie, J., Hyrynsalmi, S., Leppanen, V., Spinola, R.O., Mendes, T.S., MacDonell, S.G., Buchan, J.",Adoption and Suitability of Software Development Methods and Practices,2016,2016 23RD ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC 2016),,,,369,372,4,2,10.1109/APSEC.2016.47,,"[Licorish, Sherlock A.] Univ Otago, Dept Informat Sci, POB 56, Dunedin 9054, New Zealand; [Holvitie, Johannes; Hyrynsalmi, Sami; Leppanen, Ville] Univ Turku, Dept Informat Technol, FI-20014 Turku, Finland; [Spinola, Rodrigo O.; Mendes, Thiago S.] Univ Salvador, Fraunhofer Project Ctr Software, Salvador, BA, Brazil; [Spinola, Rodrigo O.; Mendes, Thiago S.] Univ Salvador, Syst Engn UFBA, Salvador, BA, Brazil; [MacDonell, Stephen G.; Buchan, Jim] Auckland Univ Technol, Sch Comp & Math Sci, Private Bag 92006, Auckland 1142, New Zealand",,"In seeking to complement consultants' and tool vendors' reports, there has been an increasing academic focus on understanding the adoption and use of software development methods and practices. We surveyed practitioners working in Brazil, Finland, and New Zealand in a transnational study to contribute to these efforts. Among our findings we observed that most of the 184 practitioners in our sample focused on a small portfolio of projects that were of short duration. In addition, Scrum and Kanban were used most; however, some practitioners also used conventional methods. Coding Standards, Simple Design and Refactoring were used most by practitioners, and these practices were held to be largely suitable for project and process management. Our evidence points to the need to properly understand and support a wide range of software methods.",Software development methods; Agile practices; Adoption and suitability; Empirical studies; Survey,,Software development methods;Agile practices;Adoption and suitability;Empirical studies;Survey,sherlock.licorish@otago.ac.nz; jjholv@utu.fi; sthyry@utu.fi; ville.leppanen@utu.fi; rodrigo.spinola@pro.unifacs.br; thiagomendes@dcc.ufba.br; smacdone@aut.ac.nz; jim.buchan@aut.ac.nz,"Potanin, A; Murphy, GC; Reeves, S; Dietrich, J","345 E 47TH ST, NEW YORK, NY 10017 USA",23rd Asia-Pacific Software Engineering Conference (APSEC),"Hamilton, NEW ZEALAND","DEC 06-09, 2016",IEEE,1530-1362,978-1-5090-5575-3,,,English,ASIA PAC SOFWR ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000406108100051,2-s2.0-85018486669,New Zealand;Finland;Brazil,otago.ac.nz,Univ Otago;Univ Turku;Univ Salvador;Auckland Univ Technol,"Univ Otago, New Zealand;Univ Turku, Finland;Univ Salvador, Brazil;Auckland Univ Technol, New Zealand","Licorish, Sherlock A.; Holvitie, Johannes; Hyrynsalmi, Sami; Leppanen, Ville; Spinola, Rodrigo O.; Mendes, Thiago S.; MacDonell, Stephen G.; Buchan, Jim"
"Cassell K., Andreae P., Groves L.",A dual clustering approach to the extract class refactoring,2011,SEKE 2011 - Proceedings of the 23rd International Conference on Software Engineering and Knowledge Engineering,,,,77,82,,3,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855547930&partnerID=40&md5=d66abd7bd1d1a365203b4ec15db06221,"School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand","Cassell, K., School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand; Andreae, P., School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand; Groves, L., School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand","Large classes typically have many internal interactions between their members, making them difficult to understand and expensive to maintain. When large classes are split into smaller, more cohesive classes, maintainability costs can be reduced; however, the very complexity that makes the classes costly to maintain also makes them difficult to split. Our ExtC tool uses clustering techniques to help solve this problem. By clustering based on the structural characteristics of the class, followed by additional clustering based on semantics, ExtC divides the members of large classes into groups. These groups provide the basis for refactoring the large classes into smaller, more cohesive ones.",Betweenness; Clustering; Cohesion; Extract class; Graph theory; Maintainability; Object-oriented; Refactoring,Betweenness; Clustering; Cohesion; Extract class; Object oriented; Refactorings; Graph theory; Knowledge engineering; Maintainability; Semantics; Software engineering,Betweenness;Clustering;Cohesion;Extract class;Graph theory;Maintainability;Object-oriented;Refactoring;Object oriented;Refactorings;Knowledge engineering;Semantics;Software engineering,"Cassell, K.; School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand; email: kcassell@ecs.vuw.ac.nz",,,,,,,,1891706292; 9781891706295,,,English,SEKE - Proc. Int. Conf. Softw. Eng. Knowl. Eng.,Conference Paper,Scopus,,2-s2.0-84855547930,,New Zealand,ecs.vuw.ac.nz,,,"Cassell K., Andreae P., Groves L."
"Fontana, F.A., Zanoni, M., Zanoni, F.",A Duplicated Code Refactoring Advisor,2015,"AGILE PROCESSES, IN SOFTWARE ENGINEERING, AND EXTREME PROGRAMMING, XP 2015",212,,,3,14,12,3,10.1007/978-3-319-18612-2_1,,"[Fontana, Francesca Arcelli; Zanoni, Marco; Zanoni, Francesco] Univ Milano Bicocca, Viale Sarca 336, I-20126 Milan, Italy",,"Refactoring is one of the key practices in Extreme Programming and other agile methods. Duplicated code is one of the most pervasive and pungent smells to remove from source code through refactoring. Duplicated code has been largely studied in the literature, and different types of duplications, or ""clones"", have been identified. Some studies analyzed in details the problems caused by clones in the code, others outlined also the difficulties in removing clones, and the cases in which it could be better not removing them. The refactoring cost for removing clones can be very high, also due to the different choices on the possible refactoring steps. In this paper, we describe our approach and tool developed with the aim to suggest the best refactorings to remove clones in Java code. Our approach is based on the classification of the clones in terms of their location in a class hierarchy, and allows to choose among a restricted set of refactorings, which are then evaluated using multiple criteria. We provide a validation of the effectiveness of the approach.",Clone refactoring; Refactoring advisor; Empirical study,CLONES,Clone refactoring;Refactoring advisor;Empirical study;CLONES,arcelli@disco.unimib.it; marco.zanoni@disco.unimib.it; f.zanoni1@campus.unimib.it,"Lassenius, C; Dingsoyr, T; Paasivaara, M","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",16th International Conference on Agile Software Development (XP),"Helsinki, FINLAND","MAY 25-29, 2015",SPRINGER-VERLAG BERLIN,1865-1348,978-3-319-18612-2; 978-3-319-18611-5,,,English,LECT NOTES BUS INF P,Proceedings Paper,WoS,Computer Science,WOS:000373725800001,2-s2.0-84942780436,Italy,disco.unimib.it,Univ Milano Bicocca,"Univ Milano Bicocca, Italy","Fontana, Francesca Arcelli; Zanoni, Marco; Zanoni, Francesco"
"Balazinska, M., Merlo, E., Dagenais, M., Lague, B., Kontogiannis, K.",Advanced clone-analysis to support object-oriented system refactoring,2000,SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS,,,,98,107,10,78,10.1109/WCRE.2000.891457,,"Ecole Polytech, Dept Elect & Comp Engn, Down Stn, Montreal, PQ H3C 3A7, Canada",,"Manual source code copy and modification is often used by programmers as an easy means for functionality reuse. Nevertheless, such practice produces duplicated pieces of code or clones whose consistent maintenance might be difficult to achieve. It also creates implicit links between classes sharing a functionality. Clones are therefore good candidates for system redesign. This paper presents a novel approach for computer-aided clone-based object-oriented system refactoring. The approach is based on an advanced clone analysis which focuses oil the extraction of clone differences and their interpretation in terms of programming language entities. It also focuses on the study of contextual dependencies of cloned methods. The clone analysis has been applied to JDK 1.1.5; a large scale system of 150 KLOC.",clone analysis; refactoring; redesign; maintenance,,clone analysis;refactoring;redesign;maintenance,magda@casi.polymtl.ca; ettore.merlo@polymtl.ca; michel.dagenais@polymtl.ca,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",7th Working Conference on Reverse Engineering,"BRISBANE, AUSTRALIA","NOV 23-25, 2000",IEEE COMPUTER SOC,,0-7695-0881-2,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000165732200011,,Canada,casi.polymtl.ca,Dept Elect & Comp Engn,"Dept Elect & Comp Engn, Canada","Balazinska, M; Merlo, E; Dagenais, M; Lague, B; Kontogiannis, K"
"Tanhaei, M., Habibi, J., Mirian-Hosseinabadi, S.H.",A Feature Model Based Framework for Refactoring Software Product Line Architecture,2016,JOURNAL OF COMPUTER SCIENCE AND TECHNOLOGY,31,5,,951,986,36,4,10.1007/s11390-016-1674-y,,"[Tanhaei, Mohammad; Habibi, Jafar; Mirian-Hosseinabadi, Seyed-Hassan] Sharif Univ Technol, Dept Comp Engn, Tehran 111559517, Iran",,"Software product line (SPL) is an approach used to develop a range of software products with a high degree of similarity. In this approach, a feature model is usually used to keep track of similarities and differences. Over time, as modifications are made to the SPL, inconsistencies with the feature model could arise. The first approach to dealing with these inconsistencies is refactoring. Refactoring consists of small steps which, when accumulated, may lead to large-scale changes in the SPL, resulting in features being added to or eliminated from the SPL. In this paper, we propose a framework for refactoring SPLs, which helps keep SPLs consistent with the feature model. After some introductory remarks, we describe a formal model for representing the feature model. We express various refactoring patterns applicable to the feature model and the SPL formally, and then introduce an algorithm for finding them in the SPL. In the end, we use a real-world case study of an SPL to illustrate the applicability of the framework introduced in the paper.",software product line; feature model; refactoring; software architecture,,software product line;feature model;refactoring;software architecture,tanhaei@ce.sharif.edu; jhabibi@sharif.edu; hmirian@sharif.edu,,"16 DONGHUANGCHENGGEN NORTH ST, BEIJING 100717, PEOPLES R CHINA",,,,SCIENCE PRESS,1000-9000,,,,English,J COMPUT SCI TECH-CH,Article,WoS,Computer Science,WOS:000383055100008,2-s2.0-84984908557,Iran,ce.sharif.edu,Sharif Univ Technol,"Sharif Univ Technol, Iran","Tanhaei, Mohammad; Habibi, Jafar; Mirian-Hosseinabadi, Seyed-Hassan"
"Kim M., Zimmermann T., Nagappan N.",A field study of refactoring challenges and benefits,2012,"Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, FSE 2012",,,,,,,86,10.1145/2393596.2393655,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871317722&doi=10.1145%2f2393596.2393655&partnerID=40&md5=d078950a6144a3be198857e6f94397ea,"University of Texas, Austin, TX, United States; Microsoft Research, Redmond, WA, United States","Kim, M., University of Texas, Austin, TX, United States; Zimmermann, T., Microsoft Research, Redmond, WA, United States; Nagappan, N., Microsoft Research, Redmond, WA, United States","It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multi-year, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds that the binary modules refactored by this team experienced significant reduction in the number of inter-module dependencies and post-release defects, indicating a visible benefit of refactoring. © 2012 ACM.",churn; component dependencies; defects; empirical study; refactoring; software evolution,churn; component dependencies; Empirical studies; Refactorings; Software Evolution; Computer software selection and evaluation; Cosine transforms; Defects; Semantics; Software engineering; Surveys,churn;component dependencies;defects;empirical study;refactoring;software evolution;Empirical studies;Refactorings;Computer software selection and evaluation;Cosine transforms;Semantics;Software engineering;Surveys,"Kim, M.; University of Texas, Austin, TX, United States; email: miryung@ece.utexas.edu",,,,,,,,9781450316149,,,English,"Proc. ACM SIGSOFT Int. Symp. Found. Softw. Eng., FSE",Conference Paper,Scopus,,2-s2.0-84871317722,,United States,ece.utexas.edu,,,"Kim M., Zimmermann T., Nagappan N."
"Cordero, V., de Guzman, I.G.R., Piattini, M.",A first approach on legacy system energy consumption measurement,2015,2015 IEEE 10TH INTERNATIONAL CONFERENCE ON GLOBAL SOFTWARE ENGINEERING WORKSHOPS (ICGSEW 2015),,,,35,43,9,3,10.1109/ICGSEW.2015.15,,"[Cordero, Victor; Garcia-Rodriguez de Guzman, Ignacio; Piattini, Mario] Univ Castilla La Mancha, Inst Informat Technol & Syst, Ciudad Real, Spain",,"Nowadays, software sustainability is growing in importance. Not only IT infrastructure is becoming greener, but also software. It is possible to find methods and methodologies intended to produce more sustainable software with lower power consumption. In spite the slow evolution of software engineering towards ""Green software"", there exist a huge amount of legacy systems still running in organizations. Is then necessary to develop such systems from scratch in order to make them more sustainable? Probably, the most logical and appropriate answer for this question is no, since existing software can be refactored in order to improve its greenability quality characteristic. As a first step towards power consumption improvement, the authors propose a tool to analyze legacy systems in order to detect parts of the system with higher energy consumption. Using the profiling technique, the proposed tool instrument legacy Java systems in order to keep track of its execution. This information, together with the energy consumption (logged by means a data logger hardware), enables the engineer to analyze legacy system consumption detecting energy peaks in the system (e.g. the PC). The analysis gives the engineer evidences about candidates to be refactored in order to reduce energy consumption.",software energy consumption; energy consumption; profiling; software sustainability; energy data logger; reverse engineering,GREEN,software energy consumption;energy consumption;profiling;software sustainability;energy data logger;reverse engineering;GREEN,Victor.Cordero@alu.uclm.es; Ignacio.GRodriguez@uclm.es; Mario.Piattini@uclm.es,,"345 E 47TH ST, NEW YORK, NY 10017 USA",10th IEEE International Conference on Global Software Engineering (ICGSE),"Univ Castilla La Manchas, Comp Sci Fac, Ciudad Real, SPAIN","JUL 13-16, 2015",IEEE,,978-1-4799-9874-6,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380398800007,,Spain,alu.uclm.es,Univ Castilla La Mancha,"Univ Castilla La Mancha, Spain","Cordero, Victor; Garcia-Rodriguez de Guzman, Ignacio; Piattini, Mario"
"Pold, J., Kalja, A., Robal, T.",A five step refactoring process: Improving software design properly,2008,DATABASES AND INFORMATION SYSTEMS,,,,37,48,12,1,,,"[Pold, Janari; Kalja, Ahto; Robal, Tarmo] Tallinn Univ Technol, Dept Comp Engn, EE-12618 Tallinn, Estonia",,"Software development is a complex process consisting of well-defined activities. New features are added into the system during software development and also in the maintenance phase. Thus, the design of the system is changing continuously, which could render the design patterns used at the starting phase to hinder further development process. The authors propose a refactoring process to overcome these problems. The restructuring process can be compared to simplifying mathematical equations, using repository of approved refactoring steps. The 5-step refactoring process defines the activities executed in each step to tackle the problems of design ambiguity. As a result the design and code of the system are restructured to make it more easily understandable and extendable. Thus, shortening the development phase when new features are added and making new code addition easier for the developer, saving limited resources, such as time and money.",refactoring; refactoring process; improving software design; repairing architecture,,refactoring;refactoring process;improving software design;repairing architecture,,"Haav, HM; Kalja, A","NARVA MNT 29, TALLINN, 10120, ESTONIA",8th International Baltic Conference on Databases and Information Systems,"Tallinn, ESTONIA","JUN 02-05, 2008",TALLINN UNIV TECH PRESS,,978-9985-59-789-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000258025100004,,Estonia,No email,Tallinn Univ Technol,"Tallinn Univ Technol, Estonia","Pold, Janari; Kalja, Ahto; Robal, Tarmo"
"Le, H.A., Dao, T.H., Truong, N.T.",A Formal Approach to Checking Consistency in Software Refactoring,2017,MOBILE NETWORKS & APPLICATIONS,22,2,,356,366,11,1,10.1007/s11036-017-0807-z,,"[Hong Anh Le] Hanoi Univ Min & Geol, Hanoi, Vietnam; [Thi-Huong Dao; Ninh-Thuan Truong] Univ Engn & Technol, VNU, Hanoi, Vietnam",,"In software development, refactoring is a process that improves the system internal structure without altering its external behavior. Applying design patterns, which are common reusable solutions of several kinds of problems is widely adopted. This technique, however, raises a challenging issue that after applying design patterns the software system may not preserve some certain behavioral properties. This paper proposes a new approach to checking consistency between original software system and its evolution at both design and implementation phases. First, we formalize elements of software designs and programs. Methods, based on these formalizations, are proposed for verifying the design and implementation of the system. Finally, the paper presents a case study of Adaptive Road Traffic Control system to illustrate the proposed approach in detail.",Refactoring; Design patterns; Consistency; Formal approach,,Refactoring;Design patterns;Consistency;Formal approach,lehonganh@humg.edu.vn; huongdt.di12@vnu.edu.vn; thuantn@vnu.edu.vn,,"233 SPRING ST, NEW YORK, NY 10013 USA",,,,SPRINGER,1383-469X,,,,English,MOBILE NETW APPL,Article,WoS,Computer Science; Telecommunications,WOS:000399021400021,2-s2.0-85010723111,Vietnam,humg.edu.vn,Hanoi Univ Min & Geol;Univ Engn & Technol,"Hanoi Univ Min & Geol, Vietnam;Univ Engn & Technol, Vietnam",Hong Anh Le; Thi-Huong Dao; Ninh-Thuan Truong
"Van Der Straeten, R., Jonckers, V., Mens, T.",A formal approach to model refactoring and model refinement,2007,SOFTWARE AND SYSTEMS MODELING,6,2,,139,162,24,22,10.1007/s10270-006-0025-9,,"[Van Der Straeten, Ragnhild; Jonckers, Viviane] Vrije Univ Brussels, Syst & Software Engn Lab, B-1050 Brussels, Belgium; [Mens, Tom] Univ Mons, Serv Genie Logiciel, B-7000 Mons, Belgium",,"Model-driven engineering is an emerging software engineering approach that relies on model transformation. Typical kinds of model transformations are model refinement and model refactoring. Whenever such a transformation is applied to a consistent model, we would like to know whether the consistency is preserved by the transformation. Therefore, in this article, we formally define and explore the relation between behaviour inheritance consistency of a refined model with respect to the original model, and behaviour preservation of a refactored model with respect to the original model. As it turns out, there is a strong similarity between these notions of behaviour consistency and behaviour preservation. To illustrate this claim, we formalised the behaviour specified by UML 2.0 sequence and protocol state machine diagrams. We show how the reasoning capabilities of description logics, a decidable fragment of first-order logic, can be used in a natural way to detect behaviour inconsistencies. These reasoning capabilities can be used in exactly the same way to detect behaviour preservation violations during model refactoring. A prototype plug-in in a UML CASE tool has been developed to validate our claims.",model-driven engineering; UML 2.0; description logics; model refinement; model refactoring; behaviour preservation,UML; TRANSFORMATIONS; CONSISTENCY; FRAMEWORK; DIAGRAMS,model-driven engineering;UML 2.0;description logics;model refinement;model refactoring;behaviour preservation;UML;TRANSFORMATIONS;CONSISTENCY;FRAMEWORK;DIAGRAMS,rvdstrae@vub.ac.be; vejoncke@ssel.vub.ac.be; tom.mens@umh.ac.be,,"TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY",7th Satellite Activities Conference on UML Modeling Languages and Applications,"Lisbon, PORTUGAL","OCT 11-15, 2004",SPRINGER HEIDELBERG,1619-1366,,,,English,SOFTW SYST MODEL,Article; Proceedings Paper,WoS,Computer Science,WOS:000254667700003,2-s2.0-34249986095,Belgium,vub.ac.be,Vrije Univ Brussels;Univ Mons,"Vrije Univ Brussels, Belgium;Univ Mons, Belgium","Van Der Straeten, Ragnhild; Jonckers, Viviane; Mens, Tom"
"Leitao, A.M.",A formal pattern language for refactoring of Lisp programs,2002,"SIXTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS",,,,186,192,7,5,10.1109/CSMR.2002.995803,,"Univ Tecn Lisboa, Dept Informat Engn, Grp Inteligencia Artificial, Inst Super Tecn, P-1049001 Lisbon, Portugal",,"Refactoring tools are extremely important to prevent errors in legacy systems restructuring. Unfortunately, to be effective, these tools require huge computer resources that cause unacceptable inefficiencies or limit the size of the restructured programs or even the programming language expressiveness. Previous approaches also made it difficult for the programmer to extend the tool with new refactoring operations. Pattern languages exist that describe several techniques to refactor a program. However they are usually described at a very abstract level that is understandable only by a human programmer and that is hard to implement in refactoring tools. We present a formal pattern language that solves these problems. The pattern language is used to define refactoring operations that can be as powerful as is computationally possible but that are very easy to write. The language simplicity also allows for the automatic learning of new refactoring operations from the observation of manual code transformations.",,,,aml@gia.ist.utl.pt,"Gyimothy, T; EAbreu, FB","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",6th European Conference on Software Maintenance and Reengineering (CSMR 2002),"BUDAPEST, HUNGARY","MAR 11-13, 2002",IEEE COMPUTER SOC,,0-7695-1438-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000175586300019,2-s2.0-1842601998,Portugal,gia.ist.utl.pt,Dept Informat Engn,"Dept Informat Engn, Portugal","Leitao, AM"
"Finnigan, J.V., Blanchette, J.",A forward-looking software reuse strategy,2008,"2008 IEEE AEROSPACE CONFERENCE, VOLS 1-9",,,,4124,4132,9,1,,,"[Finnigan, Jeremiah Vincent; Blanchette, Jeffrey] Johns Hopkins Univ, Appl Phys Lab, Laurel, MD 20723 USA",,"Instrument Ground Support Equipment (IGSE) software reuse from one mission to the next is a practical necessity in the aerospace industry. Schedule and budget constraints often dictate significant reuse of heritage designs when proposing, designing and implementing IGSE for new missions. This practice often results in a fight coupling between the IGSE designs of successive missions. In situations such as this, a forward-looking software reuse strategy can be very effective in reducing the cost of future IGSE designs, and improving the software quality of the IGSE for both current and future missions. A forward-looking software reuse strategy is one that anticipates the future direction of IGSE design/architecture and factors that anticipated/planned direction into the architecture of the current design. This typically takes the form of reusable interfaces that partition the problem space into encapsulated pieces that can be easily replaced or refactored in future designs. Rather than attempting to describe the technique in abstract terms (which can become rather nebulous), we'll illustrate the point using a specific example of how this technique was applied to the design of the command-generating portion of the MErcury Surface, Space ENvironemnt, GEochemistry, and Ranging (MESSENGER) mission IGSE software. We'll show that a forward-looking software reuse strategy resulted in higher quality IGSE software for the MESSENGER mission, and also higher quality and less costly IGSE software for subsequent missions that reused this software. (1 2).",,,,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",2008 IEEE Aerospace Conference,"Big Sky, MT","MAR 01-08, 2008",IEEE,1095-323X,978-1-4244-1487-1,,,English,AEROSP CONF PROC,Proceedings Paper,WoS,Engineering,WOS:000258321202108,,United States,No email,Johns Hopkins Univ,"Johns Hopkins Univ, United States","Finnigan, Jeremiah Vincent; Blanchette, Jeffrey"
"Overbey, J.L., Behrang, F., Hafiz, M.",A Foundation for Refactoring C with Macros,2014,22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014),,,,75,85,11,3,10.1145/2635868.2635908,,"[Overbey, Jeffrey L.; Behrang, Farnaz; Hafiz, Munawar] Auburn Univ, Dept Comp Sci & Software Engn, Auburn, AL 36849 USA",,"This paper establishes the concept of preprocessor dependences as a foundation for building automated refactoring tools that transform source code containing lexical macros and conditional compilation directives, such as those provided by the C preprocessor (CPP). We define a preprocessor dependence graph (PPDG) that models the relationships among macro definitions, macro invocations, and conditional compilation directives in a file-the relationships that must be maintained for the semantics of the C preprocessor to be preserved. For many refactorings, a tool can construct a PPDG from the code before and after it is transformed, then perform a linear-time comparison of the two graphs to determine whether the refactoring will operate correctly in the presence of macros and conditional compilation directives. The proposed technique was implemented in OpenRefactory/C and tested by applying refactorings to GNU Coreutils version 8.21. Empirical results indicate that the technique is effective; it successfully handled refactoring scenarios in which Eclipse CDT, Visual Assist X, and XRefactory all refactored code incorrectly.",Refactoring; C; Preprocessor,,Refactoring;C;Preprocessor,joverbey@auburn.edu; fzb0012@auburn.edu; munawar@auburn.edu,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",22nd ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE),"Hong Kong, HONG KONG","NOV 16-21, 2014",ASSOC COMPUTING MACHINERY,,978-1-4503-3056-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000452049800007,2-s2.0-84986893087,United States,auburn.edu,Auburn Univ,"Auburn Univ, United States","Overbey, Jeffrey L.; Behrang, Farnaz; Hafiz, Munawar"
"Salant, E., Leitner, P., Wallbom, K., Ahtes, J.",A Framework for a Cost-Efficient Cloud Ecosystem,2015,ECHALLENGES E-2015 CONFERENCE PROCEEDINGS,,,,,,9,0,,,"[Salant, Eliot] IBM Res Haifa, Univ Campus, IL-31905 Haifa, Israel; [Leitner, Philipp] Univ Zurich, Software Evolut & Architecture Lab, CH-8006 Zurich, Switzerland; [Wallbom, Karl] Cloudmore, Stockholm, Sweden; [Ahtes, James] Atos, Barcelona 08018, Spain",,"Cloud Computing has developed rapidly over the last ten years with worldwide spending on public and private cloud hosting passing the $32bn. mark this year, and savings to businesses using the cloud are typically stated as better than 30% due to the cloud's ability to better take advantage of economies of scale. Yet, in actuality, in commercial data centres the utilization of resources still remain low. In this paper we introduce a new approach from CloudWave which uses user-defined performance goals as well as monitoring across the Cloud ecosystem as a means for guiding runtime adaptation of both the cloud infrastructure and the hosted service to improve overall performance. In addition, inspired by the current industry trend of DevOps methodology, CloudWave feeds runtime performance and monitoring insights back to the DevOps engineers to enable identification and refactoring of problematic code sections. The potential impact for improving data centre efficiency is huge - as Google researcher John Wilkes has pointed out that at such large scales, ""A few percent here, a few percent there, and all of the sudden, you're talking about huge amounts of money"". After two years of research, the CloudWave platform is starting to test its ideas on actual applications, which in turn is exposing new avenues for research.",,,,salant@il.ibm.com; leitner@ifi.uzh.ch; karl.wallbom@cloudmore.com; james.ahtes@atos.net,,"345 E 47TH ST, NEW YORK, NY 10017 USA",eChallenges e-2015 Conference Proceedings,"vilnius, LITHUANIA","NOV 25-26, 2015",IEEE,,978-1-9058-2453-3,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380457600029,,Israel;Switzerland;Sweden;Spain,il.ibm.com,IBM Res Haifa;Univ Zurich;Cloudmore;Atos,"IBM Res Haifa, Israel;Univ Zurich, Switzerland;Cloudmore, Sweden;Atos, Spain","Salant, Eliot; Leitner, Philipp; Wallbom, Karl; Ahtes, James"
"Coutu A., Serino C., Smith S., Stoecklin S.",A framework for an adaptive refactoring tool,2006,WSEAS Transactions on Computers,5,8,,1720,1725,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33746455569&partnerID=40&md5=7164e24a6f5e52ff04e033d4b3466635,"Aerospace and Telecommunications Engineering Support Squadron, Canadian Forces Bases, Trenton, ON, Canada; School of Business, North Carolina Central University, Durham, NC, United States; Computer and Information Sciences Department, East Tennessee State University, Johnson City, TN, United States; Computer Science Department, Florida State University, Panama City, FL, United States","Coutu, A., Aerospace and Telecommunications Engineering Support Squadron, Canadian Forces Bases, Trenton, ON, Canada; Serino, C., School of Business, North Carolina Central University, Durham, NC, United States; Smith, S., Computer and Information Sciences Department, East Tennessee State University, Johnson City, TN, United States; Stoecklin, S., Computer Science Department, Florida State University, Panama City, FL, United States","Refactoring is the process of making changes to the internal structure of existing code without changing the external behavior of that code, The resulting code is more flexible, reusable, and maintainable. While refactoring is becoming more popular in the software development community, manual refactoring can be a long and tedious process. Tools that support refactoring are becoming available; however, many provide only limited types of refactorings and require heavy user intervention. This paper presents an open source framework for an adaptive refactoring tool. The framework allows easy addition of new refactorings or modification of existing ones. An implementation of the framework is described in this paper.",Design patterns; Refractoring; Software engineering; Software tools and environments,Adaptive systems; Computer software maintenance; Computer software portability; Computer software reusability; Design patterns; Open source framework; Refactoring tool; User intervention; Computer aided software engineering,Design patterns;Refractoring;Software engineering;Software tools and environments;Adaptive systems;Computer software maintenance;Computer software portability;Computer software reusability;Open source framework;Refactoring tool;User intervention;Computer aided software engineering,"Coutu, A.; Aerospace and Telecommunications Engineering Support Squadron, Canadian Forces Bases, Trenton, ON, Canada",,,,,,,11092750,,,,English,WSEAS Trans. Comput.,Article,Scopus,,2-s2.0-33746455569,,Canada;United States,No email,,,"Coutu A., Serino C., Smith S., Stoecklin S."
"Kort J., Lammel R.",A framework for datatype transformation,2003,Electronic Notes in Theoretical Computer Science,82,3,,463,482,,1,10.1016/S1571-0661(05)82623-4,https://www.scopus.com/inward/record.uri?eid=2-s2.0-19044373606&doi=10.1016%2fS1571-0661%2805%2982623-4&partnerID=40&md5=5b72f450d7764ecbc8dac9441b7018ca,"Universiteit Van Amsterdam, Netherlands; Centrum Voor Wiskunde en Informatica, Netherlands; Vrije Universiteit Van Amsterdam, Netherlands","Kort, J., Universiteit Van Amsterdam, Netherlands; Lämmel, R., Centrum Voor Wiskunde en Informatica, Netherlands, Vrije Universiteit Van Amsterdam, Netherlands","We study one dimension in program evolution, namely the evolution of the datatype declarations in a program. To this end, a suite of basic transformation operators is designed. We cover structure-preserving refactorings, but also structure-extending and -reducing adaptations. Both the object programs that are subject to datatype transformations, and the meta programs that encode datatype transformations are functional p rograms. © 2003 Published by Elsevier Science B.V.",,Datatype transformation; Functional program refactoring; Generic meta programming; Operators; Computer operating systems; Computer software; Data structures; Encoding (symbols); Graphical user interfaces; Mathematical transformations; Syntactics; Database systems,Datatype transformation;Functional program refactoring;Generic meta programming;Operators;Computer operating systems;Computer software;Data structures;Encoding (symbols);Graphical user interfaces;Mathematical transformations;Syntactics;Database systems,Universiteit Van AmsterdamNetherlands,Skowron A.Szczuka M.,,,,,,15710661,,,,English,Electron. Notes Theor. Comput. Sci.,Conference Paper,Scopus,,2-s2.0-19044373606,,Netherlands,No email,,,"Kort J., Lammel R."
"Ivkovic, I., Kontogiannis, K.",A framework for software architecture refactoring using model transformations and semantic annotations,2006,"10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS",,,,133,+,2,9,,,"[Ivkovic, Igor; Kontogiannis, Kostas] Univ Waterloo, Dept Elect & Comp Engn, Waterloo, ON N2L 3G1, Canada",,"Software-intensive systems evolve continuously under the pressure of new and changing requirements, generally leading to an increase in overall system complexity. In this respect, to improve quality and decrease complexity, software artifacts need to be restructured and refactored throughout their lifecycle. Since software architecture artifacts represent the highest level of implementation abstraction, and constitute the first step in mapping requirements to design, architecture refactorings can be considered as the first step in the quest of maintaining system quality during evolution. In this paper, we introduce an approach for refactoring software architecture artifacts using model transformations and quality improvement semantic annotations. First, the conceptual architecture view is represented as a UML 2.0 profile with corresponding stereotypes. Second, instantiated architecture models are annotated using elements of the refactoring context, including soft-goals, metrics, and constraints. Finally, the actions that are most suitable for the given refactoring context are applied after being selected from a set of possible refactorings. The approach is applied to a simple example, demonstrating refactoring transformations for improved maintainability, performance, and security.",software evolution; software architecture refactoring; model transformations; UML profiles; quality driven re-engineering,,software evolution;software architecture refactoring;model transformations;UML profiles;quality driven re-engineering,iivkovic@swen.uwaterloo.ca; kostas@swen.uwaterloo.ca,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",10th European Conference on Software Maintenance and Reengineering,"Bari, ITALY","MAR 22-24, 2006",IEEE COMPUTER SOC,,0-7695-2536-9,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000237194400013,2-s2.0-38149018766,Canada,swen.uwaterloo.ca,Univ Waterloo,"Univ Waterloo, Canada","Ivkovic, Igor; Kontogiannis, Kostas"
"Haendler T., Neumann G.",A framework for the assessment and training of software refactoring competences,2019,"IC3K 2019 - Proceedings of the 11th International Joint Conference on Knowledge Discovery, Knowledge Engineering and Knowledge Management",3,,,307,316,,1,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074176822&partnerID=40&md5=e2f9c576ee9e46a0aee26b7e22e243dd,"Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","Haendler, T., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria; Neumann, G., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","Long-living software systems are becoming increasingly complex and difficult to maintain. Software refactoring is considered important to achieve maintainability and extensibility of a software system over time. In practice, it is still often neglected, partly because of costs, the perceived risks of collateral damage and difficulties of individuals working on certain components of complex software. It is therefore important for software projects that software developers have the appropriate skills and competences to efficiently perform software refactoring. However, so far there is no systematization of competences in software refactoring to guide in the assessment or training of competences, e.g., for planning or evaluating training activities and paths. In this paper, we address this need by presenting a competence framework for software refactoring by applying Bloom's revised taxonomy for educational objectives. In particular, we specify competence levels by combining knowledge and cognitive-process dimensions. Via a case study with two existing training environments (i.e. a tutoring system and a serious game), we demonstrate by example that the framework can support (1) in analyzing the competence levels addressed by the training environments and (2) in reflecting training paths for software refactoring. Finally, we discuss the limitations and the further potential of the framework. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved",Knowledge and Competence Management; Software Engineering Education; Software Refactoring; Training,Computer software; Knowledge engineering; Personnel training; Serious games; Software engineering; Cognitive process; Collateral damage; Competence management; Educational objectives; Skills and competences; Software developer; Software refactoring; Training activities; Knowledge management,Knowledge and Competence Management;Software Engineering Education;Software Refactoring;Training;Computer software;Knowledge engineering;Personnel training;Serious games;Software engineering;Cognitive process;Collateral damage;Competence management;Educational objectives;Skills and competences;Software developer;Training activities;Knowledge management,,Bernardino J.Salgado A.Filipe J.,,,,,SciTePress,,9789897583827,,,English,"IC3K - Proc. Int. Jt. Conf. Knowl. Discov., Knowl. Eng. Knowl. Manag.",Conference Paper,Scopus,,2-s2.0-85074176822,,Austria,No email,,,"Haendler T., Neumann G."
"Shonle, M., Griswold, W.G., Lerner, S.",A Framework for the Checking and Refactoring of Crosscutting Concepts,2012,ACM TRANSACTIONS ON SOFTWARE ENGINEERING AND METHODOLOGY,21,3,15,,,47,0,10.1145/2211616.2211618,,"[Shonle, Macneil] Univ Texas San Antonio, Dept Comp Sci, San Antonio, TX 78249 USA; [Griswold, William G.; Lerner, Sorin] Univ Calif San Diego, San Diego, CA 92103 USA",,"Programmers employ crosscutting concepts, such as design patterns and other programming idioms, when their design ideas cannot be efficiently or effectively modularized in the underlying programming language. As a result, implementations of these crosscutting concepts can be hard to change even when the code is well structured. In this article, we describe Arcum, a system that supports the modular maintenance of crosscutting concepts. Arcum can be used to both check essential constraints of crosscutting concepts and to substitute crosscutting concept implementations with alternative implementations. Arcum is complementary to existing refactoring systems that focus on meaning-preserving program transformations at the programming-language-semantics level, because Arcum focuses on transformations at the conceptual level. We present the underpinnings of the Arcum approach and show how Arcum can be used to address several classical software engineering problems.",Languages; Design; Design patterns; refactoring,DATA FLOW ANALYSIS; TRANSFORMATIONS; COMBINATORS; ATTRIBUTES; LANGUAGE,Languages;Design;Design patterns;refactoring;DATA FLOW ANALYSIS;TRANSFORMATIONS;COMBINATORS;ATTRIBUTES;LANGUAGE,mshonle@cs.utsa.edu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,1049-331X,,,,English,ACM T SOFTW ENG METH,Article,WoS,Computer Science,WOS:000305963800002,2-s2.0-84863980151,United States,cs.utsa.edu,Univ Texas San Antonio;Univ Calif San Diego,"Univ Texas San Antonio, United States;Univ Calif San Diego, United States","Shonle, Macneil; Griswold, William G.; Lerner, Sorin"
"Elezi L., Sali S., Demeyer S., Murgia A., Perez J.",A game of refactoring. Studying the impact of gamification in software refactoring,2016,ACM International Conference Proceeding Series,24-May-2016,, 2962718,,,,0,10.1145/2962695.2962718,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84991445513&doi=10.1145%2f2962695.2962718&partnerID=40&md5=e027fb3be07fa9e0326087e420aa8dd9,"University of Antwerp, Belgium","Elezi, L., University of Antwerp, Belgium; Sali, S., University of Antwerp, Belgium; Demeyer, S., University of Antwerp, Belgium; Murgia, A., University of Antwerp, Belgium; Pèrez, J., University of Antwerp, Belgium","Software refactoring is an essential skill for developers. It improves the quality of the software and reduces maintenance costs in the long run. In this paper, we investigate the impact that gamification can have on the refactoring process and on the usability of the existing refactoring tools. For this reason we created CodeArena, a gamifocation system that tracks and rewards refactorings during development. We used CodeArena in an exploratory study which involved 12 students of computer science. Then, we collected the feedback provided by these students via a survey. Although the gamification had less effect than expected, our findings can be useful to practitioners interested in promoting refactoring tools via gamification. © 2016 ACM.",CodeArena; Eclipse; Gamification; Refactoring; Survey,Computer applications; Computer programming; Surveying; CodeArena; Eclipse; Exploratory studies; Gamification; Maintenance cost; Refactoring tools; Refactorings; Software refactoring; Surveys,CodeArena;Eclipse;Gamification;Refactoring;Survey;Computer applications;Computer programming;Surveying;Exploratory studies;Maintenance cost;Refactoring tools;Refactorings;Software refactoring;Surveys,,,,,,,Association for Computing Machinery,,9781450341349,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-84991445513,,Belgium,No email,,,"Elezi L., Sali S., Demeyer S., Murgia A., Perez J."
"Almeida, A.L.B., Cimino, L.D., de Resende, J.E.E., Silva, L.H.M., Rocha, S.Q.S., Gregorio, G.A., Paiva, G.S., Delabrida, S., Santos, H.G., de Carvalho, M.A.M., Aquino, A.L.L., Lima, J.D.",A general-purpose distributed computing Java middleware,2019,CONCURRENCY AND COMPUTATION-PRACTICE & EXPERIENCE,31,7,e4967,,,28,0,10.1002/cpe.4967,,"[Barroso Almeida, Andre Luis; Cimino, Leonardo de Souza; Eugenio de Resende, Jose Estevao; Moreira Silva, Lucas Henrique; Souza Rocha, Samuel Queiroz; Gregorio, Guilherme Aparecido; Paiva, Gustavo Silva; Delabrida, Saul; Santos, Haroldo Gambini; Moreira de Carvalho, Marco Antonio; Lima, Joubert de Castro] Univ Fed Ouro Preto, DECOM, Ouro Preto, Brazil; [Barroso Almeida, Andre Luis] Inst Fed Minas Gerais, Control & Automat Dept CODAAUT, Ouro Preto, Brazil; [Lins Aquino, Andre Luiz] Univ Fed Alagoas, IC, Maceio, Brazil",,"The middleware solutions for General-Purpose Distributed Computing (GPDC) have distinct requirements, such as task scheduling, processing/storage fault tolerance, code portability for parallel or distributed environments, simple deployment (including over grid or multi-cluster environments), collaborative development, low code refactoring, native support for distributed data structures, asynchronous task execution, and support for distributed global variables. These solutions do not integrate these requirements into a single deployment with a unique API exposing most of these requirements to users. The consequence is the utilization of several solutions with their particularities, thus requiring different user skills. Besides that, the users have to solve the integration and all heterogeneity issues. To reduce this integration gap, in this paper, we present Java Ca&La (JCL), a distributed-shared-memory and task-oriented lightweight middleware for the Java community that separates business logic from distribution issues during the development process and incorporates several requirements that were presented separately in the GPDC middleware literature over the last few decades. JCL allows building distributed or parallel applications with only a few portable API calls, thus reducing the integration problems. Finally, it also runs on different platforms, including small single-board computers. This work compares and contrasts JCL with other Java middleware systems and reports experimental evaluations of JCL applications in several distinct scenarios.",distributed computing; distributed shared memory; Java; middleware; parallel computing; task-oriented,REAL-TIME; FRAMEWORK; MODEL,distributed computing;distributed shared memory;Java;middleware;parallel computing;task-oriented;REAL-TIME;FRAMEWORK;MODEL,andre.almeida@ifmg.edu.br,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY,1532-0626,,,,English,CONCURR COMP-PRACT E,Article,WoS,Computer Science,WOS:000460963600003,2-s2.0-85054349978,Brazil,ifmg.edu.br,Univ Fed Ouro Preto;Inst Fed Minas Gerais;Univ Fed Alagoas,"Univ Fed Ouro Preto, Brazil;Inst Fed Minas Gerais, Brazil;Univ Fed Alagoas, Brazil","Barroso Almeida, Andre Luis; Cimino, Leonardo de Souza; Eugenio de Resende, Jose Estevao; Moreira Silva, Lucas Henrique; Souza Rocha, Samuel Queiroz; Gregorio, Guilherme Aparecido; Paiva, Gustavo Silva; Delabrida, Saul; Santos, Haroldo Gambini; Moreira de Carvalho, Marco Antonio; Lins Aquino, Andre Luiz; Lima, Joubert de Castro"
"Kebir, S., Borne, I., Meslati, D.",A genetic algorithm-based approach for automated refactoring of component-based software,2017,INFORMATION AND SOFTWARE TECHNOLOGY,88,,,17,36,20,5,10.1016/j.infsof.2017.03.009,,"[Kebir, Salim] Ecole Natl Super Informat, BP 68 M Oued Smar, Algiers, Algeria; [Borne, Isabelle] Univ Bretagne Sud, IRISA, Vannes, France; [Kebir, Salim; Meslati, Djamel] Univ Badji Mokhtar, Lab Ingn Syst Complexes LISCO, Annaba, Algeria",,"Context: During its lifecycle, a software system undergoes repeated modifications to quickly fulfill new requirements, but its underlying design is not properly adjusted after each update. This leads to the emergence of bad smells. Refactoring provides a de facto behavior-preserving approach to eliminate these anomalies. However, manually determining and performing useful refactorings is a formidable challenge, as stated in the literature. Therefore, framing object-oriented automated refactoring as a search-based technique has been proposed. However, the literature shows that search-based refactoring of component based software has not yet received proper attention. Objective: This paper presents a genetic algorithm-based approach for the automated refactoring of component-based software. This approach consists of detecting component-relevant bad smells and eliminating these bad smells by searching for the best sequence of refactorings using a genetic algorithm. Method: Our approach consists of four steps. The first step includes studying the literature related to component-relevant bad smells and formulating bad smell detection rules. The second step involves proposing a catalog of component-relevant refactorings. The third step consists of constructing a source code model by extracting facts from the source code of a component-based software. The final step seeks to identify the best sequence of refactorings to apply to reduce the presence of bad smells in the source code model using a genetic algorithm. The latter uses bad smell detection rules as a fitness function and the catalog of refactorings as a means to explore the search space. Results: As a case study, we conducted experiments on an unbiased set of four real-world component based applications. The results indicate that our approach is able to efficiently reduce the total number of bad smells by more than one half, which is an acceptable value compared to the recent literature. Moreover, we determined that our approach is also accurate in refactoring only components suffering from bad smells while leaving the remaining components untouched whenever possible. Furthermore, a statistical analysis shows that our genetic algorithm outperforms random search and local search in terms of efficiency and accuracy on almost all the systems investigated in this work. Conclusion: This paper presents a search-based approach for the automated refactoring of component based software. To the best of our knowledge, our approach is the first to focus on component-based refactoring, whereas the state-of-the-art approaches focus only on object-oriented refactoring. (C) 2017 Elsevier B.V. All rights reserved.",Genetic algorithm; Refactoring; Component-based software engineering; Bad smells,EVOLUTIONARY; SUPPORT,Genetic algorithm;Refactoring;Component-based software engineering;Bad smells;EVOLUTIONARY;SUPPORT,s_kebir@esi.dz,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000402348500002,2-s2.0-85015986827,Algeria;France,esi.dz,Ecole Natl Super Informat;Univ Bretagne Sud;Univ Badji Mokhtar,"Ecole Natl Super Informat, Algeria;Univ Bretagne Sud, France;Univ Badji Mokhtar, Algeria","Kebir, Salim; Borne, Isabelle; Meslati, Djamel"
"Kebir S., Borne I., Meslati D.",A genetic algorithm for automated refactoring of component-based software,2015,EAI International Conference on Bio-inspired Information and Communications Technologies (BICT),,,,,,,1,10.4108/eai.3-12-2015.2262353,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052177873&doi=10.4108%2feai.3-12-2015.2262353&partnerID=40&md5=89963a615f74a8fa1a203494b162ec2d,"Ecole Nationale Superieure d'Informatique, BP 68 M Oued-Smar, Algiers, Algeria; IRISA Université de Bretagne-Sud, Vannes, France; Laboratoire D'Ingénierie des Systèmes Complexes (LISCO), Université Badji Mokhtar, Annaba, Algeria","Kebir, S., Ecole Nationale Superieure d'Informatique, BP 68 M Oued-Smar, Algiers, Algeria; Borne, I., IRISA Université de Bretagne-Sud, Vannes, France; Meslati, D., Laboratoire D'Ingénierie des Systèmes Complexes (LISCO), Université Badji Mokhtar, Annaba, Algeria","Nowadays a software undergoes modifications done by dif- ferent people to quickly fulfill new requirements, but its underlying design is not adjusted properly after each up- date. This leads to the emergence of bad smells. Refactoring provides a de facto behavior-preserving means to elim- inate these anomalies. However, manually determining and performing useful refactorings is known as an NP-Complete problem as stated by Harman et al. [9] because seemingly useful refactorings can improve some aspect of a software while making another aspect worse. Therefore it has been proposed to view object-oriented automated refactoring as a search based technique. However the review of the litterature shows that automated refactoring of component- based software has not been investigated yet. Recently a catalogue of component-relevant bad smells has been pro- posed in the literature but there is a lack of component- relevant refactorings. In this paper we propose a catalogue of component-relevant refactoring as well as detections rules for component-relevant bad smells. Then we rely on these two ingredients to propose a genetic algorithm for automated refactoring of component-based software systems. © 2016 ICST.",Bad smells; Component-based software engineering; Genetic algorithm; Refactoring,Automation; Computational complexity; Genetic algorithms; Odors; Software engineering; Bad smells; Component based software; Component-based software engineering; Component-based software systems; Object oriented; Refactorings; Search-based; Object oriented programming,Bad smells;Component-based software engineering;Genetic algorithm;Refactoring;Automation;Computational complexity;Genetic algorithms;Odors;Software engineering;Component based software;Component-based software systems;Object oriented;Refactorings;Search-based;Object oriented programming,,,,,,,,24116777,,,,English,Int. Conf. Bio-inspired Inf. Com. Technol.,Conference Paper,Scopus,,2-s2.0-85052177873,,Algeria;France,No email,,,"Kebir S., Borne I., Meslati D."
"AyshwaryaLakshmi, S., Mary, S.A.S.A., Vadivu, S.S.",Agent Based Tool for Topologically sorting Badsmells and Refactoring by Analyzing Complexities in Source Code,2013,"2013 FOURTH INTERNATIONAL CONFERENCE ON COMPUTING, COMMUNICATIONS AND NETWORKING TECHNOLOGIES (ICCCNT)",,,,,,7,0,,,"[AyshwaryaLakshmi, S.; Vadivu, S. Shanmuga] Univ Coll Engn, Panruti, Tamil Nadu, India; [Mary, S. A. Sahaaya Arul] Jayaram Coll Engn & Tech, Dept Comp Sci & Engn, Tiruchchirappalli 621014, India",,"Code smells are smells found in source code. As the source code becomes larger and larger we find bad smells in the source code. These bad smells are removed using Refactoring. Hence experts say the method of removing bad smells without changing the quality of code is called as Refactoring[1]. But this Refactoring if not done properly is risky, and can take time (i.e.) might be days or weeks. Hence here we provide a technique to arrange these Bad smells analyze the complexities found in the source code and then Refactor them. These Bad smell detection and scheduling has been done manually or semi automatically. This paper provides a method of automatically detecting theses Bad smells. This Automatic detection of Bad smells are done with the help of Java Agent DEvelopment.(JADE)",Software Engineering; Refactoring; Scheduling Badsmells,,Software Engineering;Refactoring;Scheduling Badsmells,ayshwaryalakshmi@ymail.com; samjessi@gmail.com; gayuharsh@gmail.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA","4th International Conference on Computing, Communications and Networking Technologies (ICCCNT)","Tiruchengode, INDIA","JUL 04-06, 2013",IEEE,,978-1-4799-3925-1,,,English,,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000346508600389,2-s2.0-84894444585,India,ymail.com,Univ Coll Engn;Jayaram Coll Engn & Tech,"Univ Coll Engn, India;Jayaram Coll Engn & Tech, India","AyshwaryaLakshmi, S.; Mary, S. A. Sahaaya Arul; Vadivu, S. Shanmuga"
Marian Z.,Aggregated metrics guided software restructuring,2012,"Proceedings - 2012 IEEE 8th International Conference on Intelligent Computer Communication and Processing, ICCP 2012",,, 6356197,259,266,,2,10.1109/ICCP.2012.6356197,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871572906&doi=10.1109%2fICCP.2012.6356197&partnerID=40&md5=a01e3fa183cadf671535e917a796d8c7,"Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Marian, Z., Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Software restructuring is of major importance in improving the reusability of a software system, being a form of perfective maintenance that modifies the structure of the system, without affecting the external behavior of the code. We are investigating in this paper how multiple software metrics defined for the application classes from a software system can be aggregated and used in order to improve the system's internal structure. Computational experiments are provided showing the effectiveness of using the aggregated software metric for restructuring a software system. The obtained results are promising, and illustrate that the research direction started in this paper has potential and it is worth being further investigated and extended. © 2012 IEEE.",hierarchical clustering; refactoring; software metric; software restructuring,Computational experiment; External behavior; Hier-archical clustering; Internal structure; Perfective maintenance; Refactorings; Research directions; Software metrices; Software metrics; Software systems; Communication; Computer software reusability; Reusability; Aggregates,hierarchical clustering;refactoring;software metric;software restructuring;Computational experiment;External behavior;Hier-archical clustering;Internal structure;Perfective maintenance;Refactorings;Research directions;Software metrices;Software metrics;Software systems;Communication;Computer software reusability;Reusability;Aggregates,"Marian, Z.; Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania; email: marianzsu@cs.ubbcluj.ro",,,,,,,,9781467329514,,,English,"Proc. - IEEE Int. Conf. Intelligent Comput. Commun. Process., ICCP",Conference Paper,Scopus,,2-s2.0-84871572906,,Romania,cs.ubbcluj.ro,,,Marian Z.
Ambler S.W.,Agile and large teams,2008,Dr. Dobb's Journal,33,7,,60,62,,1,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-46749143684&partnerID=40&md5=6d78fcd906660e1144f99b67f2be2170,Agile Development for IBM Rational,"Ambler, S.W., Agile Development for IBM Rational","Dr. Dobb's 2008 Agile Adoption Survey has reported that organizations are applying agile strategies in a variety of team sizes for agile software development. Most agile teams are less than 10 people and a team of developers is led by a team coach or Scrum Master who works closely with a product owner who represents the stakeholder community to build a high-quality working system on an incremental basis. The users will be requiring an agile database administrator (DBA) who is skilled in techniques such as database refactoring, continuous database integration, database regression testing, and agile data modeling in medium-sized agile team. The typical strategy of the big-size agile is to organize the larger team of more than 20 members into a collection of smaller teams and each subteam should be responsible for one or more subsystems, enabling them to work as a small agile team responsible for delivering working software on a timely basis.",,,,"Ambler, S. W.; Agile Development for IBM Rational",,,,,,,1044789X,,DDJTE,,English,Dr. Dobb's J.,Article,Scopus,,2-s2.0-46749143684,,Agile Development for IBM Rational,No email,,,Ambler S.W.
"Tappenden A.F., Huynh T., Miller J., Geras A., Smith M.",Agile Development of Secure Web-Based Applications,2006,International Journal of Information Technology and Web Engineering (IJITWE),1,2,,1,24,,2,10.4018/jitwe.2006040101,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85001785573&doi=10.4018%2fjitwe.2006040101&partnerID=40&md5=6a6d8403e3be81deef3bb961cf3d23e0,"University of Alberta, Canada; University of Strathclyde, United Kingdom; University of Calgary, University of Manitoba, Canada; Department of Electrical and Computer Engineering, University of Calgary, Canada","Tappenden, A.F., University of Alberta, Canada; Huynh, T., University of Alberta, Canada; Miller, J., University of Alberta, Canada, University of Strathclyde, United Kingdom; Geras, A., University of Calgary, University of Manitoba, Canada; Smith, M., Department of Electrical and Computer Engineering, University of Calgary, Canada","This article outlines a four-point strategy for the development of secure Web-based applications within an agile development framework and introduces strategies to mitigate security risks commonly present in Web-based applications. The proposed strategy includes the representation of security requirements as test cases supported by the open source tool FIT, the deployment of a highly testable architecture allowing for security testing of the application at all levels, the outlining of an extensive security testing strategy supported by the open source unit-testing framework HTTPUnit, and the introduction of the novel technique of security refactoring that transforms insecure working code into a functionally equivalent secure code. Today, many Web-based applications are not secure, and limited literature exists concerning the use of agile methods within this domain. It is the intention of this article to further discussions and research regarding the use of an agile methodology for the development of secure Web-based applications. © 2006, IGI Global. All rights reserved.",agile development; Internet security; Internet technologies; security threats; software architecture; software evaluation; Web architecture; Web-based applications,,agile development;Internet security;Internet technologies;security threats;software architecture;software evaluation;Web architecture;Web-based applications,,,,,,,,15541045,,,,English,Int. J. Inf. Technol. Web. Eng.,Article,Scopus,,2-s2.0-85001785573,,Canada;United Kingdom,No email,,,"Tappenden A.F., Huynh T., Miller J., Geras A., Smith M."
"Ge, X.C.",Agile Development of Security-Critical Enterprise System,2013,"AGILE AND LEAN SERVICE-ORIENTED DEVELOPMENT: FOUNDATIONS, THEORY, AND PRACTICE",,,,173,195,23,0,10.4018/978-1-4666-2503-7.ch009,,"[Ge, Xiaocheng] Univ York, Dept Comp Sci, York, N Yorkshire, England",,"The effective provision of security in an agile development requires a new approach: traditional security practices are bound to equally traditional development methods. However, there are concerns that security is difficult to build incrementally, and can prove prohibitively expensive to refactor. This chapter describes how to grow security, organically, within an agile project, by using an incremental security architecture that evolves with the code. The architecture provides an essential bridge between system-wide security properties and implementation mechanisms, a focus for understanding security in the project, and a trigger for security refactoring. The chapter also describes criteria that allow implementers to recognize when refactoring is needed, and a concrete example that contrasts incremental and ""top-down"" architectures.",,,,,,"701 E CHOCOLATE AVE, STE 200, HERSEY, PA 17033-1240 USA",,,,IGI GLOBAL,,978-1-4666-2504-4; 978-1-4666-2503-7,,,English,ADV COMPUT ELECTR EN,Article; Book Chapter,WoS,Computer Science; Operations Research & Management Science,WOS:000416739100010,,United Kingdom,No email,Univ York,"Univ York, United Kingdom","Ge, Xiaocheng"
[No author name available],Agile documentation strategies,2007,Dr. Dobb's Journal,32,3,,67,69,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33947097861&partnerID=40&md5=debf0899d582ad3362e227e2b74c3356,,,"The planning strategies implemented by agile software developers for documentation, are discussed. Most of agile software developers used technical practices such as regression testing, refactoring, and continuous integration instead of techniques such as modeling and governance for documentation. They identified the requirement of documentation of stakeholders such as business management, IT management, operations staff, and enterprise architects. Agile software developers developed documentation as a stakeholder requirement. Agile software developers used the principle of literate programming, of writing source code that contain embedded documentation. They also used the just-in-time (JIT) concept for meeting the requirements of documentation of stakeholders.",,,,,,,,,,,1044789X,,DDJTE,,English,Dr. Dobb's J.,Article,Scopus,,2-s2.0-33947097861,,,No email,,,[No author name available]
Wilking D.,Agile methods for embedded systems,2005,Lecture Notes in Computer Science,3556,,,319,320,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-26444506316&partnerID=40&md5=c2a2612170531a6ad49cd1fa299ca56c,"Department for Computer Science XI, RWTH Aachen University, Germany","Wilking, D., Department for Computer Science XI, RWTH Aachen University, Germany","The main goal to be answered by this Ph.D. thesis is whether there is a potential for a successful and powerful application of agile methods and related techniques to embedded systems development or not (cf. [2]). Regarding the special context of embedded system, there are some aspects to be mentioned as stated in [3]. These include the function oriented development which lead to early testing of the system, the use of target-processor simulation and the problem of hardware software codesign. The first problem being addressed is the evaluation of well known sub-techniques like refactoring, TDD, fast development cycles, short design horizon, or similar methods in the context of embedded systems. A complementary approach consists of the elaboration of underlying root causes which make agile methods appear as a sound alternative to classic techniques. For example assumptions like source code degrading over time, non-costumer oriented development, overly complex systems, and wrong development focus could be checked. A possible subdivision of the causes can be done by distinguishing effects that are generated by agile methods and effects that typically exist in embedded system engineering. This can be regarded as an alternative upside down procedure which will more likely yield a justification for agile methods in embedded system development. Finding a causation with an appropriate prioritization appears more challenging and thus will be used only to verify techniques which have a strong effect. The first step toward an assessment of agile methods has been started by executing a study during a lab course which is guided by the ideas described in [1]. Here, the students are divided into a planning group and an agile group, each developing a pre-crash system based on ultrasonic sensors. The two data collection mechanisms are a biweekly survey and a time recording log. The underlying aim is to show the influence of the planning horizon on embedded system development. This approach already sketches the main validation technique, which will be quantitative and composed of case studies and experiments. In addition, a case study with a high degree of variable control as proposed by [4] will be executed in order to guide the evaluation process to the most promising aspects of agile methods for embedded system development. © Springer-Verlag Berlin Heidelberg 2005.",,Agile methods; Data collection mechanism; Source codes; Target-processor simulation; Computer programming; Computer simulation; Data acquisition; Mathematical models; Problem solving; Research; Software engineering; Technical presentations; Embedded systems,Agile methods;Data collection mechanism;Source codes;Target-processor simulation;Computer programming;Computer simulation;Data acquisition;Mathematical models;Problem solving;Research;Software engineering;Technical presentations;Embedded systems,"Department for Computer Science XI, RWTH Aachen UniversityGermany",Baumeister H.Marchesi M.Holcombe M.,,,,,,03029743,,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-26444506316,,Germany,No email,,,Wilking D.
"Serr D., Clyde S.",Agile plan refactoring,2006,"Proceedings of the ISCA 15th International Conference on Software Engineering and Data Engineering, SEDE 2006",,,,22,28,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883513904&partnerID=40&md5=93ee2f45c0aacd398ddae26158152f5e,"Utah State University, United States","Serr, D., Utah State University, United States; Clyde, S., Utah State University, United States","Work Breakdown Structures are a common fixture of traditional software development methods, but are absent from most Agile planning methods. One reason for their omission is that agile plans are expected to change and adapt, to react to changing requirements and environments. We propose the introduction of simple, safe and repeatable plan-refactoring operations to support the adaptation and continual refinement of an agile Work Breakdown Structure.",,Planning method; Refactorings; Software development methods; Work breakdown structure; Engineering; Industrial engineering; Software engineering,Planning method;Refactorings;Software development methods;Work breakdown structure;Engineering;Industrial engineering;Software engineering,Utah State UniversityUnited States,,,,,,,,9781604235821,,,English,"Proc. ISCA Int. Conf. Softw. Eng. Data Eng., SEDE",Conference Paper,Scopus,,2-s2.0-84883513904,,United States,No email,,,"Serr D., Clyde S."
"Omar, M., Abdullah, S.L.S.",AGILE PRACTICES: A COGNITIVE LEARNING PERSPECTIVE,2013,"COMPUTING & INFORMATICS, 4TH INTERNATIONAL CONFERENCE, 2013",,,,253,+,2,0,,,"[Omar, Mazni] Univ Utara Malaysia, Sintok, Kedah, Malaysia; [Abdullah, Sharifah Lailee Syed] Univ Teknol MARA, Shah Alam, Malaysia",,"This paper highlights the theoretical aspect of agile practices from the cognitive learning perspective. Three cognitive strategies - elaboration, organization, and problem solving - underpin key strategies in agile practices to promote better understanding in learning software development activities. Agile practices such as planning games, pair programming, refactoring, coding standard and simple design, acts as a positive inducer to human brain for software developers to accept and develop software easily. By understanding theoretical aspects hinders in agile practices, educators are able to determine alternative approach to suit into internal potentials among students, and thus be able to develop high quality software.",software engineering (SE); agile practices; extreme programming; cognitive learning; quality software,SOFTWARE-DEVELOPMENT,software engineering (SE);agile practices;extreme programming;cognitive learning;quality software;SOFTWARE-DEVELOPMENT,mazni@uum.edu.my; shlailee@perlis.uitim.edu.my,"Jamaludin, Z; ChePa, N; Bakar, MSA","COLL ARTS & SCI, INFOR TECHNOL BLDG, SINTOK, KEDAH 06010, MALAYSIA",4th International Conference on Computing and Informatics (ICOCI2013),"Sarawak, MALAYSIA","AUG 28-30, 2013",UNIV UTARI MALAYSIA-UUM,2289-3784,978-983-2078-78-4,,,English,PROC INT CONF COMP,Proceedings Paper,WoS,Computer Science,WOS:000333716800038,,Malaysia,uum.edu.my,Univ Utara Malaysia;Univ Teknol MARA,"Univ Utara Malaysia, Malaysia;Univ Teknol MARA, Malaysia","Omar, Mazni; Abdullah, Sharifah Lailee Syed"
"Chivers, H., Paige, R.F., Ge, X.C.",Agile security using an incremental security architecture,2005,"EXTREME PROGRAMMING AND AGILE PROCESSES IN SOFTWARE ENGINEERING, PROCEEDINGS",3556,,,57,65,9,10,,,"Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England",,"The effective provision of security in an agile development requires a new approach: traditional security practices are bound to equally traditional development methods. However, there are concerns that security is difficult to build incrementally, and can prove prohibitively expensive to refactor. This paper describes how to grow security, organically, within an agile project, by using an incremental security architecture which evolves with the code. The architecture provides an essential bridge between system-wide security properties and implementation mechanisms, a focus for understanding security in the project, and a trigger for security refactoring. The paper also describes criteria that allow implementers to recognize when refactoring is needed, and a concrete example that contrasts incremental and 'top-down' architectures.",,,,hrchivers@iee.org; paige@cs.york.ac.uk; xchge@cs.york.ac.uk,"Baumeister, H; Marchesi, M; Holcombe, M","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",6th International Conference on Extreme Programming and Agile Processes in Software Engineering,"Sheffield, ENGLAND","JUN 18-23, 2005",SPRINGER-VERLAG BERLIN,0302-9743,3-540-26277-6,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000230385700007,,United Kingdom,iee.org,Dept Comp Sci,"Dept Comp Sci, United Kingdom","Chivers, H; Paige, RF; Ge, XC"
"Baar, T., Markovic, S.",A graphical approach to prove the semantic preservation of UML/OCL refactoring rules,2007,PERSPECTIVES OF SYSTEMS INFORMATICS,4378,,,70,+,3,13,,,"[Baar, Thomas; Markovic, Slavisa] Ecole Polytech Fed Lausanne, Sch Comp & Commun Sci, CH-1015 Lausanne, Switzerland",,"Refactoring is a powerful technique to improve the quality of software models including implementation code. The software developer applies successively so-called refactoring rules on the current software model and transforms it into a new model. Ideally, the application of a refactoring rule preserves the semantics of the model, on which it is applied. In this paper, we present a simple criterion and a proof technique for the semantic preservation of refactoring rules that are defined for UML class diagrams and OCL constraints. Our approach is based on a novel formalization of the OCL semantics in form of graph transformation rules. We illustrate our approach using the refactoring rule MoveAttribute.",refactoring; semantic preservation; UML; OCL,,refactoring;semantic preservation;UML;OCL,thomas.baar@epfl.ch; slavisa.markovic@epfl.ch,"Virbitskaite, I; Voronkov, A","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",6th International Andrei Ershov Memorial Conference on Perspectives of Systems Informatics,"Novosibirsk, RUSSIA","JUN 27-30, 2006",SPRINGER-VERLAG BERLIN,0302-9743,978-3-540-70880-3,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000245499900009,2-s2.0-38049177507,Switzerland,epfl.ch,Ecole Polytech Fed Lausanne,"Ecole Polytech Fed Lausanne, Switzerland","Baar, Thomas; Markovic, Slavisa"
"Tekin, U., Buzluca, F.",A graph mining approach for detecting identical design structures in object-oriented design models,2014,SCIENCE OF COMPUTER PROGRAMMING,95,,,406,425,20,2,10.1016/j.scico.2013.09.015,,"[Tekin, Umut] Informat & Informat Secur Res Ctr, Kocaeli, Turkey; [Buzluca, Feza] Istanbul Tech Univ, Dept Comp Engn, TR-80626 Istanbul, Turkey",,"The object-oriented approach has been the most popular software design methodology for the past twenty-five years. Several design patterns and principles are defined to improve the design quality of object-oriented software systems. In addition, designers can use unique design motifs that are designed for the specific application domains. Another commonly used technique is cloning and modifying some parts of the software while creating new modules. Therefore, object-oriented programs can include many identical design Structures. This work proposes a sub-graph mining-based approach for detecting identical design structures in object-oriented systems. By identifying and analyzing these structures, we can obtain useful information about the design, such as commonly-used design patterns, most frequent design defects, domain-specific patterns, and reused design clones, which could help developers to improve their knowledge about the software architecture. Furthermore, problematic parts of frequent identical design structures are appropriate refactoring opportunities because they affect multiple areas of the architecture. Experiments with several open-source and industrial projects show that we can successfully find many identical design structures within a project (intra-project) and between different projects (inter-project). We observe that usually most of the detected identical structures are an implementation of common design patterns; however, we also detect various anti-patterns, domain-specific patterns, reused design parts and design-level clones. (C) 2013 Elsevier B.V. All rights reserved.",Software design models; Identical design structures; Software motifs; Pattern extraction; Graph mining,SOFTWARE ARCHITECTURE; CODE,Software design models;Identical design structures;Software motifs;Pattern extraction;Graph mining;SOFTWARE ARCHITECTURE;CODE,umut.tekin@tubitak.gov.tr; buzluca@itu.edu.tr,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0167-6423,,,,English,SCI COMPUT PROGRAM,Article,WoS,Computer Science,WOS:000344578900003,2-s2.0-84942917227,Turkey,tubitak.gov.tr,Informat & Informat Secur Res Ctr;Istanbul Tech Univ,"Informat & Informat Secur Res Ctr, Turkey;Istanbul Tech Univ, Turkey","Tekin, Umut; Buzluca, Feza"
"Brown, C., Janjic, V., Hammond, K., Schoner, H., Idrees, K., Glass, C.W.",Agricultural Reform: More Efficient Farming Using Advanced Parallel Refactoring Tools,2014,"2014 22ND EUROMICRO INTERNATIONAL CONFERENCE ON PARALLEL, DISTRIBUTED, AND NETWORK-BASED PROCESSING (PDP 2014)",,,,36,43,8,4,10.1109/PDP.2014.94,,"[Schoener, Holger] Software Competence Ctr Hagenberg GmbH, Hagenberg Im Muhlkreis, Austria; [Idrees, Kamran; Glass, Cohn W.] HLRS, Stuttgart, Germany",,"Modern multicore systems offer huge computing potential. Exploiting large parallel systems is still a very challenging task, however, especially as many software developers still use overly-sequential programming models. refactoring tool support that allows the programmer to introduce and tune parallelism in an easy and effective way, exploiting high-level parallel patterns such as farms and pipelines. Using our approach, we achieve speedups of up to 21 on a 24-core shared-memory system for a number of realistic use-cases.",,,,cmb21@st-andrews.ac.uk; vj@st-andrews.ac.uk; kh@st-andrews.ac.uk; holger.schoener@scch.at; idrees@hlrs.de; glass@hlrs.de,"Aldinucci, M; DAgostino, D; Kilpatrick, P","345 E 47TH ST, NEW YORK, NY 10017 USA","22nd Euromicro International Conference on Parallel, Distributed, and Network-Based Processing (PDP)","Turin, ITALY","FEB 12-14, 2014",IEEE,1066-6192,978-1-4799-2728-9,,,English,EUROMICRO WORKSHOP P,Proceedings Paper,WoS,Computer Science,WOS:000353964700005,2-s2.0-84899415623,Austria;Germany,st-andrews.ac.uk,Software Competence Ctr Hagenberg GmbH;HLRS,"Software Competence Ctr Hagenberg GmbH, Austria;HLRS, Germany","Brown, Christopher; Janjic, Vladimir; Hammond, Kevin; Schoener, Holger; Idrees, Kamran; Glass, Cohn W."
"Antal, G., Szarka, A., Hegedus, P.",A Hands-on OpenStack Code Refactoring Experience Report,2018,"COMPUTATIONAL SCIENCE AND ITS APPLICATIONS - ICCSA 2018, PT V",10964,,,464,480,17,0,10.1007/978-3-319-95174-4_37,,"[Antal, Gabor; Szarka, Alex] Univ Szeged, Dept Software Engn, Szeged, Hungary; [Hegedus, Peter] Univ Szeged, MTA SZTE Res Grp Artificial Intelligence, Szeged, Hungary",,"Nowadays, almost everyone uses some kind of cloud infrastructure. As clouds gaining more and more attention, it is now even more important to have stable and reliable cloud systems. Along with stability and reliability comes source code maintainability. Unfortunately, maintainability has no exact definition, there are several definitions both from users' and developers' perspective. In this paper, we analyzed two projects of OpenStack, the world's leading open-source cloud system, using QualityGate, a static software analyzer which can help to determine the maintainability of software. During the analysis we found quality issues that could be fixed by refactoring the code. We have created 47 patches in this two OpenStack projects. We have also analyzed our patches with QualityGate to see whether they increase the maintainability of the system. We found that a single refactoring has a barely noticeable effect on the maintainability of the software, what is more, it can even decrease maintainability. But if we do refactorings regularly, their cumulative effect will probably increase the quality in the mid and long-term. We also experienced that our refactoring commits were very appreciated by the open-source community.",OpenStack; Refactoring; Quality assurance; Static analysis; Code quality,,OpenStack;Refactoring;Quality assurance;Static analysis;Code quality,antal@inf.u-szeged.hu; szarka@inf.u-szeged.hu; hpeter@inf.u-szeged.hu,"Gervasi, O; Murgante, B; Misra, S; Stankova, E; Torre, CM; Rocha, AMAC; Taniar, D; Apduhan, BO; Tarantino, E; Ryu, Y","GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND",18th International Conference on Computational Science and Its Applications (ICCSA),"Monash Univ, Caulfield Campus, Melbourne, AUSTRALIA","JUL 02-05, 2018",SPRINGER INTERNATIONAL PUBLISHING AG,0302-9743,978-3-319-95174-4; 978-3-319-95173-7,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000460577800037,2-s2.0-85049932789,Hungary,inf.u-szeged.hu,Univ Szeged,"Univ Szeged, Hungary","Antal, Gabor; Szarka, Alex; Hegedus, Peter"
"Khan, M.U., Iqbal, M.Z., Ali, S.",A Heuristic-Based Approach to Refactor Crosscutting Behaviors in UML State Machines,2014,2014 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME),,,,557,560,4,5,10.1109/ICSME.2014.94,,"[Khan, Muhammad Uzair; Iqbal, Muhamamd Zohaib] Natl Univ Comp & Emerging Sci, FAST NU, Software Qual Engn & Testing Lab QUEST, Islamabad, Pakistan; [Iqbal, Muhamamd Zohaib] Univ Luxembourg, SnT Ctr Secur Reliabil & Trust, Luxembourg, Luxembourg; [Ali, Shaukat] Simula Res Lab, Lysaker, Norway",,"UML state machines are commonly used to model the state-based behavior of communication and control systems to support various activities such as test cases and code generation. Standard UML state machines are well suited to model functional behavior; however extra-functional behavior such as robustness and security can also be directly modeled on them, but this often results in cluttered models since extra-functional behaviors are often crosscutting. Such modeling crosscutting behavior directly on UML state machines is a common practice. Aspect-Oriented Modeling (AOM) allows systematically modeling of crosscutting behavior and has shown to provide a scalable solution in the recent years. However, due to lack of familiarity of AOM in both academic and industry, extra-functional behavior is often modeled directly on UML state machines and as a result those UML state machines are difficult to read and maintain. To improve the readability of already developed UML state machines and ease maintenance, we propose a set of heuristics, derived from two industrial cases studies, implemented in a tool to automatically identify commonly observed crosscutting behaviors in UML state machines and refactor them as Aspect State Machines. Such refactoring makes the state machines easier to maintain and comprehend. We present the results of applying our proposed heuristics to the existing UML state machines of two industrial case studies developed for model-based testing.",Model Refactoring; UML State machine; Aspect-Oriented Modeling; Heuristics,,Model Refactoring;UML State machine;Aspect-Oriented Modeling;Heuristics,uzair.khan@nu.edu.pk; zohaib.iqbal@nu.edu.pk; shaukat@simula.no,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",30th IEEE International Conference on Software Maintenance and Evolution (ICSME),"Victoria, CANADA","SEP 28-OCT 03, 2014",IEEE COMPUTER SOC,1063-6773,978-0-7695-5303-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000380491700073,,Pakistan;Luxembourg;Norway,nu.edu.pk,Natl Univ Comp & Emerging Sci;Univ Luxembourg;Simula Res Lab,"Natl Univ Comp & Emerging Sci, Pakistan;Univ Luxembourg, Luxembourg;Simula Res Lab, Norway","Khan, Muhammad Uzair; Iqbal, Muhamamd Zohaib; Ali, Shaukat"
"Marian Z., Czibula I.G., Czibula G.",A hierarchical clustering-based approach for software restructuring at the package level,2018,"Proceedings - 2017 19th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC 2017",,, 8531292,239,246,,0,10.1109/SYNASC.2017.00046,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85058269705&doi=10.1109%2fSYNASC.2017.00046&partnerID=40&md5=23ee3ef19db4770352ba57fad7459b56,"Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Cluj-Napoca, 400084, Romania","Marian, Z., Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Cluj-Napoca, 400084, Romania; Czibula, I.-G., Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Cluj-Napoca, 400084, Romania; Czibula, G., Faculty of Mathematics and Computer Science, Babeş-Bolyai University, Cluj-Napoca, 400084, Romania","Software refactoring at the package level has a major importance in the field of software architecture, since refactoring increases the internal software quality and is beneficial during software maintenance and evolution. As the requirements for grouping application classes into software packages are hard to identify, clustering is useful, since it is able to uncover hidden patterns in data. In this paper we are investigating software refactoring at the package level by using hierarchical clustering. A hierarchical clustering approach is proposed in order to help software developers in designing well-structured software packages. The approach takes an existing software system and remodularizes it at the package level using hierarchical clustering, in order to obtain better-structured packages. The experimental evaluation of the approach is performed on three open source frameworks and the algorithm has proven to perform well. © 2017 IEEE.",Clustering; Machine learning; Refactoring; Software engineering; Software package,Application programs; Computer software selection and evaluation; Learning systems; Petroleum reservoir evaluation; Software engineering; Software packages; Clustering; Experimental evaluation; Hier-archical clustering; Hierarchical clustering approach; Open source frameworks; Refactorings; Software maintenance and evolution; Software refactoring; Open source software,Clustering;Machine learning;Refactoring;Software engineering;Software package;Application programs;Computer software selection and evaluation;Learning systems;Petroleum reservoir evaluation;Software packages;Experimental evaluation;Hier-archical clustering;Hierarchical clustering approach;Open source frameworks;Refactorings;Software maintenance and evolution;Software refactoring;Open source software,,Ida T.Jebelean T.Petcu D.Watt S.M.Negru V.Zaharie D.,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781538626269,,,English,"Proc. - Int. Symp. Symb. Numer. Algorithms Sci. Comput., SYNASC",Conference Paper,Scopus,,2-s2.0-85058269705,,Romania,No email,,,"Marian Z., Czibula I.-G., Czibula G."
"Czibula, G., Cojocar, G.S.",A HIERARCHICAL CLUSTERING BASED APPROACH IN ASPECT MINING,2010,COMPUTING AND INFORMATICS,29,6,,881,900,20,0,,,"[Czibula, Gabriela; Cojocar, Grigoreta Sofia] Univ Babes Bolyai, Dept Comp Sci, Cluj Napoca 400084, Romania",,"Clustering is a division of data into groups of similar objects. Aspect mining is a process that tries to identify crosscutting concerns in existing software systems. The goal is to refactor the existing systems to use aspect oriented programming, in order to make them easier to maintain and to evolve. The aim of this paper is to present a new hierarchical clustering based approach in aspect mining. For this purpose we propose HAC algorithm (Hierarchical Agglomerative Clustering in aspect mining). Clustering is used in order to identify crosscutting concerns. We evaluate the obtained results from the aspect mining point of view, based on two quality measures that we have previously introduced and a newly defined one. The proposed approach is compared with other similar existing approaches in aspect mining and two case studies are also reported.",Hierarchical clustering; aspect mining; crosscutting concern; quality measure; evaluation,,Hierarchical clustering;aspect mining;crosscutting concern;quality measure;evaluation,gabis@cs.ubbcluj.ro; grigo@cs.ubbcluj.ro,,"DUBRAVSKA CESTA 9, 84237 BRATISLAVA, SLOVAKIA",,,,SLOVAK ACAD SCIENCES INST INFORMATICS,1335-9150,,,,English,COMPUT INFORM,Article,WoS,Computer Science,WOS:000285276100001,,Romania,cs.ubbcluj.ro,Univ Babes Bolyai,"Univ Babes Bolyai, Romania","Czibula, Gabriela; Cojocar, Grigoreta Sofia"
"Van Eetvelde N., Janssens D.",A hierarchical program representation for refactoring,2003,Electronic Notes in Theoretical Computer Science,82,7,,91,104,,6,10.1016/S1571-0661(04)80749-7,https://www.scopus.com/inward/record.uri?eid=2-s2.0-18944382337&doi=10.1016%2fS1571-0661%2804%2980749-7&partnerID=40&md5=10d6e24976d39dc334dcc31eef8383e4,"Department of Mathematics and Computer Science, University of Antwerp, Wilrijk, Belgium","Van Eetvelde, N., Department of Mathematics and Computer Science, University of Antwerp, Wilrijk, Belgium; Janssens, D., Department of Mathematics and Computer Science, University of Antwerp, Wilrijk, Belgium","Currently there is a lot of interest in graph representations of software systems, as they provide a natural and flexible means to describe complex structures. The various visual sublanguages of the UML are perhaps the most obvious example of this. In [11] a graph representation of object-oriented programs was presented that enables one to describe refactoring operations (behaviour-preserving changes in the structure of a program) in a formal, concise way by graph rewriting productions. In general, however, a refactoring makes changes to a small part of a program, so the graph representation should only contain the information needed to carry out that refactoring. All other details are redundant and make the graph unnecessarily large for good visualization. A possible solution consists in using a hierarchical representation. Such a representation of object-oriented programs is presented in this paper. It is based on node-rewriting graph productions: each refinement step corresponds to a production. The construction is illustrated by applying it to asmall Java simulation of a Local Area Network. © 2003 Puplished by Elsevier Science B.V.",,Computer programming languages; Graph theory; Local area networks; Mathematical transformations; Software engineering; Graph representation; Graph transformations; Graph-based techniques; Hierarchial structure; Object oriented programming,Computer programming languages;Graph theory;Local area networks;Mathematical transformations;Software engineering;Graph representation;Graph transformations;Graph-based techniques;Hierarchial structure;Object oriented programming,"Van Eetvelde, N.; Department of Mathematics and Computer Science, University of Antwerp, Wilrijk, Belgium; email: Niels.Vaneetvelde@ua.ac.be",,,,,,Elsevier,15710661,,,,English,Electron. Notes Theor. Comput. Sci.,Conference Paper,Scopus,,2-s2.0-18944382337,,Belgium,ua.ac.be,,,"Van Eetvelde N., Janssens D."
"Stevens, R., De Roover, C., Noguera, C., Jonckers, V.",A History Querying Tool and its Application to Detect Multi-version Refactorings,2013,PROCEEDINGS OF THE 17TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING (CSMR 2013),,,,335,338,4,4,10.1109/CSMR.2013.44,,"[Stevens, Reinout] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium",,"Version Control Systems (VCS) have become indispensable in developing software. In order to provide support for change management, they track the history of software projects. Tool builders can exploit this latent historical information to provide insights in the evolution of the project. For example, the information needed to identify when and where a particular refactoring was applied is implicitly present in the VCS. However, tool support for eliciting this information is lacking. So far, no general-purpose history querying tool capable of answering a wide variety of questions about the evolution of software exists. Therefore, we generalize the idea of a program querying tool to a history querying tool. A program querying tool reifies the program's code into a knowledge base, from which it retrieves elements that exhibit characteristics specified through a user-provided program query. Our history querying tool, QWALKEKO, enables specifying the evolution of source code characteristics across multiple versions of Java projects versioned in Git. We apply QWALKEKO to the problem of detecting refactorings, specified as the code changes induced by each refactoring. These specifications stem from the literature, but are limited to changes between two successive versions. We demonstrate the expressiveness of our tool by generalizing the specifications such that refactorings can span multiple versions.",program comprehension tools; software repositories refactoring,,program comprehension tools;software repositories refactoring,resteven@vub.ac.be; cderoove@vub.ac.be; cnoguera@vub.ac.be; vejoncke@vub.ac.be,"Cleve, A; Ricca, F; Cerioli, M","345 E 47TH ST, NEW YORK, NY 10017 USA",17th European Conference on Software Maintenance and Reengineering (CSMR),"Univ Studi Genova, Dipartimento Informatica, Bioingegneria, Robotica & Ing, Genova, ITALY","MAR 05-08, 2013",IEEE,1944-2793,978-0-7695-4948-4; 978-1-4673-5833-0,,,English,EUR CON SFTWR MTNCE,Proceedings Paper,WoS,Computer Science,WOS:000321127000036,2-s2.0-84877265983,Belgium,vub.ac.be,Vrije Univ Brussel,"Vrije Univ Brussel, Belgium","Stevens, Reinout; De Roover, Coen; Noguera, Carlos; Jonckers, Viviane"
"Hadj-Kacem, M., Bouassida, N.",A Hybrid Approach To Detect Code Smells using Deep Learning,2018,PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING,,,,137,146,10,1,10.5220/0006709801370146,,"[Hadj-Kacem, Mouna; Bouassida, Nadia] Sfax Univ, Mir Cl Lab, Sfax, Tunisia",,"The detection of code smells is a fundamental prerequisite for guiding the subsequent steps in the refactoring process. The more the detection results are accurate, the more the performance of the refactoring on the software is improved. Given its influential role in the software maintenance, this challenging research topic has so far attracted an increasing interest. However, the lack of consensus about the definition of code smells in the literature has led to a considerable diversity of the existing results. To reduce the confusion associated with this lack of consensus, there is a real need to achieve a deep and consistent representation of the code smells. Recently, the advance of deep learning has demonstrated an undeniable contribution in many research fields including the pattern recognition issues. In this paper, we propose a hybrid detection approach based on deep Auto-encoder and Artificial Neural Network algorithms. Four code smells (God Class, Data Class, Feature Envy and Long Method) are the focus of our experiment on four adopted datasets that are extracted from 74 open source systems. The values of recall and precision measurements have demonstrated high accuracy results.",Hybrid Approach; Deep Learning; Auto-encoder; Artificial Neural Networks; Code Smell Detection,DESIGN,Hybrid Approach;Deep Learning;Auto-encoder;Artificial Neural Networks;Code Smell Detection;DESIGN,,"Damiani, E; Spanoudakis, G; Maciaszek, L","AV D MANUELL, 27A 2 ESQ, SETUBAL, 2910-595, PORTUGAL",13th International Conference on Evaluation of Novel Approaches to Software Engineering,"Funchal, PORTUGAL","MAR 23-24, 2018",SCITEPRESS,,978-989-758-300-1,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000450506700011,2-s2.0-85051992969,Tunisia,No email,Sfax Univ,"Sfax Univ, Tunisia","Hadj-Kacem, Mouna; Bouassida, Nadia"
"Zhong L., Li K., Li H., Xu J.",A interactive approach for software architecture refactoring based on software evolution information,2010,"ICCET 2010 - 2010 International Conference on Computer Engineering and Technology, Proceedings",3,, 5485793,V3598,V3601,,0,10.1109/ICCET.2010.5485793,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77958076846&doi=10.1109%2fICCET.2010.5485793&partnerID=40&md5=3f2b4e68354bdd93964615e9c3a0585b,"School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; School of Information Engineering, Nanchang Hangkong University, NanChang, Jiang Xi, 330063, China; Nanchang Hangkong University, NanChang Jiang Xi, 330063, China","Zhong, L., School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; Li, K., School of Information Engineering, Nanchang Hangkong University, NanChang, Jiang Xi, 330063, China; Li, H., Nanchang Hangkong University, NanChang Jiang Xi, 330063, China; Xu, J., School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China","For improving the evolvability of software architecture, the paper proposes a software architecture refactoring strategy based on software evolution, which is retrieved from software change history by using the formal concept lattice technology to analyze the evolution dependency relation between components. Moreover, an example is shown for explaining its usability. © 2010 IEEE.",Evolution information; Software architecture; Software evolution; Software refactoring,Dependency relation; Evolution information; Evolvability; Formal concept lattices; Interactive approach; Refactorings; Software change; Software Evolution; Software evolution information; Software refactoring; Biology; Computer software; Software architecture,Evolution information;Software architecture;Software evolution;Software refactoring;Dependency relation;Evolvability;Formal concept lattices;Interactive approach;Refactorings;Software change;Software evolution information;Biology;Computer software,"Zhong, L.; School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; email: shiningto@yahoo.com.cn",,,,,,,,9781424463503,,,English,"ICCET - Int. Conf. Comput. Eng. Technol., Proc.",Conference Paper,Scopus,,2-s2.0-77958076846,,China,yahoo.com.cn,,,"Zhong L., Li K., Li H., Xu J."
"Xu G., Rountev A.",AJANA: A general framework for source-code-level interprocedural dataflow analysis of AspectJ software,2008,"7th International Conference on Aspect-Oriented Software Development, AOSD.08 - Research Track Proceedings",,,,36,47,,15,10.1145/1353482.1353488,https://www.scopus.com/inward/record.uri?eid=2-s2.0-57849115842&doi=10.1145%2f1353482.1353488&partnerID=40&md5=8acc1f47c283b89414e8e940bb83f75b,"Ohio State University, United States","Xu, G., Ohio State University, United States; Rountev, A., Ohio State University, United States","Aspect-oriented software presents new challenges for the designers of static analyses. Our work aims to establish systematic foundations for dataflow analysis of AspectJ software. We propose a control- and data-flow program representation for AspectJ programs, as basis for subsequent interprocedural dataflow analyses. The representation is built at the source code level and captures the semantic intricacies of various pointcut designators, multiple applicable advices per joint point, dynamic advices, and general flow of data to, from, and between advices. We also propose two dataflow analyses for AspectJ software: (1) a novel object effect analysis based on a flow- and context-sensitive must-alias analysis, and (2) a dependence analysis used for constructing the system dependence graph for slicing, refactoring, change impact analysis, etc. Both analyses are representative of a general category of dataflow analyses referred to as interprocedural distributed environment (IDE) problems. The two analyses are built on top of the proposed representation, and take into account the complex flow of control and data due to aspect-oriented features. We present a study of the proposed techniques on 37 program versions, using our Ajana analysis framework which is based on the abc AspectJ compiler. The results show that the representation can be built efficiently, that it is superior to an approach based on the woven bytecode, and that it enables analyses that are both faster and more precise. These findings strongly indicate that the proposed approach is a promising candidate for a foundation upon which various inter-procedural analyses for AspectJ can be designed and built. Copyright © 2008 ACM.",AspectJ; dataflow analysis; interprocedural analysis,Alias analysis; Aspect-J; Aspect-oriented; Aspect-oriented software; Bytecodes; Change impact analysis; Complex flow; Context-sensitive; Dataflow; Dependence analysis; Distributed environments; Effect analysis; Flow of data; Inter-procedural; Inter-procedural analysis; Interprocedural dataflow analysis; Pointcut designators; Refactorings; Source codes; System dependence graph; Computer software; Computer systems programming; Object oriented programming; Program compilers; Sailing vessels; Software design; Data flow analysis,AspectJ;dataflow analysis;interprocedural analysis;Alias analysis;Aspect-J;Aspect-oriented;Aspect-oriented software;Bytecodes;Change impact analysis;Complex flow;Context-sensitive;Dataflow;Dependence analysis;Distributed environments;Effect analysis;Flow of data;Inter-procedural;Inter-procedural analysis;Interprocedural dataflow analysis;Pointcut designators;Refactorings;Source codes;System dependence graph;Computer software;Computer systems programming;Object oriented programming;Program compilers;Sailing vessels;Software design;Data flow analysis,"Xu, G.; Ohio State UniversityUnited States; email: xug@cse.ohio-state.edu",,,,,,,,9781605580449,,,English,"Int. Conf. Asp.-Oriented Softw. Dev., AOSD - Res. Track Proc.",Conference Paper,Scopus,,2-s2.0-57849115842,,United States,cse.ohio-state.edu,,,"Xu G., Rountev A."
"Liu, Y.H.A., Gorbovitski, M., Stoller, S.D.",A Language and Framework for Invariant-Driven Transformations,2010,ACM SIGPLAN NOTICES,45,2,,55,64,10,4,10.1145/1837852.1621617,,"[Liu, Yanhong A.; Gorbovitski, Michael; Stoller, Scott D.] SUNY Stony Brook, Dept Comp Sci, Stony Brook, NY 11794 USA",,"This paper describes a language and framework that allow coordinated transformations driven by invariants to be specified declaratively, as invariant rules, and applied automatically. The framework supports incremental maintenance of invariants for program design and optimization, as well as general transformations for instrumentation, refactoring, and other purposes. This paper also describes our implementations for transforming Python and C programs and experiments with successful applications of the systems in generating efficient implementations from clear and modular specifications, in instrumenting programs for runtime verification, profiling, and debugging, and in code refactoring.",Design; Languages; Performance,PROGRAM TRANSFORMATION,Design;Languages;Performance;PROGRAM TRANSFORMATION,liu@cs.sunsyb.edu; mickg@cs.sunsyb.edu; stoller@cs.sunsyb.edu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",8th International Conference on Generative Programming and Component Engineering,"Denver, CO","OCT 04-05, 2009",ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article; Proceedings Paper,WoS,Computer Science,WOS:000280547600006,2-s2.0-77957551482;2-s2.0-70450206920,United States,cs.sunsyb.edu,SUNY Stony Brook,"SUNY Stony Brook, United States","Liu, Yanhong A.; Gorbovitski, Michael; Stoller, Scott D."
Erwig M.,A language for software variation research,2011,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),6563 LNCS,,,1,,,0,10.1007/978-3-642-19440-5_1,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952261072&doi=10.1007%2f978-3-642-19440-5_1&partnerID=40&md5=1bb5471e7264fdc0643dfb30821ae15e,"School of EECS, Oregon State University, United States","Erwig, M., School of EECS, Oregon State University, United States","Variation occurs in many places in software engineering and takes quite different forms. Software can have different versions, and it can come in different configurations. Software can offer different sets of features, and it can appear in different stages of refactoring without any visible effect in functionality. Traditionally, all these forms of variation have used different representations.While this specialization might have some benefits by facilitating the tailoring to the specific needs of one form of variation, it has also some serious drawbacks. First, different representations prevent or complicate a potential integration of different forms of variation. For example, variation in functionality is currently only poorly supported in most versioning tools by branching. Second, it can be difficult to transfer research results achieved within one representation to other representations. Finally, different representations can lead to duplicated work and a balkanization of variation research efforts. © 2011 Springer-Verlag Berlin Heidelberg.",,One-form; Refactorings; Research efforts; Research results; Versioning; Different stages; Refactorings; Research efforts; Research results; Sets of features; Versioning; Software engineering; Computer programming languages; Software engineering; Engineering research; Engineering research,One-form;Refactorings;Research efforts;Research results;Versioning;Different stages;Sets of features;Software engineering;Computer programming languages;Engineering research,"Erwig, M.; School of EECS, Oregon State UniversityUnited States",,,,,,,03029743,9783642194399,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-79952261072,,United States,No email,,,Erwig M.
Roychoudhury S.,A language-independent approach to software maintenance using grammar adapters,2004,"Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA",,,,52,53,,0,10.1145/1028664.1028693,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951761223&doi=10.1145%2f1028664.1028693&partnerID=40&md5=7ec1a23d9b0b111ce44f70ea35a1a77a,"Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294, United States","Roychoudhury, S., Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294, United States","A long-standing goal of software engineering is to construct software that is easily modified and extended. Recent advances in software design techniques, such as aspect-oriented software development and refactoring, have offered new approaches to address challenges of software evolution. Several tools and language extensions have been developed by others to enable these techniques in a few popular programming languages. However, software exists in a variety of languages. An unfortunate consequence of legacy system adaptation is that new software engineering tools are often developed from scratch without preserving and reusing the knowledge gained from the previous construction of the tool in a different language and platform context. To address this problem, this paper summarizes two core research ideas. First, the concept of extending several software reengineering techniques in disparate programming languages is explored. A core focus of this objective is the abstraction of transformation functions to enable design maintenance in legacy based systems. The second research objective extends the first goal to understand the fundamental science for constructing a generic platform using grammar adapters to enable language-independent software maintenance.",AOP; Grammar adapters; Program transformation systems; Refactoring,AOP; Aspect oriented software development; Generic platforms; Grammar adapters; Language extensions; New approaches; Program transformation systems; Programming language; Refactorings; Research objectives; Software design techniques; Software engineering tools; Software Evolution; Software maintenance; Software reengineering; System adaptation; Transformation functions; Computer software maintenance; Computer systems programming; Legacy systems; Maintainability; Reengineering; Software design; Object oriented programming,AOP;Grammar adapters;Program transformation systems;Refactoring;Aspect oriented software development;Generic platforms;Language extensions;New approaches;Programming language;Refactorings;Research objectives;Software design techniques;Software engineering tools;Software Evolution;Software maintenance;Software reengineering;System adaptation;Transformation functions;Computer software maintenance;Computer systems programming;Legacy systems;Maintainability;Reengineering;Software design;Object oriented programming,"Roychoudhury, S.; Department of Computer and Information Sciences, University of Alabama at Birmingham, Birmingham, AL 35294, United States; email: roychous@cis.uab.edu",,,,,,,,1581138334; 9781581138337,,,English,Proc Conf Object Orient Program Syst Lang Appl OOPSLA,Conference Paper,Scopus,,2-s2.0-79951761223,2-s2.0-79951746798,United States,cis.uab.edu,,,Roychoudhury S.
"Di Penta, M., Neteler, M., Antoniol, G., Merlo, E.",A language-independent software renovation framework,2005,JOURNAL OF SYSTEMS AND SOFTWARE,77,3,,225,240,16,17,10.1016/j.jss.2004.03.033,,"Univ Sannio, Res Ctr Software Technol, Dept Engn, I-82100 Benevento, Italy; IRST, I-38050 Trento, Italy; Ecole Polytech Montreal, Dept Genie Informat, Montreal, PQ H3C 3A7, Canada",,"One of the undesired effects of software evolution is the proliferation of unused components, which are not used by any application. As a consequence, the size of binaries and libraries tends to grow and system maintainability tends to decrease. At the same time, a major trend of today's software market is the porting of applications on hand-held devices or, in general, on devices which have a limited amount of available resources. Refactoring and, in particular, the miniaturization of libraries and applications are therefore necessary. We propose a Software Renovation Framework (SRF) and a toolkit covering several aspects of software renovation, such as removing unused objects and code clones, and refactoring existing libraries into smaller more cohesive ones. Refactoring has been implemented in the SRF using a hybrid approach based on hierarchical clustering, on genetic algorithms and hill climbing, also taking into account the developers' feedback. The SRF aims to monitor software system quality in terms of the identified affecting factors, and to perform renovation activities when necessary. Most of the framework activities are language-independent, do not require any kind of source code parsing, and rely on object module analysis. The SRF has been applied to GRASS, which is a large open source Geographical Information System of about one million LOCs in size. It has significantly improved the software organization, has reduced by about 50% the average number of objects linked by each application, and has consequently also reduced the applications' memory requirements. (c) 2004 Elsevier Inc. All rights reserved.",refactoring; software renovation; clustering; genetic algorithms; hill climbing,LEGACY SYSTEMS; JAVA,refactoring;software renovation;clustering;genetic algorithms;hill climbing;LEGACY SYSTEMS;JAVA,dipenta@unisannio.it; neteler@itc.it; antoniol@ieee.org; merlo@info.polymtl.ca,,"360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA",9th Working Conference on Reverse Engineering,"RICHMOND, VA","OCT 29-NOV 01, 2002",ELSEVIER SCIENCE INC,0164-1212,,,,English,J SYST SOFTWARE,Article; Proceedings Paper,WoS,Computer Science,WOS:000229708600003,2-s2.0-18844449643,Italy;Canada,unisannio.it,Res Ctr Software Technol;I-38050 Trento;Dept Genie Informat,"Res Ctr Software Technol, Italy;I-38050 Trento, Italy;Dept Genie Informat, Canada","Di Penta, M; Neteler, M; Antoniol, G; Merlo, E"
"Vassallo, C., Grano, G., Palomba, F., Gall, H.C., Bacchelli, A.",A large-scale empirical exploration on refactoring activities in open source software projects,2019,SCIENCE OF COMPUTER PROGRAMMING,180,,,1,15,15,0,10.1016/j.scico.2019.05.002,,"[Vassallo, Carmine; Grano, Giovanni; Palomba, Fabio; Gall, Harald C.; Bacchelli, Alberto] Univ Zurich, Zurich, Switzerland",,"Refactoring is a well-established practice that aims at improving the internal structure of a software system without changing its external behavior. Existing literature provides evidence of how and why developers perform refactoring in practice. In this paper, we continue on this line of research by performing a large-scale empirical analysis of refactoring practices in 200 open source systems. Specifically, we analyze the change history of these systems at commit level to investigate: (i) whether developers perform refactoring operations and, if so, which are more diffused and (ii) when refactoring operations are applied, and (iii) which are the main developer-oriented factors leading to refactoring. Based on our results, future research can focus on enabling automatic support for less frequent refactorings and on recommending refactorings based on the developer's workload, project's maturity and developer's commitment to the project. (C) 2019 Elsevier B.V. All rights reserved.",Refactoring; Software Evolution; Software Maintenance,IDENTIFICATION; SMELL,Refactoring;Software Evolution;Software Maintenance;IDENTIFICATION;SMELL,vassallo@ifi.uzh.ch; grano@ifi.uzh.ch; palomba@ifi.uzh.ch; gall@ifi.uzh.ch; bacchelli@ifi.uzh.ch,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,0167-6423,,,,English,SCI COMPUT PROGRAM,Article,WoS,Computer Science,WOS:000481724800001,2-s2.0-85065542163,Switzerland,ifi.uzh.ch,Univ Zurich,"Univ Zurich, Switzerland","Vassallo, Carmine; Grano, Giovanni; Palomba, Fabio; Gall, Harald C.; Bacchelli, Alberto"
"Palomba, F., Bavota, G., Di Penta, M., Fasano, F., Oliveto, R., De Lucia, A.",A large-scale empirical study on the lifecycle of code smell co-occurrences,2018,INFORMATION AND SOFTWARE TECHNOLOGY,99,,,1,10,10,10,10.1016/j.infsof.2018.02.004,,"[Palomba, Fabio] Univ Zurich, Binzmuhlestr 14, CH-8050 Zurich, Switzerland; [Bavota, Gabriele] Univ Svizzera Italiana, Via Giuseppe Buffi 13, CH-6900 Lugano, Switzerland; [Di Penta, Massimiliano] Univ Sannio, Via Traicuto 3, I-82100 Benevento, Italy; [Fasano, Fausto; Oliveto, Rocco] Univ Molise, Via Hertz 1, I-86090 Pesche, Italy; [De Lucia, Andrea] Univ Salerno, Via Giovanni Paolo II 132, I-84084 Fisciano, Italy",,"Context: Code smells are suboptimal design or implementation choices made by programmers during the development of a software system that possibly lead to low code maintainability and higher maintenance costs. Objective: Previous research mainly studied the characteristics of code smell instances affecting a source code file, while only few studies analyzed the magnitude and effects of smell co-occurrence, i.e., the co-occurrence of different types of smells on the same code component. This paper aims at studying in details this phenomenon. Method: We analyzed 13 code smell types detected in 395 releases of 30 software systems to firstly assess the extent to which code smells co-occur, and then we analyze (i) which code smells co-occur together, and (ii) how and why they are introduced and removed by developers. Results: 59% of smelly classes are affected by more than one smell, and in particular there are six pairs of smell types (e.g., Message Chains and Spaghetti Code) that frequently co-occur. Furthermore, we observed that method-level code smells may be the root cause for the introduction of class-level smells. Finally, code smell co-occurrences are generally removed together as a consequence of other maintenance activities causing the deletion of the affected code components (with a consequent removal of the code smell instances) as well as the result of a major restructuring or scheduled refactoring actions. Conclusions: Based on our findings, we argue that more research aimed at designing co-occurrence-aware code smell detectors and refactoring approaches is needed.",Code smells co-occurrences; Empirical study; Mining software repositories,BAD,Code smells co-occurrences;Empirical study;Mining software repositories;BAD,palomba@ifi.uzh.ch,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000432767900001,2-s2.0-85042941931,Switzerland;Italy,ifi.uzh.ch,Univ Zurich;Univ Svizzera Italiana;Univ Sannio;Univ Molise;Univ Salerno,"Univ Zurich, Switzerland;Univ Svizzera Italiana, Switzerland;Univ Sannio, Italy;Univ Molise, Italy;Univ Salerno, Italy","Palomba, Fabio; Bavota, Gabriele; Di Penta, Massimiliano; Fasano, Fausto; Oliveto, Rocco; De Lucia, Andrea"
"Cheng, Y.C., Jwo, J.S., Tsai, C.T.",A Leading Indicator of Post-Release Defect Density in Refactoring-Based Software Maintenance: A Case Study,2016,JOURNAL OF INTERNET TECHNOLOGY,17,3,,589,597,9,0,10.6138/JIT.2016.17.3.20151110d,,"[Cheng, Yu Chin] Natl Taipei Univ Technol, Dept Comp Sci & Informat Engn, Taipei 106, Taiwan; [Jwo, Jung-Sing; Tsai, Ching-Tsorng] Tunghai Univ, Dept Comp Sci, Taichung 40704, Taiwan",,"We look to create a leading indicator to relate the trend-of-change of the post-release defect density for two consecutive releases of a software product. We propose a rational form in which the ratio of changes of each identified internal quality factor appears as a multiplicative term either at the numerator or at the de-nominator. For a collection of factors identified as interrelated to refactoring, the best formulation is found experimentally by exhaustive enumeration. In the case study that involves a maintenance phase to bring the post-release defect densities of two suites of tools down to within the organization's upper limit, the proposed leading indicator correctly generated the desired negative correlation with the trend of changes in post release defect density.",Leading indicator; Post-release defect density; Internal quality factor; Refactoring; Software maintenance,OBJECT-ORIENTED DESIGN; PREDICTION; METRICS,Leading indicator;Post-release defect density;Internal quality factor;Refactoring;Software maintenance;OBJECT-ORIENTED DESIGN;PREDICTION;METRICS,yccheng@csie.ntut.edu.tw; jwo@thu.edu.tw; cttsai@thu.edu.tw,,"LIB & INFORMATION CTR, ILAN, 26047, TAIWAN","International Conference on Innovation, Communication and Engineering (ICICE)","Guiyang, PEOPLES R CHINA","OCT 18-22, 2014","NATL ILAN UNIV, JIT",1607-9264,,,,English,J INTERNET TECHNOL,Article; Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000377557700022,WOS:000454394100185;2-s2.0-84973533363;2-s2.0-84926433472,Taiwan,csie.ntut.edu.tw,Natl Taipei Univ Technol;Tunghai Univ,"Natl Taipei Univ Technol, Taiwan;Tunghai Univ, Taiwan","Cheng, Yu Chin; Jwo, Jung-Sing; Tsai, Ching-Tsorng"
"Biray, C., Buzluca, F.",A Learning-Based Method for Detecting Defective Classes in Object-Oriented Systems,2015,"2015 IEEE EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION WORKSHOPS (ICSTW)",,,,,,8,2,,,"[Biray, Cagil] Ericsson Turkey R&D, Istanbul, Turkey; [Buzluca, Feza] Istanbul Tech Univ, Dept Comp Engn, TR-80626 Istanbul, Turkey",,"Code or design problems in software classes reduce understandability, flexibility and reusability of the system. Performing maintenance activities on defective components such as adding new features, adapting to the changes, finding bugs, and correcting errors, is hard and consumes a lot of time. Unless the design defects are corrected by a refactoring process these error-prone classes will most likely generate new errors after later modifications. Therefore, these classes will have a high error frequency (EF), which is defined as the ratio between the number of errors and modifications. Early estimate of error-prone classes helps developers to focus on defective modules, thus reduces testing time and maintenance costs. In this paper, we propose a learning-based decision tree model for detecting error-prone classes with structural design defects. The main novelty in our approach is that we consider EFs and change counts (ChC) of classes to construct a proper data set for the training of the model. We built our training set that includes design metrics of classes by analyzing numerous releases of real-world software products and considering EFs of classes to mark them as error-prone or non-error-prone. We evaluated our method using two long-standing software solutions of Ericsson Turkey. We shared and discussed our findings with the development teams. The results show that, our approach succeeds in finding error-prone classes and it can be used to decrease the testing and maintenance costs.",bug prediction; software defects; software quality; decision tree,,bug prediction;software defects;software quality;decision tree,cagil.biray@ericsson.com; buzluca@itu.edu.tr,,"345 E 47TH ST, NEW YORK, NY 10017 USA","8th IEEE International Conference on Software Testing, Verification and Validation Workshops (ICSTW)","Graz, AUSTRIA","APR 13-17, 2015",IEEE,2159-4848,978-1-4799-1885-0,,,English,IEEE ICST WORKSHOP,Proceedings Paper,WoS,Computer Science,WOS:000373338600073,2-s2.0-84934325223,Turkey,ericsson.com,Ericsson Turkey R&D;Istanbul Tech Univ,"Ericsson Turkey R&D, Turkey;Istanbul Tech Univ, Turkey","Biray, Cagil; Buzluca, Feza"
"Kuhlemann M., Liang L., Saake G.",Algebraic and cost-based optimization of refactoring sequences,2010,CEUR Workshop Proceedings,625,,,37,48,,2,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84889005085&partnerID=40&md5=cb186fb7008be059173121746a40fc74,"University of Magdeburg, Germany","Kuhlemann, M., University of Magdeburg, Germany; Liang, L., University of Magdeburg, Germany; Saake, G., University of Magdeburg, Germany","Software product lines comprise techniques to tailor a program by selecting features. One approach to implement product lines is to translate selected features into sequenced program transformations which extend a base program. However, a sequence translated from the user selection can be inefficient to execute. In this paper, we show how we optimize sequences of refactoring transformations to reduce the composition time for product line programs.",,Composition time; Cost-based optimization; Product-lines; Program transformations; Refactorings; Software Product Line; User selection; Production engineering; Optimization,Composition time;Cost-based optimization;Product-lines;Program transformations;Refactorings;Software Product Line;User selection;Production engineering;Optimization,University of MagdeburgGermany,,,,,,,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-84889005085,,Germany,No email,,,"Kuhlemann M., Liang L., Saake G."
"Gheyi, R., Massoni, T., Borba, P.",Algebraic Laws for Feature Models,2008,JOURNAL OF UNIVERSAL COMPUTER SCIENCE,14,21,,3573,3591,19,11,,,"[Gheyi, Rohit; Massoni, Tiago] Univ Fed Campina Grande, Dept Comp & Syst, Campina Grande, Brazil; [Borba, Paulo] Univ Fed Pernambuco, Informat Ctr, Recife, PE, Brazil",,"Software Product Lines (SPL) may be adopted by either bootstrapping existing software products into a SPL, or extending an existing SPL to encompass an additional software product. Program refactorings are usually applied for carrying out those tasks. The notion of SPL refactoring is an extension of the traditional definition of refactoring; it involves not only program refactorings, but also Feature Model ( FM) refactorings, in order to improve configurability. However, FM refactorings are hard to define, due to the incompleteness of the refactoring catalogs developed as of today. In this paper, we propose a complete, sound catalog of algebraic laws, making up special FM refactorings that preserve configurability. This catalog is also defined as minimal, as one law cannot be derived from another one in the same catalog. In addition, a theory for FMs is presented, in the context of a theorem prover.",feature models; refactoring; algebraic laws; software product lines,,feature models;refactoring;algebraic laws;software product lines,rohit@dsc.ufcg.edu.br; massoni@dsc.ufcg.edu.br; phmb@cin.ufpe.br,,"INFFELDGASSE 16C, GRAZ, A-8010, AUSTRIA",12th Brazilian Symposium on Programming Languages,"Fortaleza, BRAZIL",2008,"GRAZ UNIV TECHNOLGOY, INST INFORMATION SYSTEMS COMPUTER MEDIA-IICM",0948-695X,,,,English,J UNIVERS COMPUT SCI,Article; Proceedings Paper,WoS,Computer Science,WOS:000264754900011,2-s2.0-63649115603,Brazil,dsc.ufcg.edu.br,Univ Fed Campina Grande;Univ Fed Pernambuco,"Univ Fed Campina Grande, Brazil;Univ Fed Pernambuco, Brazil","Gheyi, Rohit; Massoni, Tiago; Borba, Paulo"
"Borba P., Sampaio A., Cavalcanti A., Cornelio M.A.",Algebraic reasoning for object-oriented programming,2004,Science of Computer Programming,52,1-3,,53,100,,52,10.1016/j.scico.2004.03.003,https://www.scopus.com/inward/record.uri?eid=2-s2.0-3042774757&doi=10.1016%2fj.scico.2004.03.003&partnerID=40&md5=67e799f4d36369d4f2a76d3a488d2f3f,"Informatics Center, Federal University of Pernambuco, Recife 50740-540, Brazil; Computing Laboratory, University of Kent, Canterbury CT2 7NF, United Kingdom; Polytechnic School, University of Pernambuco, Recife 50750-410, Brazil","Borba, P., Informatics Center, Federal University of Pernambuco, Recife 50740-540, Brazil; Sampaio, A., Informatics Center, Federal University of Pernambuco, Recife 50740-540, Brazil; Cavalcanti, A., Computing Laboratory, University of Kent, Canterbury CT2 7NF, United Kingdom; Cornélio, M.A., Informatics Center, Federal University of Pernambuco, Recife 50740-540, Brazil, Polytechnic School, University of Pernambuco, Recife 50750-410, Brazil","We present algebraic laws for a language similar to a subset of sequential Java that includes inheritance, recursive classes, dynamic binding, access control, type tests and casts, assignment, but no sharing. These laws are proved sound with respect to a weakest precondition semantics. We also show that they are complete in the sense that they are sufficient to reduce an arbitrary program to a normal form substantially close to an imperative program; the remaining object-oriented constructs could be further eliminated if our language had recursive records. This suggests that our laws are expressive enough to formally derive behaviour preserving program transformations; we illustrate that through the derivation of provably-correct refactorings. © 2004 Elsevier B.V. All rights reserved.",,Boolean algebra; Computer software; Object oriented programming; Semantics; Software engineering; Algebric laws; Dynamic binding; Program transformations; Recursive classes; Computer programming languages,Boolean algebra;Computer software;Object oriented programming;Semantics;Software engineering;Algebric laws;Dynamic binding;Program transformations;Recursive classes;Computer programming languages,"Borba, P.; Informatics Center, Federal University of Pernambuco, Recife 50740-540, Brazil; email: phmb@cin.ufpe.br",,,,,,,01676423,,SCPGD,,English,Sci Comput Program,Article,Scopus,,2-s2.0-3042774757,,Brazil;United Kingdom,cin.ufpe.br,,,"Borba P., Sampaio A., Cavalcanti A., Cornelio M.A."
"Sotolongo R., Dongfang Y., Hirota K.",Algorithm for code clone refinement based on semantic analysis of multiple detection reports using WordNet,2010,"4th International Symposium on Computational Intelligence and Industrial Applications, ISCIIA 2010",,,,191,198,,2,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84855543476&partnerID=40&md5=73308cf3a9db9d3845e4ccb5b7936bbc,"Department of Computational Intelligence and Systems Science, Tokyo Institute of Technology, G3-49, 4259 Nagatsuta, Midori-ku, Yokohama 226-8502, Japan","Sotolongo, R., Department of Computational Intelligence and Systems Science, Tokyo Institute of Technology, G3-49, 4259 Nagatsuta, Midori-ku, Yokohama 226-8502, Japan; Dongfang, Y., Department of Computational Intelligence and Systems Science, Tokyo Institute of Technology, G3-49, 4259 Nagatsuta, Midori-ku, Yokohama 226-8502, Japan; Hirota, K., Department of Computational Intelligence and Systems Science, Tokyo Institute of Technology, G3-49, 4259 Nagatsuta, Midori-ku, Yokohama 226-8502, Japan","An algorithm based on semantic analysis of multiple detection tools' reports using WordNet is proposed oriented on the refinement of code clones. It parses different detection tools' reports looking for new clone specifications, and for refines the location of existing ones using semantic information contained in source code. It is applied to a real complex software system and is compared to three other well-known detection algorithms, discovering 95 clone pairs more than the average detected by other tools; also making the code clones 3 lines longer. The objective is to provide higher quantity of code clones, and more appropriated localization to be used in refactoring processes.",Code clones; Component; Refinement; Semantic analysis; Wordnet,Code clone; Component; Refinement; Semantic analysis; Wordnet; Algorithms; Artificial intelligence; Codes (symbols); Industrial applications; Inspection equipment; Ontology; Semantics; Cloning,Code clones;Component;Refinement;Semantic analysis;Wordnet;Code clone;Algorithms;Artificial intelligence;Codes (symbols);Industrial applications;Inspection equipment;Ontology;Semantics;Cloning,"Sotolongo, R.; Department of Computational Intelligence and Systems Science, Tokyo Institute of Technology, G3-49, 4259 Nagatsuta, Midori-ku, Yokohama 226-8502, Japan; email: sotolongo@hrt.dis.titech.ac.jp",,,,,,,,9787121113154,,,English,"Int. Symp. Comput. Intell. Ind. Appl., ISCIIA",Conference Paper,Scopus,,2-s2.0-84855543476,,Japan,hrt.dis.titech.ac.jp,,,"Sotolongo R., Dongfang Y., Hirota K."
"Vincke, R., Van Landschoot, S., Cordemans, P., Peuteman, J., Steegmans, E., Boydens, J.","Algorithm Parallelization using Software Design Patterns, an Embedded Case Study Approach",2013,"2013 EIGHTH INTERNATIONAL CONFERENCE ON P2P, PARALLEL, GRID, CLOUD AND INTERNET COMPUTING (3PGCIC 2013)",,,,470,473,4,0,10.1109/3PGCIC.2013.80,,,,"Multicore embedded systems introduce new opportunities and challenges. Scaling of computational power is one of the main reasons for transition to a multicore environment. In most cases parallelization of existing algorithms is time consuming and error prone, dealing with low-level constructs. Migrating principles of object-oriented design patterns to parallel embedded software avoids this. We propose a top-down approach for refactoring existing sequential to parallel algorithms in an intuitive way, avoiding the usage of locking mechanisms. We illustrate the approach on the well known Fast Fourier Transformation algorithm. Parallel design patterns, such as Map Reduce, Divide-and-Conquer and Task Parallelism assist to derive a parallel approach for calculating the Fast Fourier Transform. By combining these design patterns, a robust and better performing application is obtained.",multicore embedded software; parallel design patterns; Fast Fourier Transform,FFT,multicore embedded software;parallel design patterns;Fast Fourier Transform;FFT,,"Xhafa, F; Barolli, L; Nace, D; Vinticinque, S; Bui, A","345 E 47TH ST, NEW YORK, NY 10017 USA","8th International Conference on P2P, Parallel, Grid, Cloud and Internet Computing (3PGCIC)","Univ Technol Compiegne, Compiegne, FRANCE","OCT 28-30, 2013",IEEE,,978-0-7695-5094-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000329179100073,2-s2.0-84893455258,,No email,,,"Vincke, Robbie; Van Landschoot, Sille; Cordemans, Piet; Peuteman, Joan; Steegmans, Eric; Boydens, Jeroen"
"Zhou J., Zhao D., Liu J.",A lightweight component-based development approach for enterprise applications,2011,Proceedings - International Computer Software and Applications Conference,,, 6032260,335,340,,1,10.1109/COMPSACW.2011.62,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80054978704&doi=10.1109%2fCOMPSACW.2011.62&partnerID=40&md5=80cfb0bc49c9f28525fcfb39454412cd,"College of Information Science and Engineering, Northeastern University, 110004, Shenyang, China; State Key Laboratory of Software Architecture (Neusoft Corporation), 110179, Shenyang, China","Zhou, J., College of Information Science and Engineering, Northeastern University, 110004, Shenyang, China, State Key Laboratory of Software Architecture (Neusoft Corporation), 110179, Shenyang, China; Zhao, D., College of Information Science and Engineering, Northeastern University, 110004, Shenyang, China, State Key Laboratory of Software Architecture (Neusoft Corporation), 110179, Shenyang, China; Liu, J., State Key Laboratory of Software Architecture (Neusoft Corporation), 110179, Shenyang, China","Component-based development (CBD) is considered as a promising way to improve software productivity and quality by reusing some pre-existing components. However, in real practice, such a paradigm is not fully exploited by many enterprise application (EA) software companies because of the much needed effort and cost. For addressing these problems, we propose a lightweight approach that divides an EA into hierarchical component elements and maps them to a CBD environment based on Eclipse. Such an approach takes most characteristics of EAs into account and the modularity and reusability of the components are assured by OSGi. A real case study focusing on refactoring legacy software to a component-based one with our approach is illustrated its validity. © 2011 IEEE.",Component-based development; Development environment; Enterprise application; Feature modeling; OSGi,Component-Based Development; Development environment; Enterprise applications; Feature modeling; OSGi; Computer software; Hierarchical systems; Reusability; Computer applications,Component-based development;Development environment;Enterprise application;Feature modeling;OSGi;Enterprise applications;Computer software;Hierarchical systems;Reusability;Computer applications,"Zhou, J.; College of Information Science and Engineering, Northeastern University, 110004, Shenyang, China; email: zhou-jg@neusoft.com",,,,,,,07303157,9780769544595,PSICD,,English,Proc Int Comput Software Appl Conf,Conference Paper,Scopus,,2-s2.0-80054978704,,China,neusoft.com,,,"Zhou J., Zhao D., Liu J."
"Terra, R., Valente, M.T., Anquetil, N.",A Lightweight Remodularization Process based on Structural Similarity,2016,"PROCEEDINGS OF 2016 X BRAZILIAN SYMPOSIUM ON SOFTWARE COMPONENTS, ARCHITECTURES AND REUSE (SBCARS)",,,,111,120,10,0,10.1109/SBCARS.2016.24,,"[Terra, Ricardo] Fed Univ Lavras UFLA, Dept Comp Sci, Lavras, Brazil; [Valente, Marco Tulio] Fed Univ Minas Gerais UFMG, Dept Comp Sci, Belo Horizonte, MG, Brazil; [Anquetil, Nicolas] INRIA, RMoD Team, Rocquencourt, France",,"Erosion process, when neglected over long periods, may reduce the concrete architecture to a small set of strongly-coupled and weakly-cohesive components. This nullifies the benefits provided by an architectural design, such as maintainability, scalability, portability, etc. In this scenario, the solution might be only achieved through a complete remodularization process. However, most remodularization approaches are heavyweight and lack tool support. This paper, therefore, proposes a lightweight and tool supported remodularization process based on structural similarity. The process is centered on the observation that the remodularization of a software system can be achieved by successive applications of Move Class, Move Method, and Extract Method refactorings. We evaluate the process in a modified version of an open-source software achieving a recall of 100% and a precision of 50%. The design decisions of the proposed process-such as the use of structural similarity, non-implementation of preconditions, and identification of the target entity on demand-were also evaluated obtaining outcome results.",remodularization; structural similarity; refactoring,REFACTORINGS; IDENTIFICATION; EROSION,remodularization;structural similarity;refactoring;REFACTORINGS;IDENTIFICATION;EROSION,terra@dcc.ufla.br; mtov@dcc.ufmg.br; nicolas.anquetil@inria.fr,,"345 E 47TH ST, NEW YORK, NY 10017 USA","10th Brazilian Symposium on Software Components, Architectures and Reuse (SBCARS)","Maringa, BRAZIL","SEP 19-20, 2016",IEEE,2163-5625,978-1-5090-5086-4,,,English,P BRAZ SYMP SOFTW,Proceedings Paper,WoS,Computer Science,WOS:000391544600012,2-s2.0-85011256436,Brazil;France,dcc.ufla.br,Fed Univ Lavras UFLA;Fed Univ Minas Gerais UFMG;INRIA,"Fed Univ Lavras UFLA, Brazil;Fed Univ Minas Gerais UFMG, Brazil;INRIA, France","Terra, Ricardo; Valente, Marco Tulio; Anquetil, Nicolas"
"Grabis, J., Meiers, E., Supulniece, I., Berzisa, S., Ozolins, E., Svaza, A.",Aligning Software Design with Development Team Expertise,2016,"PROCEEDINGS OF THE 18TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 1 (ICEIS)",,,,560,565,6,0,10.5220/0005914105600565,,"[Grabis, Janis; Supulniece, Inese; Berzisa, Solvita] Riga Tech Univ, Inst Informat Technol, Kalku 1, LV-1658 Riga, Latvia; [Meiers, Egils; Ozolins, Edgars; Svaza, Ansis] Visma Enterprise, Kronvalda Bulv 3-5, LV-1010 Riga, Latvia",,"Large enterprise applications are developed by teams of developers specializing in particular functional or technical areas. An overall application architecture is used to guide allocation of development tasks to the development teams. However, quality of the architecture degrades over the application life-cycle and manual refactoring is challenging due to the size and complexity of enterprise applications. This paper proposes to use automated clustering of large enterprise applications, where clusters are built around application business centers, as a means for refactoring the software design with an objective to improve allocation of software modules to development teams. The paper outlines a module allocation process in the framework of the overall enterprise application development process and reports an illustration of the allocation process. The illustration is based on the case of refactoring of a large third tier ERP system.",Enterprise Application; Refactoring; Development Reorganization; Team Expertise; Clustering,PROJECTS,Enterprise Application;Refactoring;Development Reorganization;Team Expertise;Clustering;PROJECTS,,"Hammoudi, S; Maciaszek, L; Missikoff, MM; Camp, O; Cordeiro, J","AV D MANUELL, 27A 2 ESQ, SETUBAL, 2910-595, PORTUGAL",18th International Conference on Enterprise Information Systems (ICEIS),"Rome, ITALY","APR 25-28, 2016",SCITEPRESS,,978-989-758-187-8,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000393155500060,2-s2.0-84979518624,Latvia,No email,Riga Tech Univ;Visma Enterprise,"Riga Tech Univ, Latvia;Visma Enterprise, Latvia","Grabis, Janis; Meiers, Egils; Supulniece, Inese; Berzisa, Solvita; Ozolins, Edgars; Svaza, Ansis"
"Jebelean, C., Chirila, C.B., Cretu, V.",A Logic Based Approach to Locate Composite Refactoring Opportunities in Object-Oriented Code,2010,"PROCEEDINGS OF 2010 IEEE INTERNATIONAL CONFERENCE ON AUTOMATION, QUALITY AND TESTING, ROBOTICS (AQTR 2010), VOLS. 1-3",,,,,,6,2,,,"[Jebelean, Calin; Chirila, Ciprian-Bogdan; Cretu, Vladimir] Univ Politehn Timisoara, Fac Automat & Comp Sci, Timisoara, Romania",,"In today's software engineering, more and more emphasis is put on the quality of object-oriented software design. It is commonly accepted that building a software system with maintainability and reusability issues in mind is far more important than just getting all the requirements fulfilled in one way or another. Design patterns are powerful means to obtain this goal. Tools have been built that automatically detect design patterns in object-oriented code and help in understanding the code. Other tools help in refactoring object-oriented code towards introducing design patterns, but human intelligence is needed to detect where these design patterns should be inserted. This paper proposes a logic approach to the automatic detection of places within object-oriented code where the Composite design pattern could have been used. Suspects identified by such a tool could very well be served as input data for other tools that automatically refactor the code as to introduce the missing design pattern.",,,,calin.jebelean@cs.upt.ro; ciprian.chirila@cs.upt.ro; vladimir.cretu@cs.upt.ro,"Miclea, L; Stoian, I","345 E 47TH ST, NEW YORK, NY 10017 USA","IEEE International Conference on Automation, Quality and Testing, Robotics (AQTR)","Cluj Napoca, ROMANIA","MAY 28-30, 2010",IEEE,1844-7872,978-1-4244-6725-9,,,English,IEEE INT CONF AUTO,Proceedings Paper,WoS,Automation & Control Systems; Engineering; Robotics,WOS:000419281500143,2-s2.0-77958111131,Romania,cs.upt.ro,Univ Politehn Timisoara,"Univ Politehn Timisoara, Romania","Jebelean, Calin; Chirila, Ciprian-Bogdan; Cretu, Vladimir"
"Xu, S.H., Guo, C.K., Liu, L., Xu, J.",A Log-linear Probabilistic Model for Prioritizing Extract Method Refactorings,2017,PROCEEDINGS OF 2017 3RD IEEE INTERNATIONAL CONFERENCE ON COMPUTER AND COMMUNICATIONS (ICCC),,,,2503,2507,5,0,,,"[Xu, Sihan; Guo, Chenkai; Liu, Lei; Xu, Jing] Nankai Univ, Coll Comp & Control Engn, Tianjin, Peoples R China",,"'Extract Method' has been one of the most widely used refactorings, which extracts a piece of code to form a new method. Approaches that automatically recommend Extract Method refactorings have been investigated to facilitate this process. These approaches usually generate candidate Extract Method refactorings, and rank them according to a specific software metric. However, software developers conduct Extract Method refactorings for various reasons. In this paper, we propose an approach that combines method-level software metrics to learns a probabilistic model from real-world refactorings. Experiments compared with two state-of-art approaches have shown the effectiveness of our approach.",software refactoring; extract method; machine learning,,software refactoring;extract method;machine learning,x.sihan@mail.nankai.edu.cn; guochenkai@nankai.edu.cn,,"345 E 47TH ST, NEW YORK, NY 10017 USA",3rd IEEE International Conference on Computer and Communications (ICCC),"Chengdu, PEOPLES R CHINA","DEC 13-16, 2017",IEEE,,978-1-5090-6352-9,,,English,,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000440623602112,2-s2.0-85049694111,China,mail.nankai.edu.cn,Nankai Univ,"Nankai Univ, China","Xu, Sihan; Guo, Chenkai; Liu, Lei; Xu, Jing"
"Hinds-Charles, C., Adames, J., Yang, Y., Shen, Y.S., Wang, Y.",A Longitude Analysis on Bitcoin Issue Repository,2018,PROCEEDINGS OF 2018 1ST IEEE INTERNATIONAL CONFERENCE ON HOT INFORMATION-CENTRIC NETWORKING (HOTICN 2018),,,,212,217,6,0,,,"[Hinds-Charles, Chelsea; Adames, Jenelee; Yang, Ye] Stevens Inst Technol, Sch Syst & Enterprises, Hoboken, NJ 07030 USA; [Shen, Yusong; Wang, Yong] Ocean Univ China, Dept Comp Sci & Technol, Qingdao 266100, Peoples R China",,"As one of the most successful Blockchain systems, Bitcoin evolved over the past 8 years. The collaborative contribution of its online software development community gradually shaped the functionality and performance of Bitcoin. To date, most discussions around Bitcoin are from technologies underlying the product, as well as market applications. There are very few studies on the development and evolution processes of the Bitcoin software. It is important to investigate on such developmental issues, in order to better understand the development methodologies and lessons learnt from such a spearheaded Blockchain system. This paper serves this purpose by examining the issues data extracted from the Bitcoin GitHub repository from 2011 to 2018. It reports the trends of the major development issues from a longitude perspective. The main results include: 1) the average lifespan of an issue in Bitcoin issue repository is approximately 57 days; and 2) the Top-7 issue types including refactoring, tests, doe, RPC.REST.ZMQ, GUI, bugs, and wallet, accounting for 64.3% of all issues; 3) topic modeling techniques are beneficial in mining popularity and evolution of key issue topics and most problematic architecture components. Using data analysis and visualization techniques. this paper suggests the insights for significant development decisions such as better managing issue repository and strategic allocating of bug resolution effort.",Bitcoin; Blockchain; Issues; GitHub Repository; Open Source; Software Engineering,,Bitcoin;Blockchain;Issues;GitHub Repository;Open Source;Software Engineering,chindsch@stevens.edu; jadames@stevens.edu; yyang4@stevens.edu; shenyusong@ouc.edu.cn; wangyong@ouc.edu.cn,"Kai, L","345 E 47TH ST, NEW YORK, NY 10017 USA",1st IEEE International Conference on Hot Information-Centric Networking (HotICN),"Shenzhen, PEOPLES R CHINA","AUG 15-17, 2018",IEEE,,978-1-5386-4870-4,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000458100900034,2-s2.0-85062008762,United States;China,stevens.edu,Stevens Inst Technol;Ocean Univ China,"Stevens Inst Technol, United States;Ocean Univ China, China","Hinds-Charles, Chelsea; Adames, Jenelee; Yang, Ye; Shen, Yusong; Wang, Yong"
"Parande, M.A., Koru, G.",A Longitudinal Analysis of the Dependency Concentration in Smaller Modules for Open-Source Software Products,2010,2010 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,,,5,1,,,"[Parande, Mohammed Aziz; Koru, Gunes] UMBC, Dept Informat Syst, Baltimore, MD 21250 USA",,"Our recent studies on single releases of multiple open-source software (OSS) products showed a higher concentration of dependencies in smaller modules. For one of the products, it was observed that an isolatable and observable refactoring initiative exacerbated this concentration inequality. In this paper, we empirically investigate the dependency concentration in smaller modules from a longitudinal perspective: (1) whether this concentration inequality always exists over product life time; (2) how it changes. We hypothesize that the concentration inequality should either remain at same levels or increase over time. This is because large-scale and long-lived software products usually go through some degree of continuous and intermittent refactoring. Our results show that dependencies concentrate in smaller classes in all releases, and this concentration inequality generally increases over successive releases. We suggest that software practitioners continuously pay a higher QA attention to smaller modules. We also recommend increasing such QA focus as a product matures and goes through refactoring activities.",Software maintenance; software quality; software metrics; open-source software,METRICS; INEQUALITIES,Software maintenance;software quality;software metrics;open-source software;METRICS;INEQUALITIES,parande1@umbc.edu; gkoru@umbc.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Software Maintenance,"Timisoara, ROMANIA","SEP 12-18, 2010",IEEE,1063-6773,978-1-4244-8629-8,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000287356400022,2-s2.0-78650098890,United States,umbc.edu,UMBC,"UMBC, United States","Parande, Mohammed Aziz; Koru, Gunes"
"Nayebi M., Cai Y., Kazman R., Ruhe G., Feng Q., Carlson C., Chew F.",A Longitudinal Study of Identifying and Paying Down Architecture Debt,2019,"Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2019",,, 8804435,171,180,,1,10.1109/ICSE-SEIP.2019.00026,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071184507&doi=10.1109%2fICSE-SEIP.2019.00026&partnerID=40&md5=1bb279dc1fc4552232c24d56e3f6e10c,"Ecole Polytechnique of Montreal, Canada; Drexel University, United States; University of Hawaii, United States; BrightSquid","Nayebi, M., Ecole Polytechnique of Montreal, Canada; Cai, Y., Drexel University, United States; Kazman, R., University of Hawaii, United States; Ruhe, G., University of Hawaii, United States; Feng, Q., Drexel University, United States; Carlson, C., BrightSquid; Chew, F., BrightSquid","Architecture debt is a form of technical debt that derives from the gap between the intended and the actual architecture design. In this study we measured architecture debt in two ways: 1) in terms of system-wide coupling measures, and 2) in terms of the number and severity of architecture flaws. In recent research it was shown that the amount of architecture debt has a huge impact on software maintainability and evolution. Consequently, reducing debt is expected to make software less costly and more amenable to change. This paper reports on a longitudinal study of a healthcare communications product created by BrightSquid Secure Communications Corp. This young company is facing the typical trade-off problem of desiring responsiveness to change requests, but wanting to avoid the ever-increasing effort that the accumulation of quick-And-dirty changes eventually incurs. In the first stage of the study, we analyzed the status of the 'before' system, which showed the impacts of change requests. This initial study motivated a more in-depth analysis of architecture debt. The results of this debt analysis were used in the second stage of the work to motivate a comprehensive refactoring of the software system. The third stage was a follow-on architecture debt analysis which quantified the improvements realized. Using this quantitative evidence, augmented by qualitative evidence gathered from in-depth interviews with BrightSquid's architects, we present lessons learned about the costs and benefits of paying down architecture debt in practice. © 2019 IEEE.",Architecture debt; Cost-benefit analysis; Longitudinal study; Refactoring,Economic and social effects; Software engineering; Architecture designs; Costs and benefits; In-depth analysis; In-depth interviews; Longitudinal study; Refactorings; Software maintainability; Trade-off problem; Cost benefit analysis,Architecture debt;Cost-benefit analysis;Longitudinal study;Refactoring;Economic and social effects;Software engineering;Architecture designs;Costs and benefits;In-depth analysis;In-depth interviews;Refactorings;Software maintainability;Trade-off problem;Cost benefit analysis,,,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781728117607,,,English,"Proc. - IEEE/ACM Int. Conf. Softw. Eng.: Softw. Eng. Pract., ICSE-SEIP",Conference Paper,Scopus,,2-s2.0-85071184507,,Canada;United States;BrightSquid,No email,,,"Nayebi M., Cai Y., Kazman R., Ruhe G., Feng Q., Carlson C., Chew F."
"Lu, K.S., Chang, C.K.",ALTA: Automatic Load-time Adaptation Technique for Refactoring-based Evolution of Software Component,2012,2012 IEEE 36TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC),,,,203,212,10,0,10.1109/COMPSAC.2012.96,,"[Lu, Kai-Shin; Chang, Carl K.] Iowa State Univ, Dept Comp Sci, Ames, IA 50011 USA",,"Evolution of software components may lead to compatibility problems. State-of-the-art fully-automatic compatibility solutions either require source code, or they fail to support refactorings that may lead to conflict method signatures, such as changing the order of same-typed parameters or changing return types. Moreover, all of them will statically modify source or binary files, which may violate the license agreements of components. In this paper, we propose ALTA, a fully-automatic adaptation technique for refactoring-based evolution of software component. ALTA supports refactorings that may lead to conflict method signatures. In addition, ALTA can perform load-time adaptation, and therefore it can work under all kinds of license agreements. We also present ALTA*, an implementation of ALTA by Java and AspectJ. The evaluation results show that ALTA* effectively solves compatibility problems in real-world components with a performance overhead of load-time adaptation feature (if enabled) at around 11%.",Aspect Oriented Programming; AspectJ; Eclipse; Load-Time Weaving; Adaptation; Refactoring History,SUPPORT,Aspect Oriented Programming;AspectJ;Eclipse;Load-Time Weaving;Adaptation;Refactoring History;SUPPORT,kslu@cs.iastate.edu; chang@cs.iastate.edu,"Bai, X; Belli, F; Bertino, E; Chang, CK; Elci, A; Seceleanu, C; Xie, H; Zulkernine, M","345 E 47TH ST, NEW YORK, NY 10017 USA",36th Annual IEEE International Computer Software and Applications Conference (COMPSAC),"Izmir Inst Technol (IZTECH), Izmir, TURKEY","JUL 16-20, 2012",IEEE,0730-3157,978-0-7695-4736-7,,,English,P INT COMP SOFTW APP,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000312376000028,2-s2.0-84870851477,United States,cs.iastate.edu,Iowa State Univ,"Iowa State Univ, United States","Lu, Kai-Shin; Chang, Carl K."
"Vakilian M., Johnson R.E.",Alternate refactoring paths reveal usability problems,2014,Proceedings - International Conference on Software Engineering,,1,,1106,1116,,13,10.1145/2568225.2568282,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994137624&doi=10.1145%2f2568225.2568282&partnerID=40&md5=f83397eaa4ef8f77e94832f87621b715,"University of Illinois at Urbana-Champaign, United States","Vakilian, M., University of Illinois at Urbana-Champaign, United States; Johnson, R.E., University of Illinois at Urbana-Champaign, United States","Modern Integrated Development Environments (IDEs) support many refactorings. Yet, programmers greatly underuse automated refactorings. Recent studies have applied traditional usability testing methodologies such as surveys, lab studies, and interviews to find the usability problems of refactoring tools. However, these methodologies can identify only certain kinds of usability problems. The critical incident technique (CIT) is a general methodology that uncovers usability problems by analyzing troubling user interactions. We adapt CIT to refactoring tools and show that alternate refactoring paths are indicators of the usability problems of refactoring tools. We define an alternate refactoring path as a sequence of user interactions that contains cancellations, reported messages, or repeated invocations of the refactoring tool. We evaluated our method on a large corpus of refactoring usage data, which we collected during a field study on 36 programmers over three months. This method revealed 15 usability problems, 13 of which were previously unknown. We reported these problems and proposed design improvements to Eclipse developers. The developers acknowledged all of the problems and have already fixed four of them. This result suggests that analyzing alternate paths is effective at discovering the usability problems of interactive program transformation (IPT) tools. © 2014 ACM.",critical incident; empirical; evaluation; Refactoring; usability,Job analysis; Software engineering; Critical incidents; empirical; evaluation; Refactorings; usability; Usability engineering,critical incident;empirical;evaluation;Refactoring;usability;Job analysis;Software engineering;Critical incidents;Refactorings;Usability engineering,,,,,,,IEEE Computer Society,02705257,,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-84994137624,,United States,No email,,,"Vakilian M., Johnson R.E."
"Bayne, M., Cook, R., Ernst, M.D.",Always-Available Static and Dynamic Feedback,2011,2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE),,,,521,530,10,7,,,"[Bayne, Michael; Cook, Richard; Ernst, Michael D.] Univ Washington, Seattle, WA 98195 USA",,"Developers who write code in a statically typed language are denied the ability to obtain dynamic feedback by executing their code during periods when it fails the static type checker. They are further confined to the static typing discipline during times in the development process where it does not yield the highest productivity. If they opt instead to use a dynamic language, they forgo the many benefits of static typing, including machine-checked documentation, improved correctness and reliability, tool support (such as for refactoring), and better runtime performance. We present a novel approach to giving developers the benefits of both static and dynamic typing, throughout the development process, and without the burden of manually separating their program into staticallyand dynamically-typed parts. Our approach, which is intended for temporary use during the development process, relaxes the static type system and provides a semantics for many type-incorrect programs. It defers type errors to run time, or suppresses them if they do not affect runtime semantics. We implemented our approach in a publicly available tool, DuctileJ, for the Java language. In case studies, DuctileJ conferred benefits both during prototyping and during the evolution of existing code.",dynamic typing; gradual typing; hybrid typing; productivity; prototyping; refactoring; static typing; type error,,dynamic typing;gradual typing;hybrid typing;productivity;prototyping;refactoring;static typing;type error,mdb@cs.washington.edu; rcook@cs.washington.edu; mernst@cs.washington.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",33rd International Conference on Software Engineering (ICSE),"Honolulu, HI","MAY 21-28, 2011",IEEE,,978-1-4503-0445-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000297156400053,2-s2.0-79959915685,United States,cs.washington.edu,Univ Washington,"Univ Washington, United States","Bayne, Michael; Cook, Richard; Ernst, Michael D."
"Cleland-Huang J., Czauderna A., Gibiec M., Emenecker J.",A machine learning approach for tracing regulatory codes to product specific requirements,2010,Proceedings - International Conference on Software Engineering,1,,,155,164,,107,10.1145/1806799.1806825,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954755668&doi=10.1145%2f1806799.1806825&partnerID=40&md5=e2e602d1fb99bc02d95267a21d738c34,"Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States","Cleland-Huang, J., Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States; Czauderna, A., Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States; Gibiec, M., Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States; Emenecker, J., Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States","Regulatory standards, designed to protect the safety, security, and privacy of the public, govern numerous areas of software intensive systems. Project personnel must therefore demonstrate that an as-built system meets all relevant regulatory codes. Current methods for demonstrating compliance rely either on after-the-fact audits, which can lead to significant refactoring when regulations are not met, or else require analysts to construct and use traceability matrices to demonstrate compliance. Manual tracing can be prohibitively time-consuming; however automated trace retrieval methods are not very effective due to the vocabulary mismatches that often occur between regulatory codes and product level requirements. This paper introduces and evaluates two machine-learning methods, designed to improve the quality of traces generated between regulatory codes and product level requirements. The first approach uses manually created traceability matrices to train a trace classifier, while the second approach uses web-mining techniques to reconstruct the original trace query. The techniques were evaluated against security regulations from the USA government's Health Insurance Privacy and Portability Act (HIPAA) traced against ten healthcare related requirements specifications. Results demonstrated improvements for the subset of HIPAA regulations that exhibited high fan-out behavior across the requirements datasets. © 2010 ACM.",regulatory compliance; requirements classification; traceability,After-the-fact; Data sets; Fan-out; Machine-learning; Manual tracing; Refactorings; Regulatory standards; Requirements specifications; Retrieval methods; Security regulations; Software intensive systems; Two machines; Webmining; Health insurance; Learning systems; Regulatory compliance; Computer software,regulatory compliance;requirements classification;traceability;After-the-fact;Data sets;Fan-out;Machine-learning;Manual tracing;Refactorings;Regulatory standards;Requirements specifications;Retrieval methods;Security regulations;Software intensive systems;Two machines;Webmining;Health insurance;Learning systems;Computer software,"Cleland-Huang, J.; Systems and Requirements Engineering Center (SAREC), DePaul University, Chicago, IL, United States; email: jhuang@cs.depaul.edu",,,,,,,02705257,9781605587196,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-77954755668,,United States,cs.depaul.edu,,,"Cleland-Huang J., Czauderna A., Gibiec M., Emenecker J."
"Archuleta, J., Tilevich, E., Feng, W.C.",A maintainable software architecture for fast and modular Bioinformatics sequence search,2007,2007 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,314,323,10,3,,,"[Archuleta, Jeremy; Tilevich, Eli; Feng, Wu-chun] Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA",,"Bioinformaticists use the Basic Local Alignment Search Tool (BLAST) to characterize an unknown sequence by comparing it against a database of known sequences, thus detecting evolutionary relationships and biological properties. mpiBLAST is a widely-used, high-performance, open-source parallelization of BLAST that runs on a computer cluster delivering super-linear speedups. However, the Achilles heel of mpiBLAST is its lack of modularity, thus adversely affecting maintainability and extensibility. Alleviating this shortcoming requires an architectural refactoring to improve maintenance and extensibility while preserving high performance. Toward that end, this paper evaluates five different software architectures and details how each satisfies our design objectives. In addition, we introduce a novel approach to using mixin layers to enable mixing-and-matching of modules in constructing sequence-search applications for a variety of high-performance computing systems. Our design, which we call ""mixin layers with refined roles"", utilizes mixin layers to separate functionality into complementary modules and the refined roles in each layer improve the, inherently modular design by precipitating flexible and structured parallel development, a necessity for an open-source application. We believe that this new software architecture for mpiBLAST-2.0 will benefit both the users and developers of the package and that our evaluation of different software architectures will be of value to other software engineers faced with the challenges of creating maintainable and extensible, high-performance, bioinformatics software.",,,,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",23rd IEEE International Conference on Software Maintenance,"Paris, FRANCE","OCT 02-05, 2007",IEEE,1063-6773,978-1-4244-1255-6,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000253832800034,2-s2.0-47349117941,United States,No email,Virginia Tech,"Virginia Tech, United States","Archuleta, Jeremy; Tilevich, Eli; Feng, Wu-chun"
"Kadar I., Hegedus P., Ferenc R., Gyimothy T.",A manually validated code refactoring dataset and its assessment regarding software maintainability,2016,ACM International Conference Proceeding Series,,, 2972962,,,,6,10.1145/2972958.2972962,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85047085071&doi=10.1145%2f2972958.2972962&partnerID=40&md5=71bd468a3c7aca0de500ec210bffab80,"University of Szeged, Hungary","Kadar, I., University of Szeged, Hungary; Hegedus, P., University of Szeged, Hungary; Ferenc, R., University of Szeged, Hungary; Gyimothy, T., University of Szeged, Hungary","Refactoring is a popular technique for improving the internal structure of software systems. It has a solid theoretical background while being used in development practice at the same time. However, we lack empirical research results on the real effect of code refactoring and its ways of application. This paper presents a manually validated dataset of applied refactorings and source code metrics and maintainability of 7 open-source systems. It is a subset of our previously published dataset containing the refactoring instances automatically extracted by the RefFinder tool. We found that RefFinder had around 27% overall average precision on the subject systems, thus our new – manually validated – subset has substantial added value allowing researchers to perform more accurate empirical investigations. Using this data, we were able to study whether refactorings were really triggered by poor maintainability of the code, or by other aspects. The results show that source code elements subject to refactorings had significantly lower maintainability values (approximated by source code metric aggregation) than elements not affected by refactorings between two releases. © 2016 ACM.",Code refactoring; Empirical study; Manually validated empirical dataset; Software maintainability,Codes (symbols); Computer programming languages; Maintainability; Open source software; Predictive analytics; Code re-factoring; Development practices; Empirical investigation; Empirical research; Empirical studies; Manually validated empirical dataset; Software maintainability; Source code metrics; Open systems,Code refactoring;Empirical study;Manually validated empirical dataset;Software maintainability;Codes (symbols);Computer programming languages;Maintainability;Open source software;Predictive analytics;Code re-factoring;Development practices;Empirical investigation;Empirical research;Empirical studies;Source code metrics;Open systems,,,,,,,Association for Computing Machinery,,9781450347723,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85047085071,,Hungary,No email,,,"Kadar I., Hegedus P., Ferenc R., Gyimothy T."
"Botelho, G., Bezerra, L., Britto, A., Silva, L.",A Many-Objective Estimation Distributed Algorithm Applied to Search Based Software Refactoring,2018,2018 IEEE CONGRESS ON EVOLUTIONARY COMPUTATION (CEC),,,,423,430,8,0,10.1109/CEC.2018.8477896,,"[Botelho, Glauber; Bezerra, Leonardo] Univ Fed Sergipe, Postgrad Program Comp Sci, Sergipe, Brazil; [Britto, Andre; Silva, Leila] Univ Fed Sergipe, Dept Comp, Sergipe, Brazil",,"Refactoring is a modification in the internal structure of software, in order to improve quality, understandability and maintainability, without changing its observable behavior. Search Based Software Refactoring (SBSR) deals with automatic software refactoring processes using optimization algorithms. In this context, here we investigate the problem of finding a sequence of refactorings that provides code improvement, according to software quality attributes, expressed by a combination of software metrics. There are multiple criteria to define the quality of a solution, therefore this problem is defined as a Many-Objective Combinatorial Optimization Problem. There is a lack of works that focus on Many-Objective Discrete Problems in SBSR. In this direction, this work proposes a Many-Objective Estimation Distributed Algorithm to find a sequence of refactorings on an object-oriented software. The algorithm explores archiving methods and probabilistic models. A set of experiments is performed, with the aim of investigating which is the best algorithm configuration, regarding the probabilistic model and selection procedure.",Many-Objective Optimization; Estimation Distributed Algorithm; Search Based Software Refactoring,OPTIMIZATION,Many-Objective Optimization;Estimation Distributed Algorithm;Search Based Software Refactoring;OPTIMIZATION,glauber.a.botelho@gmail.com; leonardobsjr@yahoo.com.br; andre@dcomp.ufs.br; leila@dcomp.ufs.br,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE Congress on Evolutionary Computation (IEEE CEC) as part of the IEEE World Congress on Computational Intelligence (IEEE WCCI),"Rio de Janeiro, BRAZIL","JUL 08-13, 2018",IEEE,,978-1-5090-6017-7,,,English,IEEE C EVOL COMPUTAT,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000451175500056,2-s2.0-85056255603,Brazil,gmail.com,Univ Fed Sergipe,"Univ Fed Sergipe, Brazil","Botelho, Glauber; Bezerra, Leonardo; Britto, Andre; Silva, Leila"
"Gortazar, F., Duarte, A., Gallego, M.",A MDE approach for Language Engineering,2007,ENASE 2007: PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING,,,,80,86,7,0,,,"[Gortazar, Francisco; Duarte, Abraham; Gallego, Micael] Univ Rey Juan Carlos, Dept Comp Sci, Madrid, Spain",,"Many development tools of modem Integrated Development Environments (IDEs) make an intensive use of abstract syntax tree (AST) representations of the software. This is the case of refactors, code formatters, or content assistants, among others. Such AST is usually an instance of an object oriented abstract syntax model. We propose to center the attention of Language Engineering (LE) on this model. We propose to use UML as the abstract syntax metamodel because UML tools provide code generators for different programming languages for model implementation. As well as an abstract syntax, a concrete syntax of the language it is also necessary. We are concerned about textual languages, whose concrete syntax is usually given as a BNF grammar. Instead, we propose to stereotype the abstract syntax model by means of a profile, aimed at concrete syntax definition. Applying Model Dr iven Engineering (MDE) practices several development artifacts can be automatically generated.",Model Driven Engineering; Language Engineering; abstract syntax; concrete syntax; DSLs,,Model Driven Engineering;Language Engineering;abstract syntax;concrete syntax;DSLs,francisco.gortazar@urjc.es; abraham.duarte@urjc.es; micael.gallego@urjc.es,"GonzalezPerez, C; Maciaszek, LA","AVENIDA D MANUEL L, 27A 2 ESQUERDO, SETUBAL, 2910-595, PORTUGAL",2nd International Working Conference on Evaluation of Novel Approaches to Software Engineering,"Barcelona, SPAIN","JUL 23-25, 2007",INSTICC-INST SYST TECHNOLOGIES INFORMATION CONTROL & COMMUNICATION,,978-989-8111-10-4,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000251420300018,,Spain,urjc.es,Univ Rey Juan Carlos,"Univ Rey Juan Carlos, Spain","Gortazar, Francisco; Duarte, Abraham; Gallego, Micael"
"Mouchawrab, S., Briand, L.C., Labiche, Y.",A measurement framework for object-oriented software testability,2005,INFORMATION AND SOFTWARE TECHNOLOGY,47,15,,979,997,19,38,10.1016/j.infsof.2005.09.003,,"Carleton Univ, Software Qual Engn Lab, Ottawa, ON K1S 5B6, Canada",,"Testing is an expensive activity in the development process of any software system. Measuring and assessing the testability of software would help in planning testing activities and allocating required resources. More importantly, measuring software testability early in the development process, during analysis or design stages, can yield the highest payoff as design refactoring can be used to improve testability before the implementation starts. This paper presents a generic and extensible measurement framework for object-oriented software testability, which is based on a theory expressed as a set of operational hypotheses. We identify design attributes that have an impact on testability directly or indirectly, by having an impact on testing activities and sub-activities. We also describe the cause-effect relationships between these attributes and software testability based on thorough review of the literature and our own testing experience. Following the scientific method, we express them as operational hypotheses to be further tested. For each attribute, we provide a set of possible measures whose applicability largely depends on the level of details of the design documents and the testing techniques to be applied. The goal of this framework is twofold: (1) to provide structured guidance for practitioners trying to measure design testability, (2) to provide a theoretical framework for facilitating empirical research on testability. (c) 2005 Elsevier B.V. All rights reserved.",,TEST ORDER; PROGRAMS; SYSTEMS; DESIGN,TEST ORDER;PROGRAMS;SYSTEMS;DESIGN,briand@sce.carleton.ca,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000234322400004,2-s2.0-28844455581,Canada,sce.carleton.ca,Software Qual Engn Lab,"Software Qual Engn Lab, Canada","Mouchawrab, S; Briand, LC; Labiche, Y"
"Bettini L., Capecchi S., Damiani F.",A mechanism for flexible dynamic trait replacement,2009,"Proceedings of the 11th International Workshop on Formal Techniques for Java-like Programs, FTfJP '09",,, 9,,,,4,10.1145/1557898.1557907,https://www.scopus.com/inward/record.uri?eid=2-s2.0-70450207582&doi=10.1145%2f1557898.1557907&partnerID=40&md5=743e93fa7e8ca31f0d75f9031d328e04,"Dipartimento di Informatica, Universitàdi Torino, Corso Svizzera 185, 10149 Torino, Italy","Bettini, L., Dipartimento di Informatica, Universitàdi Torino, Corso Svizzera 185, 10149 Torino, Italy; Capecchi, S., Dipartimento di Informatica, Universitàdi Torino, Corso Svizzera 185, 10149 Torino, Italy; Damiani, F., Dipartimento di Informatica, Universitàdi Torino, Corso Svizzera 185, 10149 Torino, Italy","Dynamic trait replacement is a programming language feature for changing the objects' behavior at runtime by replacing some of the objects' methods. In previous work on dynamic trait replacement for JAVA-like languages, the object's methods that may be replaced must correspond exactly to a named trait used in the object's class definition. In this paper we propose the notion of replaceable: a programming language feature that decouples trait replacement operation code and class declaration code, thus making it possible refactoring classes and/or performing unanticipated trait replacement operations without invalidating existing code.",Featherweight Java; Trait; Type system,Codes (symbols); Computer software; Featherweight Java; Flexible dynamics; ON dynamics; Refactorings; Runtimes; Trait; Type systems; Java programming language,Featherweight Java;Trait;Type system;Codes (symbols);Computer software;Flexible dynamics;ON dynamics;Refactorings;Runtimes;Type systems;Java programming language,"Bettini, L.; Dipartimento di Informatica, Universitàdi Torino, Corso Svizzera 185, 10149 Torino, Italy; email: bettini@di.unito.it",,,,,,Association for Computing Machinery (ACM),,9781605585406,,,English,"Proc. Int. Workshop Form. Tech. Java-like Programs, FTfJP",Conference Paper,Scopus,,2-s2.0-70450207582,,Italy,di.unito.it,,,"Bettini L., Capecchi S., Damiani F."
"Counsell S., Hierons R.M., Loizou G.",A meta-analysis approach to refactoring and XP,2007,"2007 IEEE/ACS International Conference on Computer Systems and Applications, AICCSA 2007",,, 4230941,67,75,,1,10.1109/AICCSA.2007.370866,https://www.scopus.com/inward/record.uri?eid=2-s2.0-36248983779&doi=10.1109%2fAICCSA.2007.370866&partnerID=40&md5=b7f86b311e5147dc49bd7d8f0f6ea094,"Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex, UB8 3PH, United Kingdom; School of Computer Science, Birkbeck, University of London, Malet Street, London, WC1E 7HX, United Kingdom","Counsell, S., Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex, UB8 3PH, United Kingdom; Hierons, R.M., Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex, UB8 3PH, United Kingdom; Loizou, G., School of Computer Science, Birkbeck, University of London, Malet Street, London, WC1E 7HX, United Kingdom","The mechanics of seventy-two different Java refactorings are described fully in Fowler's text [13]. In the same text, Fowler describes seven categories of refactoring, into which each of the seventy-two refactorings can be placed. A current research problem in the refactoring and XP community is assessing the likely time and testing effort for each refactoring, since any single refactoring may use any number of other refactorings as part of its mechanics and, in turn, can be used by many other refactorings. In this paper, we draw on a dependency analysis carried out as part of our research in which we identify the 'Use' and 'Used By' relationships of refactorings in all seven categories. We offer reasons why refactorings in the 'Dealing with Generalisation' category seem to embrace two distinct refactoring sub-categories and how refactorings in the 'Moving Features between Objects' category also exhibit specific characteristics. In a wider sense, our meta-analysis provides a developer with concrete guidelines on which refactorings, due to their explicit dependencies, will prove problematic from an effort and testing perspective. © 2007 IEEE.",,Dependency analysis; Meta analysis; Research problems; XP community; Java programming language; Object oriented programming; Problem solving; Software testing; Metadata,Dependency analysis;Meta analysis;Research problems;XP community;Java programming language;Object oriented programming;Problem solving;Software testing;Metadata,"Counsell, S.; Department of Information Systems and Computing, Brunel University, Uxbridge, Middlesex, UB8 3PH, United Kingdom; email: steve.counsell@brunel.ac.uk",,,,,,,,1424410312; 9781424410316,,,English,IEEE/ACS Int. Conf. Comput. Syst. Applic.,Conference Paper,Scopus,,2-s2.0-36248983779,,United Kingdom,brunel.ac.uk,,,"Counsell S., Hierons R.M., Loizou G."
"Tichelaar, S., Ducasse, S., Demeyer, S., Nierstrasz, O.",A meta-model for language-independent refactoring,2000,"INTERNATIONAL SYMPOSIUM ON PRINCIPLES OF SOFTWARE EVOLUTION, PROCEEDINGS",,,,154,164,3,32,10.1109/ISPSE.2000.913233,,"Univ Bern, IAM, Software Composit Grp, CH-3012 Bern, Switzerland",,"Refactoring - transforming code while preserving behaviour - is currently considered a kev approach for improving object-oriented software systems. Unfortunately, all of the current refactoring tools depend on language-dependent refactoring engines, which prevents a smooth integration with mainstream development environments. In this paper we investigate the similarities between refactorings for Smalltalk and Java, derive a language-independent meta-model and show that it is feasible to build a language-independent refactoring engine on top of this meta-model. Our feasibility study is validated by means of a tool prototype which uses the same engine to refactor both Smalltalk and Java code. Using our approach we minimize the language-dependent parr of refactoring tools, providing a standard way for programmers and roofs to perform refactorings no matter what language they work in.",,,,,"Katayama, T; Tamai, T; Yonezaki, N","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",International Symposium on Principles of Software Evolution (ISPSE 2000),"KANAZAWA, JAPAN","NOV 01-02, 2000",IEEE COMPUTER SOC,,0-7695-0907-X,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000167974200019,2-s2.0-84949754919,Switzerland,No email,IAM,"IAM, Switzerland","Tichelaar, S; Ducasse, S; Demeyer, S; Nierstrasz, O"
Sora I.,A meta-model for representing language-independent primary dependency structures,2012,ENASE 2012 - Proceedings of the 7th International Conference on Evaluation of Novel Approaches to Software Engineering,,,,65,74,,3,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880307497&partnerID=40&md5=a4b52f3224f8b40aaf7cf5732e82f460,"Department of Computer and Software Engineering, Politehnica University of Timisoara, Timisoara, Romania","Şora, I., Department of Computer and Software Engineering, Politehnica University of Timisoara, Timisoara, Romania","Reverse engineering creates models of software systems, at a higher level of abstraction or in a form suitable to a particular analysis. This article presents a meta-model that provides a unitary way of describing primary dependency structures in software systems. It extracts and conceptualizes similarities between different programming languages which, moreover, belong to any of the object-oriented as well as the procedural programming paradigms. The proposed meta-model is validated by the implementation of different tools for model extraction from programs written in Java, C# (CIL) and ANSI C. The utility of the proposed metamodel is shown by supporting a number of different analysis applications such as architectural reconstruction, impact analysis, modularization analysis, refactoring decisions.",Meta-models; Reverse engineering; Structural dependencies,Dependency structures; Level of abstraction; Meta model; Model extraction; Object oriented; Procedural programming; Software systems; Structural dependencies; Application programs; Java programming language; Mathematical models; Modular construction; Reverse engineering; Software engineering,Meta-models;Reverse engineering;Structural dependencies;Dependency structures;Level of abstraction;Meta model;Model extraction;Object oriented;Procedural programming;Software systems;Application programs;Java programming language;Mathematical models;Modular construction;Software engineering,"Şora, I.; Department of Computer and Software Engineering, Politehnica University of Timisoara, Timisoara, Romania; email: ioana.sora@cs.upt.ro",,,,,,,,9789898565136,,,English,ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng.,Conference Paper,Scopus,,2-s2.0-84880307497,,Romania,cs.upt.ro,,,Sora I.
"Arcelli D., Cortellessa V., Di Pompeo D.",A metamodel for the specification and verification of model refactoring actions,2018,"IWoR 2018 - Proceedings of the 2nd International Workshop on Refactoring, co-located with ASE 2018",,,,14,21,,0,10.1145/3242163.3242167,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063651170&doi=10.1145%2f3242163.3242167&partnerID=40&md5=713543cf4b15ddfa4c2f5e8df4791834,"University of L'Aquila, Italy","Arcelli, D., University of L'Aquila, Italy; Cortellessa, V., University of L'Aquila, Italy; Di Pompeo, D., University of L'Aquila, Italy","Refactoring has become a valuable activity during the software development lifecycle, because it can be induced by different causes, like new requirements or quality improvement. In code-based development contexts this activity has been widely studied, whereas in model-driven ones, where models are first-class development entities, there are many issues yet to be tackled. In this paper we present a metamodel that supports the specification of pre- and post-conditions of model refactoring actions, and the automated derivation and verification of such conditions in specific modeling languages. Our work is aimed at helping users to implement refactoring actions in the adopted modelling language by providing an environment for guaranteeing the feasibility of refactoring actions. Our primary focus is on the definition of applicable sequences of refactoring actions, rather than on the user-driven step-by-step application of refactoring actions. As an example, we illustrate the applicability of our metamodel for UML models refactoring. © 2018 ACM.",Language-independent refactoring metamodel; Model-Driven Engineering; Refactoring; Refactoring feasibility,Specifications; Unified Modeling Language; Model-driven; Model-driven Engineering; Pre and post conditions; Quality improvement; Refactorings; Software development life cycle; Specification and verification; User driven; Software design,Language-independent refactoring metamodel;Model-Driven Engineering;Refactoring;Refactoring feasibility;Specifications;Unified Modeling Language;Model-driven;Pre and post conditions;Quality improvement;Refactorings;Software development life cycle;Specification and verification;User driven;Software design,,Ouni A.Cinneide M.O.Kessentini M.,,,,,"Association for Computing Machinery, Inc",,9781450359740,,,English,"IWoR - Proc. Int. Workshop Refactoring, co-located ASE",Conference Paper,Scopus,,2-s2.0-85063651170,,Italy,No email,,,"Arcelli D., Cortellessa V., Di Pompeo D."
"Araujo, P., Rodriguez, S., Hilaire, V.",A metamodeling approach for the identification of organizational smells in multi-agent systems: application to ASPECS,2018,ARTIFICIAL INTELLIGENCE REVIEW,49,2,,183,210,28,0,10.1007/s10462-016-9521-7,,"[Araujo, Pedro; Rodriguez, Sebastian] Univ Tecnol Nacl, GITIA, Fac Reg Tucuman, Rivadavia 1050, San Miguel De Tucuman, Tucuman, Argentina; [Hilaire, Vincent] Univ Technol Belfort Montbeliard, IRTES SeT, Rue Ernest Thierry Mieg, F-90010 Belfort, France",,"Software Quality is one of the most important subjects in the Process Development Software, especially in large and complex systems. Much effort has been devoted to the development of techniques and concepts to improve software quality over the years. We are especially interested on smells, which represent anomalies or flaws in the design/code that can have serious consequences in maintenance or future development of the systems. These techniques have a strong development in the Object Oriented paradigm, however, very few studies were conducted in the agent oriented paradigm. In this paper we focus on the detection of design smells applied to multi-agent systems models based on the organizational approach, named Organizational Design Smells (ODS). Early and automatic detection of these ODS allows reducing the costs and development times, while increasing the final product's quality. To achieve this objective, validation rules were defined based in the EVL language. The approach is illustrated with two examples, their validation rules, and the refactoring solutions proposed.",Agent Oriented Software Engineering; Design smells; Validation rules; Organization approach,BAD SMELLS,Agent Oriented Software Engineering;Design smells;Validation rules;Organization approach;BAD SMELLS,pedro.araujo@gitia.org; sebastian.rodriguez@gitia.org; vincent.hilaire@utbm.fr,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",,,,SPRINGER,0269-2821,,,,English,ARTIF INTELL REV,Article,WoS,Computer Science,WOS:000424003000002,2-s2.0-84991821725,Argentina;France,gitia.org,Univ Tecnol Nacl;Univ Technol Belfort Montbeliard,"Univ Tecnol Nacl, Argentina;Univ Technol Belfort Montbeliard, France","Araujo, Pedro; Rodriguez, Sebastian; Hilaire, Vincent"
"France, R., Ghosh, S., Song, E., Kim, D.K.",A metamodeling approach to pattern-based model refactoring,2003,IEEE SOFTWARE,20,5,,52,+,8,48,10.1109/MS.2003.1231152,,"Colorado State Univ, Dept Comp Sci, Ft Collins, CO 80523 USA",,"The success of model-driven architecture methods hinges on the support they provide for three things: creating meaningful models in a timely way; specifying and applying patterns that reflect useful and reusable design abstractions; and defining and systematically applying model transformations that support model evolution, refinement,,and code generation. Model transformation occurs when we modify a source model to produce a target model. Applying a well-defined design pattern is one way to transform a model. For example, a developer might modify an existing design using a pattern to produce a target model in which the pattern is realized.(1,2) This article shows how to define and apply design patterns in the context of model transformations. The design models we discuss, both source and target, are expressed in the Unified Modeling Language.",,,,,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0740-7459,,,,English,IEEE SOFTWARE,Article,WoS,Computer Science,WOS:000184924400016,2-s2.0-0141502278,United States,No email,Dept Comp Sci,"Dept Comp Sci, United States","France, R; Ghosh, S; Song, E; Kim, DK"
"Ito, Y., Hazeyama, A., Morimoto, Y., Kaminaga, H., Nakamura, S., Miyadera, Y.",A Method for Detecting Bad Smells and Its Application to Software Engineering Education,2014,2014 IIAI 3RD INTERNATIONAL CONFERENCE ON ADVANCED APPLIED INFORMATICS (IIAI-AAI 2014),,,,670,675,6,1,10.1109/IIAI-AAI.2014.139,,"[Ito, Yuki; Hazeyama, Atsuo; Morimoto, Yasuhiko; Miyadera, Youzou] Tokyo Gakugei Univ, Fac Educ, Tokyo, Japan; [Kaminaga, Hiroaki; Nakamura, Shoichi] Fukushima Univ, Fac Symbol Syst Sci, Fukushima, Japan",,"In order to extend and maintenance software systems, it is necessary to remove factors behind bad smells from source code through refactoring. However, it is time-consuming process to detect and remove factors behind bad smells manually from large source code. And, learning how to refactor bad smells can be difficult for students because they are not yet software development experts. Therefore, we propose a method for detecting bad smells using declarative meta programming that can be applied to software development training. In this manner, software development training is facilitated.",program refactorings; detectiong bad smells; declarative meta programming; software engineering education,,program refactorings;detectiong bad smells;declarative meta programming;software engineering education,m133301n@st.u-gakugei.ac.jp; hazeyama@u-gakugei.ac.jp; moromot@u-gakugei.ac.jp; kami@sss.fukushima-u.ac.jp; nakamura@sss.fukushima-u.ac.jp; miyadera@u-gakugei.ac.jp,,"345 E 47TH ST, NEW YORK, NY 10017 USA",3rd IIAI International Conference on Advanced Applied Informatics (IIAI-AAI),"Kitakyushu, JAPAN","AUG 31-SEP 04, 2014",IEEE,,978-1-4799-4173-5,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000358256400126,2-s2.0-84918555406,Japan,st.u-gakugei.ac.jp,Tokyo Gakugei Univ;Fukushima Univ,"Tokyo Gakugei Univ, Japan;Fukushima Univ, Japan","Ito, Yuki; Hazeyama, Atsuo; Morimoto, Yasuhiko; Kaminaga, Hiroaki; Nakamura, Shoichi; Miyadera, Youzou"
"She, R.R., Zhang, L.P., Zhao, F.R.",A Method for Identifying and Recommending Reconstructed Clones,2019,"PROCEEDINGS OF THE 2019 3RD INTERNATIONAL CONFERENCE ON MANAGEMENT ENGINEERING, SOFTWARE ENGINEERING AND SERVICE SCIENCES (ICMSS 2019)",,,,39,44,6,0,10.1145/3312662.3312709,,"[She Rongrong; Zhang Liping; Zhao Fengrong] Inner Mongolia Normal Univ, Software Engn Inter Mongolia, Sch Comp & Informat Engn, Inner Mongolia Hohhot 010022, Peoples R China",,"Reconstruction of existing clone code is limited to a single version of static analysis and ignores the evolution of cloned code, resulting in a lack of effective methods for cloning code refactoring decisions. Therefore, this paper proposes a clone code that needs to be reconstructed and tracked from the perspective of software evolution, and recommends cloned code that needs to be reconstructed. Firstly, the evolution history information closely related to the cloned code is extracted from the clone detection, clone mapping, clone family and software maintenance log management system. Secondly, the clone code that needs to be reconstructed is identified, and the cloned code of the trace is identified, and then extracted and weighted. Construct related static and evolution features and build a feature sample database. Finally, a variety of machine learning methods are used to compare and select the best classifiers to recommend refactoring clones. This article conducts experiments on nearly 170 versions of 7 software, and recommends that the accuracy of refactoring cloned code reaches over 90%. Provide more accurate and reasonable code refactoring advice for software development and maintenance personnel.",Clone code; clone reconstruction; clone tracking; clone family; feature extraction,,Clone code;clone reconstruction;clone tracking;clone family;feature extraction,1498058162@qq.com,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA","3rd International Conference on Management Engineering, Software Engineering and Service Sciences (ICMSS)","Wuhan, PEOPLES R CHINA","JAN 12-14, 2019",ASSOC COMPUTING MACHINERY,,978-1-4503-6189-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000473793600007,2-s2.0-85064980723,China,qq.com,Inner Mongolia Normal Univ,"Inner Mongolia Normal Univ, China",She Rongrong; Zhang Liping; Zhao Fengrong
"Takahashi, M., Nanba, R., Anang, Y., Uchiyama, T., Watanabe, Y.",A Method of Program Refactoring based on Code Clone Detection and Impact Analysis,2016,2016 55TH ANNUAL CONFERENCE OF THE SOCIETY OF INSTRUMENT AND CONTROL ENGINEERS OF JAPAN (SICE),,,,673,678,6,0,,,"[Takahashi, Masakazu; Anang, Yunarso; Uchiyama, Tatsuya; Watanabe, Yoshimichi] Univ Yamanashi, Dept Comp Sci & Engn, Yamanashi, Japan; [Takahashi, Masakazu; Anang, Yunarso; Uchiyama, Tatsuya; Watanabe, Yoshimichi] Dai Ichi Inst Technol, Dept Civil Engn, Kagoshima, Japan",,"This paper proposes a method that aggregates similar portions in a program into one common portion and redesigns current program structure to appropriate program structure. When a new function is added to an existing program, the function tends to be developed by copying & pasting a portion in the program and modifying its portion. As a result, it becomes to exist many similar portions in the program. In the case that error modifications or changes occurs in the similar portion, appropriate modifications are required to the all similar portions. It would be considered that the quality and efficiency of those tasks are decreased. So that, this paper proposes a method that detect similar portions with minor modifications and a method that aggregates those similar portions to one appropriate common portion with well-defined program structure. As a result, current program becomes to be refined to the program that can accommodate future modification or changes properly.",Code Clone; Impact Analysis; Refactoring,,Code Clone;Impact Analysis;Refactoring,mtakahashi@yamanashi.ac.jp; r-nanba@daiichi-koudai.ac.jp; g14dma01@yamanashi.ac.jp; g12mk003@yamanashi.ac.jp; nabe@yamanashi.ac.jp,,"345 E 47TH ST, NEW YORK, NY 10017 USA",55th Annual Conference of the Society of Instrument and Control Engineers of Japan (SICE),"Tsukuba, JAPAN","SEP 20-23, 2016",IEEE,,978-4-9077-6450-0,,,English,,Proceedings Paper,WoS,Automation & Control Systems; Engineering; Instruments & Instrumentation,WOS:000391463900045,,Japan,yamanashi.ac.jp,Univ Yamanashi;Dai Ichi Inst Technol,"Univ Yamanashi, Japan;Dai Ichi Inst Technol, Japan","Takahashi, Masakazu; Nanba, Reiji; Anang, Yunarso; Uchiyama, Tatsuya; Watanabe, Yoshimichi"
"Bashir, R.S., Lee, S.P., Yung, C.C., Alam, K.A., Ahmad, R.W.",A methodology for impact evaluation of refactoring on external quality attributes of a software design,2017,2017 INTERNATIONAL CONFERENCE ON FRONTIERS OF INFORMATION TECHNOLOGY (FIT),,,,183,188,6,0,10.1109/FIT.2017.00040,,"[Bashir, Raja Sehrab; Lee, Sai Peck; Alam, Khubaib Amjad] Univ Malaya, Dept Software Engn, Kuala Lumpur, Malaysia; [Yung, Chong Chun] Monash Univ, Sch Informat Technol, Salangor, Malaysia; [Ahmad, Raja Wasim] Comsats Inst Informat Technol, Dept Comp Sci, Abbottabad, Pakistan",,"Refactoring aims at improving software design quality without affecting external behavior. It is commonly believed that refactoring operations always enhance the software quality. However, some recent empirical studies have reported negative or negligible effects of refactoring on certain quality attributes. The actual impact of each refactroing on certain quality attributes may help developers in selecting the most suitable refactoring alternatives. Various work have been proposed in this regard at source code-level. However, fewer studies have assessed the refactoring impact at design-level. In this study, We propose a refactoring impact evaluation method enabling developers to select the suitable refactoring operations based on their impact. Nine small scale case studies have been used to validate the consistency of propose method. The results reveal that move method, extract method, extract class rafactoring operations have improved maintainability, understandability, modifiability, and analyzability in nine case studies. These obeservations are consistent accross multiple case studies, implying that the proposed approach is highly consistent.",Software Refactoring; Code refactoring; design refactoring; refactoring impact; refactoring improve quality,METRICS,Software Refactoring;Code refactoring;design refactoring;refactoring impact;refactoring improve quality;METRICS,sehrabraja@siswa.um.edu.my; saipeck@um.edu.my; chong.chunyong@monash.edu.my; khubaibalam@siswa.um.edu.my; wasimraja@ciit.net.pk,,"345 E 47TH ST, NEW YORK, NY 10017 USA",15th International Conference on Frontiers of Information Technology (FIT),"Islamabad, PAKISTAN","DEC 18-20, 2017",IEEE,2334-3141,978-1-5386-3567-4,,,English,INT CONF FRONT INFO,Proceedings Paper,WoS,Computer Science,WOS:000425863000032,2-s2.0-85049253365,Malaysia;Pakistan,siswa.um.edu.my,Univ Malaya;Monash Univ;Comsats Inst Informat Technol,"Univ Malaya, Malaysia;Monash Univ, Malaysia;Comsats Inst Informat Technol, Pakistan","Bashir, Raja Sehrab; Lee, Sai Peck; Yung, Chong Chun; Alam, Khubaib Amjad; Ahmad, Raja Wasim"
"Rizvi S.A.M., Khanam Z.",A methodology for refactoring legacy code,2011,ICECT 2011 - 2011 3rd International Conference on Electronics Computer Technology,6,, 5942080,198,200,,5,10.1109/ICECTECH.2011.5942080,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79961235830&doi=10.1109%2fICECTECH.2011.5942080&partnerID=40&md5=84cc744ece5dff1c8003dcdafe685cdb,"Department of Computer Science, Jamia Millia Islamia, New Delhi, India","Rizvi, S.A.M., Department of Computer Science, Jamia Millia Islamia, New Delhi, India; Khanam, Z., Department of Computer Science, Jamia Millia Islamia, New Delhi, India","Refactoring techniques have gained popularity due to their practical value in creating more agile code. Refactoring activities usually aim at improving the software quality, making them easier to understand, maintain, improvements on the software artifacts. Aspect-oriented programming (AOP) is receiving an increased attention due to its power in encapsulating crosscutting concerns. Refactoring allows reorganizing code while preserving the external behavior, while AOP facilitates modularizing crosscutting concerns in a system through use of a new unit of modularity called aspect. A combination of the two - aspect-oriented refactoring - helps in reorganizing code corresponding to crosscutting concerns to further improve modularization and get rid of the usual symptoms of crosscutting: code-tangling and code-scattering in legacy systems. The poorly designed procedural code when refactored with aspect orientation yields a better code. The aim of this paper is to establish a discipline for refactoring that will define the activities to be followed needed for refactoring. Our methodology is broken into two steps: first step is the preparation phase and the second is searching phase. This methodology is used by us in our research work [10]. The set of activities described in this paper will help establish a proper refactoring procedure for the legacy code. © 2011 IEEE.",aspect oriented programming; legacy systems; Refactoring methodology,Aspect orientation; Aspect-oriented; Crosscutting concern; External behavior; Legacy code; Modularizations; Procedural codes; Refactorings; Software artifacts; Software Quality; Aspect oriented programming; Computer software selection and evaluation; Computer systems programming; Engineering research; Management information systems; Modular construction; Object oriented programming; Legacy systems,aspect oriented programming;legacy systems;Refactoring methodology;Aspect orientation;Aspect-oriented;Crosscutting concern;External behavior;Legacy code;Modularizations;Procedural codes;Refactorings;Software artifacts;Software Quality;Computer software selection and evaluation;Computer systems programming;Engineering research;Management information systems;Modular construction;Object oriented programming,"Rizvi, S.A.M.; Department of Computer Science, Jamia Millia Islamia, New Delhi, India",,,,,,,,9781424486779,,,English,ICECT - Int. Conf. Electron. Comput. Technol.,Conference Paper,Scopus,,2-s2.0-79961235830,,India,No email,,,"Rizvi S.A.M., Khanam Z."
"Bialy, M., Lawford, M., Pantelic, V., Wassyng, A.",A Methodology for the Simplification of Tabular Designs in Model-Based Development,2015,2015 IEEE/ACM 3RD FME WORKSHOP ON FORMAL METHODS IN SOFTWARE ENGINEERING,,,,47,53,7,3,10.1109/FormaliSE.2015.15,,"[Bialy, Monika; Lawford, Mark; Pantelic, Vera; Wassyng, Alan] McMaster Univ, Dept Comp & Software, McMaster Ctr Software Certificat, Hamilton, ON L8S 4L8, Canada",,"Model-based development (MBD) is increasingly being used to develop embedded control software, with Matlab Simulink/Stateflow being the most widely used MBD language in the automotive industry. Stateflow truth tables, more traditionally known as decision tables, are often used for implementing complex decision-making logic. As the subsystems utilizing Stateflow truth tables evolve, they often grow more complex and become difficult to maintain and test. It is in part due to the nature of decision tables that makes them more difficult to check for desirable properties such as disjointness and completeness, resulting in reduced readability and scalability. Tabular expressions provide an alternative representation which does not suffer from many of the same problems. With the safety-critical nature of the automotive domain, as well as the continuous growth in both size and complexity of models, well-defined and principled methodologies are required for maintaining and refactoring tables. This paper presents a refactoring methodology for simplifying decision tables through the use of tabular expressions to facilitate testing, traceability and readability to help companies comply with ISO 26262. An automotive industrial case study is used to motivate the work and demonstrate the proposed methodology.",,,,bialym2@mcmaster.ca; lawford@mcmaster.ca; pantelv@mcmaster.ca; wassyng@mcmaster.ca,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE/ACM 3rd FME Workshop on Formal Methods in Software Engineering,"Florence, ITALY","MAY 18-18, 2015",IEEE,2380-873X,978-1-4673-7043-1,,,English,FME WORKS FORM,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380515000008,2-s2.0-84946059461,Canada,mcmaster.ca,McMaster Univ,"McMaster Univ, Canada","Bialy, Monika; Lawford, Mark; Pantelic, Vera; Wassyng, Alan"
"Ampatzoglou, A., Frantzeskou, G., Stamelos, I.",A methodology to assess the impact of design patterns on software quality,2012,INFORMATION AND SOFTWARE TECHNOLOGY,54,4,,331,346,16,29,10.1016/j.infsof.2011.10.006,,"[Ampatzoglou, Apostolos; Stamelos, Ioannis] Aristotle Univ Thessaloniki, Dept Informat, GR-54006 Thessaloniki, Greece; [Frantzeskou, Georgia] Univ Aegean, Informat & Commun Syst Engn Dept, Samos, Greece",,"Context: Software quality is considered to be one of the most important concerns of software production teams. Additionally, design patterns are documented solutions to common design problems that are expected to enhance software quality. Until now, the results on the effect of design patterns on software quality are controversial. Aims: This study aims to propose a methodology for comparing design patterns to alternative designs with an analytical method. Additionally, the study illustrates the methodology by comparing three design patterns with two alternative solutions, with respect to several quality attributes. Method: The paper introduces a theoretical/analytical methodology to compare sets of ""canonical"" solutions to design problems. The study is theoretical in the sense that the solutions are disconnected from real systems, even though they stem from concrete problems. The study is analytical in the sense that the solutions are compared based on their possible numbers of classes and on equations representing the values of the various structural quality attributes in function of these numbers of classes. The exploratory designs have been produced by studying the literature, by investigating open-source projects and by using design patterns. In addition to that, we have created a tool that helps practitioners in choosing the optimal design solution, according to their special needs. Results: The results of our research suggest that the decision of applying a design pattern is usually a trade-off, because patterns are not universally good or bad. Patterns typically improve certain aspects of software quality, while they might weaken some other. Conclusions: Concluding the proposed methodology is applicable for comparing patterns and alternative designs, and highlights existing threshold that when surpassed the design pattern is getting more or less beneficial than the alternative design. More specifically, the identification of such thresholds can become very useful for decision making during system design and refactoring. (C) 2011 Elsevier B.V. All rights reserved.",Structural quality; Design patterns; Object-oriented metrics; Quality,OBJECT-ORIENTED SOFTWARE; METRICS; SPECIFICATION,Structural quality;Design patterns;Object-oriented metrics;Quality;OBJECT-ORIENTED SOFTWARE;METRICS;SPECIFICATION,apamp@csd.auth.gr; gfran@aegean.gr; stamelos@csd.auth.gr,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000300859100001,2-s2.0-84856066225,Greece,csd.auth.gr,Aristotle Univ Thessaloniki;Univ Aegean,"Aristotle Univ Thessaloniki, Greece;Univ Aegean, Greece","Ampatzoglou, Apostolos; Frantzeskou, Georgia; Stamelos, Ioannis"
"Cassol, I., Arevalo, G.",A methodology to infer and refactor an object-oriented model from C applications,2018,SOFTWARE-PRACTICE & EXPERIENCE,48,3,,550,577,28,0,10.1002/spe.2549,,"[Cassol, Ignacio] Univ Austral, Fac Ingn, Buenos Aires, DF, Argentina; [Arevalo, Gabriela] Univ Nacl Quilmes, Dept Ciencia & Tecnol, Buenos Aires, DF, Argentina; [Arevalo, Gabriela] Consejo Nacl Invest Cient & Tecn, Buenos Aires, DF, Argentina; [Arevalo, Gabriela] Univ Abierta Interamer, CAETI, Buenos Aires, DF, Argentina",,"When analyzing legacy code, generating a high-level model of an application during the reverse engineering process helps the developers understand how the application is structured and how the dependencies relate the different software entities. Within the context of procedural programming languages (such as C), the existing approaches to get a model of the code require documentation and/or implicit knowledge that stakeholders acquire during the software building. These approaches use the code itself to build a syntactic model where we see the different software artifacts, such as variables, functions, and modules. However, there is no supporting methodology to detect and analyze if there are relationships/dependencies between those artifacts, such as which variable in a module is declared using an abstract data type described in another one, or which are the functions that are using parameters typed with an abstract data type; or any design decision taken by original developers, such as how the developer has implemented functions in different modules. On the other hand, current developers use object-oriented (OO) paradigm to implement not only business applications but also useful methodologies/tools that allow semiautomatic analysis of any application. We must remark the legacy procedural code still has worth and is working in several industries, and as any evolving code, the developers have to be able to perform maintenance tasks minimizing the limitations offered by the language. Based on useful properties that the OO paradigm (and their supporting analysis tools) provide, such as UML models, we propose M2K as a methodology to generate a high-level model from legacy procedural code, mainly written in Ansi C. To understand how C-based applications were implemented is not a new problem in software reengineering. However, our contribution is based on building an OO model and suggesting different refactorings that help the developer to improve it and to eventually guide a new implementation of the target application. Specifically, the methodology builds cohesive software entities mapped from procedural code and makes the coupling between C entities explicit in the high-level model. The result of our methodology is a set of refactored class candidates: a structure that groups a set of variables and a set of functions obtained from the C applications. Based on the class candidate model, we propose refactorings based on OO design principles to improve the design of the application. The most relevant design improvements were obtained with algorithm abstraction by applying the strategy pattern, attributes/methods relocalization, variables types generalization, and removing/renaming methods/attributes. Besides a methodology and the supporting tool, we provide 14 case studies based on real projects implemented in C, and we showed how the results validate our proposal.",design recovery; legacy software; object-oriented paradigm; procedural language; reengineering; refactoring; reverse engineering,,design recovery;legacy software;object-oriented paradigm;procedural language;reengineering;refactoring;reverse engineering,ignacio.cassol@gmail.com,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY,0038-0644,,,,English,SOFTWARE PRACT EXPER,Article,WoS,Computer Science,WOS:000424291300008,2-s2.0-85031508426,Argentina,gmail.com,Univ Austral;Univ Nacl Quilmes;Consejo Nacl Invest Cient & Tecn;Univ Abierta Interamer,"Univ Austral, Argentina;Univ Nacl Quilmes, Argentina;Consejo Nacl Invest Cient & Tecn, Argentina;Univ Abierta Interamer, Argentina","Cassol, Ignacio; Arevalo, Gabriela"
"Li Y., Wang J., Zhao L.",A method to improve software testability,2006,"Proceedings of the ISCA 15th International Conference on Software Engineering and Data Engineering, SEDE 2006",,,,51,56,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84883515032&partnerID=40&md5=6c9746ee9753f4bff4c6974c3e113e50,"School of Software, Tsinghua University, Beijing, 100084, China; Department of Computer Science and Technology, Tsinghua University, Beijing, 100084, China","Li, Y., School of Software, Tsinghua University, Beijing, 100084, China; Wang, J., School of Software, Tsinghua University, Beijing, 100084, China; Zhao, L., Department of Computer Science and Technology, Tsinghua University, Beijing, 100084, China","Software testability is an influential factor to the effectiveness of testing. In this paper, a method using V-T partition of the input domain is proposed to improve software testability in applications. Formal verification and testing are integrated and the test distribution is considered in this method. Based on the method, a design approach is suggested to assist software testing. A case study from a real project is also presented to illustrate that this method makes testing more effective.",Software refactoring; Software testability; Software testing; Verification,Design approaches; Formal verifications; Influential factors; Software refactoring; Software testability; Verification; Software testing,Software refactoring;Software testability;Software testing;Verification;Design approaches;Formal verifications;Influential factors,"School of Software, Tsinghua University, Beijing, 100084, China",,,,,,,,9781604235821,,,English,"Proc. ISCA Int. Conf. Softw. Eng. Data Eng., SEDE",Conference Paper,Scopus,,2-s2.0-84883515032,,China,No email,,,"Li Y., Wang J., Zhao L."
"Miyake T., Higo Y., Inoue K.",A metric-based approach for reconstructing methods in bject-oriented systems,2008,Proceedings - International Conference on Software Engineering,,, 1370112,53,58,,0,10.1145/1370099.1370112,https://www.scopus.com/inward/record.uri?eid=2-s2.0-57049151439&doi=10.1145%2f1370099.1370112&partnerID=40&md5=db0921384ac971af6a257e3c8c0739c5,"Graduate School of Information Science and Technology, Osaka University","Miyake, T., Graduate School of Information Science and Technology, Osaka University; Higo, Y., Graduate School of Information Science and Technology, Osaka University; Inoue, K., Graduate School of Information Science and Technology, Osaka University","Refactoring is an important activity to improve software quality, which tends to become worse through repetitive bug fixes and function additions. Unfortunately, it is difficult to perform appropriate refactorings because a refactoring needs certain costs, and its effects should be greater than the costs. This paper describes an approach for appropriate refactorings. The approach identifies spots to be refactored and it suggests how they should be improved. Moreover, the approach estimates the effects of the refactorings. The approach requires a lightweight source code analysis for measuring several metrics, so that it can be applied to middle- or large-scale software system. The approach can make the refactoring process more effective and efficient one. Copyright 2008 ACM.",Refactoring; Software maintenance; Source code analysis,Bug fixes; Refactoring; Refactorings; Software maintenance; Software qualities; Software systems; Source code analyses; Source code analysis; Cobalt; Codes (symbols); Computer software maintenance; Software engineering; Technical presentations; Computer software selection and evaluation,Refactoring;Software maintenance;Source code analysis;Bug fixes;Refactorings;Software qualities;Software systems;Source code analyses;Cobalt;Codes (symbols);Computer software maintenance;Software engineering;Technical presentations;Computer software selection and evaluation,"Miyake, T.; Graduate School of Information Science and Technology, Osaka UniversityJapan; email: t-miyake@ist.osaka-u.ac.jp",,,,,,,02705257,9781605580234,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-57049151439,,Osaka University,ist.osaka-u.ac.jp,,,"Miyake T., Higo Y., Inoue K."
"Higo, Y., Kusumoto, S., Inoue, K.",A metric-based approach to identifying refactoring opportunities for merging code clones in a Java software system,2008,JOURNAL OF SOFTWARE MAINTENANCE AND EVOLUTION-RESEARCH AND PRACTICE,20,6,,435,461,27,52,10.1002/smr.394,,"[Higo, Yoshiki; Kusumoto, Shinji; Inoue, Katsuro] Osaka Univ, Grad Sch Informat Sci & Technol, Dept Comp Sci, Osaka 5608531, Japan",,"A code clone is a code fragment that has other code fragments identical or similar to it in the source code. The presence of code clones is generally regarded as one factor that makes software maintenance more difficult. For example, if a code fragment with code clones is modified, it is necessary to consider whether each of the other code clones has to be modified as well. Removing code clones is one way of avoiding problems that arise due to the presence of code clones. This makes the source code more maintainable and more comprehensible. This paper proposes a set of metrics that suggest how code clones can be refactored. As well, the tool Aries, which automatically computes these metrics, is presented. The tool gives metrics that are indicators for certain refactoring methods rather than suggesting the refactoring methods themselves. The tool performs only lightweight source code analysis; hence, it can be applied to a large number of code lines. This paper also describes a case study that illustrates how this tool can be used. Based on the results of this case study, it can be concluded that this method can efficiently merge code clones. Copyright (C) 2008 John Wiley & Sons, Ltd.",code clone; software maintenance; refactoring; metrics; object-oriented,,code clone;software maintenance;refactoring;metrics;object-oriented,higo@ist.osaka-u.ac.jp,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY-BLACKWELL,1532-060X,,,,English,J SOFTW MAINT EVOL-R,Article,WoS,Computer Science,WOS:000261810900003,2-s2.0-56849129297,Japan,ist.osaka-u.ac.jp,Osaka Univ,"Osaka Univ, Japan","Higo, Yoshiki; Kusumoto, Shinji; Inoue, Katsuro"
"Tomassetti, F., Vetro, A., Torchiano, M., Voelter, M., Kolb, B.",A Model-Based Approach to Language Integration,2013,2013 5TH INTERNATIONAL WORKSHOP ON MODELING IN SOFTWARE ENGINEERING (MISE),,,,76,81,6,4,,,"[Tomassetti, Federico; Vetro, Antonio; Torchiano, Marco] Politecn Torino, Dept Comp Engn & Control Automat, Turin, Italy",,"The interactions of several languages within a software system pose a number of problems. There is several anecdotal and empirical evidence supporting such concerns. This paper presents a solution to achieve proper language integration in the context of language workbenches and with limited effort. A simple example is presented to show how cross-language constraints can be addressed and the quality of the support attainable, which covers error-checking and refactoring. A research agenda is then presented, to support future work in the area of language integration, taking advantage of modern language workbenches features.",language interactions; language integration; model driven development; projectional editors,,language interactions;language integration;model driven development;projectional editors,federico.tomassetti@polito.it; antonio.vetro@polito.it; marco.torchiano@polito.it; voelter@acm.org; kolb@itemis.de,,"345 E 47TH ST, NEW YORK, NY 10017 USA",5th International Workshop on Modeling in Software Engineering (MiSE),"San Francisco, CA","MAY 18-19, 2013",IEEE,,978-1-4673-6447-8,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000327697100013,2-s2.0-84891331129,Italy,polito.it,Politecn Torino,"Politecn Torino, Italy","Tomassetti, Federico; Vetro, Antonio; Torchiano, Marco; Voelter, Markus; Kolb, Bernd"
"Verebi, I.",A Model-Based Approach to Software Refactoring,2015,2015 31ST INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME) PROCEEDINGS,,,,606,609,4,1,,,"[Verebi, Ioana] Politehn Univ Timisoara, Timisoara, Romania",,"Refactoring is a key activity for any software system, as it ensures that the system is easily maintainable and extensible. However, complex refactorings (restructurings) are largely performed by hand, as there are no automated means of chaining existent basic refactorings. In addition, developers cannot quickly and safely evaluate the effects of a restructuring solution over another. In this context, we introduce a model-based approach to software refactoring, which provides an easy and safe way to explore restructuring alternatives. Restructurings are written as a composition of low-level model transformations, making them reusable in different complex refactorings. In order to support our approach, we implemented a tool named reFactor, which aims to bridge the gap between design flaw detection and correction. It detects design problems and offers a platform to compose model transformations into composite restructurings, while permanently monitoring the overall quality of the code.",,,,ioana.verebi@gmail.com,"Koschke, R; Krinke, J; Robillard, M","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 31st International Conference on Software Maintenance and Evolution (ICSME),"Bremen, GERMANY","SEP 29-OCT 01, 2015",IEEE,1063-6773,978-1-4673-7532-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380398300079,2-s2.0-84961642270,Romania,gmail.com,Politehn Univ Timisoara,"Politehn Univ Timisoara, Romania","Verebi, Ioana"
"Gayed, G., Deugo, D.",A model for the application of object-oriented refactorings,2003,"7TH WORLD MULTICONFERENCE ON SYSTEMICS, CYBERNETICS AND INFORMATICS, VOL VI, PROCEEDINGS: INFORMATION SYSTEMS, TECHNOLOGIES AND APPLICATIONS: I",,,,45,51,7,0,,,"Carleton Univ, Ottawa, ON K1S 5B6, Canada",,"Refactoring is an activity that has become synonymous with object-oriented software development. While the benefits of applying refactorings during development can be enormous, there is a risk of introducing subtle bugs to working programs as a result of incorrectly refactoring an application. This risk is greatly decreased if the refactorings are applied in an automated manner. This paper discusses a model that can be used to represent the automated application of any valid object-oriented refactoring. Additionally, a means of concretely expressing refactorings is formally defined. The combination of the model and the formal expression syntax facilitates the implementation of tools that can be used to apply any arbitrary refactoring.",refactoring; object-oriented; model; tool; expressions,,refactoring;object-oriented;model;tool;expressions,,"Callaos, N; Lesso, W; Sanchez, B; Hansen, E","14269 LORD BARCLAY DR, ORLANDO, FL 32837 USA","7th World Multiconference on Systemics, Cybernetics and Informatics","ORLANDO, FL","JUL 27-30, 2003",INT INST INFORMATICS & SYSTEMICS,,980-6560-01-9,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000189331000009,,Canada,No email,Ottawa,"Ottawa, Canada","Gayed, G; Deugo, D"
"Gomes, T., Lopes, P., Alves, J., Mestre, P., Cabral, J., Monteiro, J.L., Tavares, A.",A Modeling Domain-Specific Language for IoT-enabled Operating Systems,2017,IECON 2017 - 43RD ANNUAL CONFERENCE OF THE IEEE INDUSTRIAL ELECTRONICS SOCIETY,,,,3945,3950,6,0,,,"[Gomes, T.; Lopes, P.; Alves, J.; Cabral, J.; Monteiro, J. L.; Tavares, A.] Univ Minho, Ctr ALGORITMI, Braga, Portugal; [Mestre, P.] Univ Tras Os Montes & Alto Douro, Engn Dept, Vila Real, Portugal",,"With the increased complexity of low-end devices in the Internet of Things (IoT), mainly due to the connectivity and interoperability requirements, the development and configuration of embedded operating systems (OSes) for such devices is not straight forward. The complexity of the communication requirements is usually mitigated by the OS, e.g., the Contiki-OS, as it already incorporates an IoT-compliant network stack. Yet, the configuration of such stack requires major knowledge on the code structure, leading to additional development time, particularly when the network comprises several wireless nodes and individual configurations with subsequent firmware that needs to be generated. Based on a developed software modeling domain-specific language, this paper presents the EL4IoT framework. It aims to reduce and ease the development time by promoting a design automation tool that can configure, and automatically generate code (ready to compile) for low-end IoT devices running the Contiki-OS. Although leveraging the whole Contiki-OS modeling, this work only refactored and modeled the network stack while approaching the OS itself as one big building block or component. The proposed approach can be extended to other IoT-enabled OSes as well as integrated in other design automation tools.",Domain-Specific Language (DSL); Internet of Things (IoT); embedded Operating Systems; model-driven development,INTERNET; THINGS,Domain-Specific Language (DSL);Internet of Things (IoT);embedded Operating Systems;model-driven development;INTERNET;THINGS,mr.gomes@dei.uminho.pt,,"345 E 47TH ST, NEW YORK, NY 10017 USA",43rd Annual Conference of the IEEE-Industrial-Electronics-Society (IECON),"Beijing, PEOPLES R CHINA","OCT 29-NOV 01, 2017",IEEE,1553-572X,978-1-5386-1127-2,,,English,IEEE IND ELEC,Proceedings Paper,WoS,Engineering,WOS:000427164803148,,Portugal,dei.uminho.pt,Univ Minho;Univ Tras Os Montes & Alto Douro,"Univ Minho, Portugal;Univ Tras Os Montes & Alto Douro, Portugal","Gomes, T.; Lopes, P.; Alves, J.; Mestre, P.; Cabral, J.; Monteiro, J. L.; Tavares, A."
"Kermek D., Jakupic T., Vrcek N.",A model of heterogeneous distributed system for foreign exchange portfolio analysis,2006,Journal of Information and Organizational Sciences,30,1,,83,92,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960082184&partnerID=40&md5=38d16518e2201edea0e6129167006f24,"University of Zagreb, Faculty of Organization and Informatics, Varaždin, Croatia; Trg kralja Tomislava 8, Koprivnica 48000, Croatia","Kermek, D., University of Zagreb, Faculty of Organization and Informatics, Varaždin, Croatia; Jakupić, T., Trg kralja Tomislava 8, Koprivnica 48000, Croatia; Vrček, N., University of Zagreb, Faculty of Organization and Informatics, Varaždin, Croatia","The paper investigates the design of heterogeneous distributed system for foreign exchange portfolio analysis. The proposed model includes few separated and dislocated but connected parts through distributed mechanisms. Making system distributed brings new perspectives to performance busting where software based load balancer gets very important role. Desired system should spread over multiple, heterogeneous platforms in order to fulfil open platform goal. Building such a model incorporates different patterns from GOF design patterns, business patterns, J2EE patterns, integration patterns, enterprise patterns, distributed design patterns to Web services patterns. The authors try to find as much as possible appropriate patterns for planned tasks in order to capture best modelling and programming practices.",Design pattern; Distributed system; Foreign exchange portfolio analysis; Load balancer; Refactoring; Web service,,Design pattern;Distributed system;Foreign exchange portfolio analysis;Load balancer;Refactoring;Web service,"Kermek, D.; University of Zagreb, Faculty of Organization and Informatics, Varaždin, Croatia; email: dkermek@foi.hr",,,,,,,18463312,,,,English,J. Inf. Organ. Sci.,Article,Scopus,,2-s2.0-79960082184,,Croatia,foi.hr,,,"Kermek D., Jakupic T., Vrcek N."
"Kastner, C., Apel, S., Kuhlemann, M.",A Model of Refactoring Physically and Virtually Separated Features,2010,ACM SIGPLAN NOTICES,45,2,,157,166,10,24,,,"[Kaestner, Christian; Kuhlemann, Martin] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany; [Apel, Sven] Univ Passau, Dept Math & Informat, Passau, Germany",,"Physical separation with class refinements and method refinements a la AHEAD and virtual separation using annotations a la #ifdef or CIDE are two competing implementation approaches for software product lines with complementary advantages. Although both approaches have been mainly discussed in isolation, we strive for an integration to leverage the respective advantages. In this paper, we lay the foundation for such an integration by providing a model that supports both physical and virtual separation and by describing refactorings in both directions. We prove the refactorings complete, so every virtually separated product line can be automatically transformed into a physically separated one (replacing annotations by refinements) and vice versa. To demonstrate the feasibility of our approach, we have implemented the refactorings in our tool CIDE and conducted four case studies.",Design; Languages; Theory; Software product lines; refactoring; separation of concerns; preprocessor; refinements; AHEAD; CIDE; FeatureHouse,,Design;Languages;Theory;Software product lines;refactoring;separation of concerns;preprocessor;refinements;AHEAD;CIDE;FeatureHouse,kaestner@iti.cs.uni-magdeburg.de; apel@uni-passau.de; kuhlemann@iti.cs.uni-magdeburg.de,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",8th International Conference on Generative Programming and Component Engineering,"Denver, CO","OCT 04-05, 2009",ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article; Proceedings Paper,WoS,Computer Science,WOS:000280547600017,2-s2.0-77957564273;2-s2.0-70450191766,Germany,iti.cs.uni-magdeburg.de,Univ Magdeburg;Univ Passau,"Univ Magdeburg, Germany;Univ Passau, Germany","Kaestner, Christian; Apel, Sven; Kuhlemann, Martin"
"Moser R., Pedrycz W., Sillitti A., Succi G.",A model to identify refactoring effort during maintenance by mining source code repositories,2008,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),5089 LNCS,,,360,370,,9,10.1007/978-3-540-69566-0_29,https://www.scopus.com/inward/record.uri?eid=2-s2.0-48249091200&doi=10.1007%2f978-3-540-69566-0_29&partnerID=40&md5=dd92bc9b0f0c8d8491d5eb871b02c695,"Center for Applied Software Engineering, Free University of Bolzano-Bozen, Italy; Department of Electrical and Computer Engineering, University of Alberta, Canada","Moser, R., Center for Applied Software Engineering, Free University of Bolzano-Bozen, Italy; Pedrycz, W., Department of Electrical and Computer Engineering, University of Alberta, Canada; Sillitti, A., Center for Applied Software Engineering, Free University of Bolzano-Bozen, Italy; Succi, G., Center for Applied Software Engineering, Free University of Bolzano-Bozen, Italy","The use of refactoring as a way to continuously improve the design and quality of software and prevent its aging is mostly limited to Agile Methodologies and to a lower amount to software reengineering. In these communities refactoring is supposed to improve in the long-term the structure of existing code in order to make it easier to modify and maintain. To sustain such claims and analyze the impact of refactoring on maintenance we need to know how much refactoring developers do. In few cases such information is directly available for example from CVS log messages. In this study we propose a model on how to mine software repositories in order to obtain information of refactoring effort throughout the evolution of a software system. Moreover, we have developed a prototype that implements our model and validate our approach with two small case studies. © 2008 Springer-Verlag Berlin Heidelberg.",Agile Methodologies; Refactoring; Software evolution; Software metrics,Codes (standards); Codes (symbols); Computer software; Maintenance; Mining; Reengineering; Software design; Software engineering; Agile Methodologies; Case studies; International conferences; Know-how; Quality of softwares; Refactoring; Software evolution; Software metrics; Software Process Improvement; Software reengineering; Software repositories; Software systems; Source code repositories; Computer software maintenance,Agile Methodologies;Refactoring;Software evolution;Software metrics;Codes (standards);Codes (symbols);Computer software;Maintenance;Mining;Reengineering;Software design;Software engineering;Case studies;International conferences;Know-how;Quality of softwares;Software Process Improvement;Software reengineering;Software repositories;Software systems;Source code repositories;Computer software maintenance,"Moser, R.; Center for Applied Software Engineering, Free University of Bolzano-BozenItaly; email: raimund.moser@unibz.it",,,,,,,03029743,3540695648; 9783540695646,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-48249091200,,Italy;Canada,unibz.it,,,"Moser R., Pedrycz W., Sillitti A., Succi G."
"Khan Y., El-Attar M.",A model transformation approach towards refactoring use case models based on antipatterns,2012,"Proceedings of the 21st International Conference on Software Engineering and Data Engineering, SEDE 2012",,,,49,54,,3,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84871999968&partnerID=40&md5=f5640fb3ac848bb7835df8920ff3043a,"Information and Computer Science Department, King Fahd University of Petroleum and Minerals, P.O. 5066, Al Dhahran 31261, Saudi Arabia","Khan, Y., Information and Computer Science Department, King Fahd University of Petroleum and Minerals, P.O. 5066, Al Dhahran 31261, Saudi Arabia; El-Attar, M., Information and Computer Science Department, King Fahd University of Petroleum and Minerals, P.O. 5066, Al Dhahran 31261, Saudi Arabia","The quality of use case models is crucial towards the success of a software development project, especially projects that utilize a use case driven development approach. Hence, the literature has presented many approaches to improve the quality of use case models. A category of such approaches is based on revising the use case model to better reflect the intended functional requirements. These approaches are based on the detection of unsound structures in existing diagrams and then refactoring the diagrams to improve their quality. One such promising approach is the utilization of antipatterns. An antipattern will describe a debatable structure in use case diagrams and its harmful consequences. The antipattern will also describe the proper form the diagram should be in. While the detection of the unsound structures described in antipatterns has been automated, the refactoring effort to enhance the use case diagram remains a manual process, which can be cumbersome and error-prone. In this paper, we present an approach to automate the refactoring of use case diagrams using model transformation. The transformation algorithms were tested using a biodiversity database system case study. The results show the refactorings have been applied correctly and accurately.",Antipatterns; ATL; Refactoring; Use Case,Anti-patterns; ATL; Development approach; Error prones; Functional requirement; Manual process; Model transformation; Refactorings; Software development projects; Transformation algorithm; Use case diagram; Use case model; Biodiversity; Database systems; Digital storage; Graphic methods; Mathematical models; Software engineering,Antipatterns;ATL;Refactoring;Use Case;Anti-patterns;Development approach;Error prones;Functional requirement;Manual process;Model transformation;Refactorings;Software development projects;Transformation algorithm;Use case diagram;Use case model;Biodiversity;Database systems;Digital storage;Graphic methods;Mathematical models;Software engineering,"Khan, Y.; Information and Computer Science Department, King Fahd University of Petroleum and Minerals, P.O. 5066, Al Dhahran 31261, Saudi Arabia; email: y.b.a.khan@gmail.com",,,,,,,,9781880843864,,,English,"Proc. Int. Conf. Softw. Eng. Data Eng., SEDE",Conference Paper,Scopus,,2-s2.0-84871999968,,Saudi Arabia,gmail.com,,,"Khan Y., El-Attar M."
"Chisalita-Cretu, C.",A Multi-Objective Approach for Entity Refactoring Set Selection Problem,2009,2009 SECOND INTERNATIONAL CONFERENCE ON THE APPLICATIONS OF DIGITAL INFORMATION AND WEB TECHNOLOGIES (ICADIWT 2009),,,,790,795,6,3,10.1109/ICADIWT.2009.5273850,,"Univ Babes Bolyai, Fac Math & Comp Sci, RO-400084 Cluj Napoca, Romania",,Refactoring is a commonly accepted technique to improve the structure of object oriented software. The paper presents a multi-objective approach to the Entity Refactoring Set Selection Problem (ERSSP) by treating the cost constraint as an objective and combining it with the effect objective. The results of the proposed weighted objective genetic algorithm on a experimental didactic case study are presented and compared with other previous results.,,,,cretu@cs.ubbcluj.ro,,"345 E 47TH ST, NEW YORK, NY 10017 USA",2nd International Conference on the Applications of Digital Information and Web Technologies,"London, ENGLAND","AUG 04-06, 2009",IEEE,,978-1-4244-4456-4,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000288359000133,2-s2.0-71449095844,Romania,cs.ubbcluj.ro,Fac Math & Comp Sci,"Fac Math & Comp Sci, Romania","Chisalita-Cretu, Camelia"
"Aljuhani, A., Benedicenti, L., Alshehri, S.",A Multiple-Criteria Decision Making Model for Ranking Refactoring Patterns,2017,INTERNATIONAL JOURNAL OF ADVANCED COMPUTER SCIENCE AND APPLICATIONS,8,11,,1,9,9,0,,,"[Aljuhani, Abdulmajeed] Univ Regina, Fac Engn & Appl Sci, Regina, SK, Canada; [Benedicenti, Luigi] Univ New Brunswick, Fac Comp Sci, Fredericton, NB, Canada; [Alshehri, Sultan] Majmaah Univ, Comp Sci & Informat Technol Coll, Majmaah, Saudi Arabia",,"The analytic network process (ANP) is capable of structuring decision problems and finding mathematically determined judgments built on knowledge and experience. Researches suggest that ANP can be useful in software development, where complicated decisions happen routinely. In extreme programming (XP), the refactoring is applied where the code smells bad. This might cost more effort and time. As a result, in order to increase the advantages of refactoring in less effort and time, the analytic network process has been used to accomplish this purpose. This paper presents an example of applying the ANP in order to rank the refactoring patterns regarding the internal code quality attributes. A case study that was conducted in an academic environment is presented in this paper. The results of the case study show the benefits of using the ANP in XP development cycle.",Analytic network process; extreme programming; refactoring practice; refactoring patterns,,Analytic network process;extreme programming;refactoring practice;refactoring patterns,,,"19 BOLLING RD, BRADFORD, WEST YORKSHIRE, 00000, ENGLAND",,,,SCIENCE & INFORMATION SAI ORGANIZATION LTD,2158-107X,,,,English,INT J ADV COMPUT SC,Article,WoS,Computer Science,WOS:000417985900001,,Canada;Saudi Arabia,No email,Univ Regina;Univ New Brunswick;Majmaah Univ,"Univ Regina, Canada;Univ New Brunswick, Canada;Majmaah Univ, Saudi Arabia","Aljuhani, Abdulmajeed; Benedicenti, Luigi; Alshehri, Sultan"
"Gheyi R., Massoni T., Borba P.",An abstract equivalence notion for object models,2005,Electronic Notes in Theoretical Computer Science,130,,,3,21,,11,10.1016/j.entcs.2005.03.002,https://www.scopus.com/inward/record.uri?eid=2-s2.0-18144387624&doi=10.1016%2fj.entcs.2005.03.002&partnerID=40&md5=43f2ab8a86755d0140e74b325261d8ff,"Informatics Center, Federal University of Pernambuco, Recife, Brazil","Gheyi, R., Informatics Center, Federal University of Pernambuco, Recife, Brazil; Massoni, T., Informatics Center, Federal University of Pernambuco, Recife, Brazil; Borba, P., Informatics Center, Federal University of Pernambuco, Recife, Brazil","Equivalence notions for object models are usually too concrete in the sense that they assume that the compared models are formed by elements with the same names. This is not adequate in several situations: during model refactoring, when using auxiliary model elements, or when the compared models comprise distinct but corresponding elements. So, in this paper, we propose a more abstract and language-independent equivalence notion for object models. It supports, as desired, abstraction from names and elements when comparing models. We use the PVS system to specify and prove properties of our notion. It is illustrated here by comparing simple models in Alloy, a formal object-oriented modeling language, but has also been applied for deriving a comprehensive set of algebraic laws for Alloy. © 2005 Published by Elsevier B.V.",Equivalence notion; Object models; Theorem proving,Computer programming languages; Computer simulation; Mathematical models; Semantics; Software engineering; Theorem proving; Auxiliary models; Equivalence notion; Modeling languages; Object models; Object oriented programming,Equivalence notion;Object models;Theorem proving;Computer programming languages;Computer simulation;Mathematical models;Semantics;Software engineering;Auxiliary models;Modeling languages;Object oriented programming,"Gheyi, R.; Informatics Center, Federal University of Pernambuco, Recife, Brazil; email: rg@cin.ufpe.br",,,,,,,15710661,,,,English,Electron. Notes Theor. Comput. Sci.,Conference Paper,Scopus,,2-s2.0-18144387624,,Brazil,cin.ufpe.br,,,"Gheyi R., Massoni T., Borba P."
"Cousot, P., Cousot, R., Logozzo, F., Barnett, M.",An Abstract Interpretation Framework for Refactoring with Application to Extract Methods with Contracts,2012,ACM SIGPLAN NOTICES,47,10,,213,232,20,4,10.1145/2398857.2384633,,"[Cousot, Patrick; Cousot, Radhia] INRIA, CNRS, ENS, Paris, France; [Cousot, Patrick] NYU, New York, NY 10003 USA; [Logozzo, Francesco; Barnett, Michael] Microsoft Res, Redmond, WA USA",,"Method extraction is a common refactoring feature provided by most modern IDEs. It replaces a user-selected piece of code with a call to an automatically generated method. We address the problem of automatically inferring contracts (precondition, postcondition) for the extracted method. We require the inferred contract: (a) to be valid for the extracted method (validity); (b) to guard the language and programmer assertions in the body of the extracted method by an opportune precondition (safety); (c) to preserve the proof of correctness of the original code when analyzing the new method separately (completeness); and (d) to be the most general possible (generality). These requirements rule out trivial solutions (e. g., inlining, projection, etc). We propose two theoretical solutions to the problem. The first one is simple and optimal. It is valid, safe, complete and general but unfortunately not effectively computable (except for unrealistic finiteness/decidability hypotheses). The second one is based on an iterative forward/backward method. We show it to be valid, safe, and, under reasonable assumptions, complete and general. We prove that the second solution subsumes the first. All justifications are provided with respect to a new, set-theoretic version of Hoare logic (hence without logic), and abstractions of Hoare logic, revisited to avoid surprisingly unsound inference rules. We have implemented the new algorithms on the top of two industrial-strength tools (CCCheck and the Microsoft Roslyn CTP). Our experience shows that the analysis is both fast enough to be used in an interactive environment and precise enough to generate good annotations.",Design; Documentation; Experimentation; Human Factors; Languages; Reliability; Verification; Abstract interpretation; Design by contract; Method extraction; Program transformation; Refactoring; Static analysis,PROGRAM ANALYSIS; TRANSFORMATION; INVARIANTS; SEPARATION; SEMANTICS; DESIGN; LOGIC,Design;Documentation;Experimentation;Human Factors;Languages;Reliability;Verification;Abstract interpretation;Design by contract;Method extraction;Program transformation;Refactoring;Static analysis;PROGRAM ANALYSIS;TRANSFORMATION;INVARIANTS;SEPARATION;SEMANTICS;LOGIC,pcousot@cims.nyu.edu; rcousot@ens.fr; logozzo@microsoft.com; mbarnett@microsoft.com,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",ACM International Conference on Object Oriented Programming Systems Languages and Applications,"Tucson, AZ","OCT 19-26, 2012",ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article; Proceedings Paper,WoS,Computer Science,WOS:000311296200013,,France;United States,cims.nyu.edu,INRIA;NYU;Microsoft Res,"INRIA, France;NYU, United States;Microsoft Res, United States","Cousot, Patrick; Cousot, Radhia; Logozzo, Francesco; Barnett, Michael"
"Maruyama, K.",An accurate and convenient undo mechanism for refactorings,2006,"ASPEC 2006: 13TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS",,,,309,316,8,1,,,"Ritsumeikan Univ, Dept Comp Sci, Shiga 5258577, Japan",,"Refactoring makes existing source code more understandable and reusable without changing observable behavior Therefore, applying refactorings to existing source code and reversing the effects of past refactorings are inseparable from tool support to software development and maintenance. This paper proposes a powerful undo mechanism that uses a chain of past refactorings for each source file and determines which refactoring is undoable by monitoring the last refactoring in every chain. The proposed undo mechanism can make an undesired refactoring accurately undone although the refactoring has affected multiple sourcefiles. Moreover it permits a programmer to compatibly execute operations of refactoring undo and editorial undo/redo without the limitation of manual edit offiles. A running implementation of the mechanism has been integrated into our developed refactoring browser",,,,maru@cs.ritsumei.ac.jp,"Jalote, P","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",13th Asia-Pacific Software Engineering Conference,"Bangalore, INDIA","DEC 06-08, 2006",IEEE COMPUTER SOC,,978-0-7695-2685-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000245509400037,,Japan,cs.ritsumei.ac.jp,Dept Comp Sci,"Dept Comp Sci, Japan","Maruyama, Katsuhisa"
"Martini, A.",AnaConDebt: A Tool to Assess and Track Technical Debt,2018,2018 IEEE/ACM INTERNATIONAL CONFERENCE ON TECHNICAL DEBT (TECHDEBT),,,,55,56,2,0,10.1145/3194164.3194185,,"[Martini, Antonio] Univ Oslo, Oslo, Norway",,"It is challenging to assess and manage Technical Debt. Technical Debt is avoided or refactored if the long-term benefits, such as preventing extra-costs, exceed the cost of repaying the debt. Some tools have been recently proposed for the identification of Technical Debt, but most of them do not help in assessing the cost-benefits of repaying the Debt. Besides, it is challenging to track, visualize and plan Technical Debt refactoring systematically. Although practitioners might use simple tracking tools, calculating and communicating Technical Debt is currently not supported. Based on the results of previous research, combined with several practical experiences in collaboration with large software companies, we have developed and evaluated a lightweight tool, AnaConDebt, to track and assess Technical Debt.",Technical Debt; Tool; Software Management,,Technical Debt;Tool;Software Management,antonio.martini@ifi.uio.no,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE/ACM International Conference on Technical Debt (TechDebt),"Gothenburg, SWEDEN","MAY 27-JUN 03, 2018",IEEE,,978-1-4503-5713-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000458910300008,2-s2.0-85051511207,Norway,ifi.uio.no,Univ Oslo,"Univ Oslo, Norway","Martini, Antonio"
"Handur, V.S., Kalwad, P.D., Yaligar, N., Garagad, V.G., Pawar, M.K.",An Activity Based Learning: C Programming,2015,"2015 IEEE 3RD INTERNATIONAL CONFERENCE ON MOOCS, INNOVATION AND TECHNOLOGY IN EDUCATION (MITE)",,,,310,314,5,1,,,"[Handur, Vidya S.; Kalwad, Priyadarshini D.; Yaligar, Nagaratna; Garagad, Vishwanath G.; Pawar, Manjula K.] BV Bhoomaraddi Coll Engn & Technol, Dept Comp Sci & Engn, Hubballi, India",,"Computers are the leading technology of the 21st century. Programming, the development of software is thus a fundamental activity in which many people are engaged worldwide. Therefore programming courses are included as a part of the curriculum. In these courses, students are primarily introduced to language features. Traditionally, the students practice by applying the acquired knowledge to solve some logically straightforward problems giving less scope for the programming skills. This paper focuses on application of coding standards, coding techniques, debugging, code review, refactoring, code optimization, test driven programming and pair programming based learning to master not only programming language features, but also an integrated approach to gain problem solving and programming skills. The subject is introduced as a first year course where the students are without any or with smaller amount of background or experience in computer programming. Taking this into consideration, activities like programming were designed. These activities enhanced the learning ability, problem solving skills programming skills and debugging skills",problem solving; programming skills; code optimization; Test driven programming; debugging; coding standards,,problem solving;programming skills;code optimization;Test driven programming;debugging;coding standards,vidya_handur@bvb.edu; priyadarshini@bvb.edu; nagaratna@bvb.edu; vishwanath_gg@bvb.edu; manjulap@bvb.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA","IEEE 3rd International Conference on MOOCs, Innovation and Technology in Education (MITE)","Amritsar, INDIA","OCT 01-02, 2015",IEEE,,978-1-4673-6747-9,,,English,,Proceedings Paper,WoS,Computer Science; Education & Educational Research,WOS:000380436800058,2-s2.0-84963838298,India,bvb.edu,BV Bhoomaraddi Coll Engn & Technol,"BV Bhoomaraddi Coll Engn & Technol, India","Handur, Vidya S.; Kalwad, Priyadarshini D.; Yaligar, Nagaratna; Garagad, Vishwanath G.; Pawar, Manjula K."
"Ahmed M., Ibrahim R., Ibrahim N.",An adaptation model for android application testing with refactoring,2015,International Journal of Software Engineering and its Applications,9,10,,65,74,,4,10.14257/ijseia.2015.9.10.07,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84946729588&doi=10.14257%2fijseia.2015.9.10.07&partnerID=40&md5=8357da81b296272afa89fddfd32ddf35,"Department of Software Engineering, FSKTM, UTHM, 86400 Parit Raja, Batu Pahat, Johor, Malaysia","Ahmed, M., Department of Software Engineering, FSKTM, UTHM, 86400 Parit Raja, Batu Pahat, Johor, Malaysia; Ibrahim, R., Department of Software Engineering, FSKTM, UTHM, 86400 Parit Raja, Batu Pahat, Johor, Malaysia; Ibrahim, N., Department of Software Engineering, FSKTM, UTHM, 86400 Parit Raja, Batu Pahat, Johor, Malaysia","Software testing is a set of activities that typically consumes roughly 50% of the total time and cost of testers during the software development process. Developing an enhanced technique to test mobile application becomes a necessity considering the high demand of mobile applications, android specifically, hence the need for software quality assurance. Adapting software testing model would not only lessen the cost incurred in the process of mobile application development but also increase the reliability of the software under test. In this paper, we discuss mobile application testing and its challenges. The Reweb and Testweb frameworks are also discussed followed by an adaptation model from both frameworks to improve testing of android applications. Asides from adapting these web application testing frameworks, another major contribution of our approach is the refactoring the source code before generating test cases to reduce redundancy in the test case library thereby improving the generated test case. © 2015 SERSC.",Android Application; Refactoring; Reweb; Software testing; Test case; Test web,,Android Application;Refactoring;Reweb;Software testing;Test case;Test web,,,,,,,Science and Engineering Research Support Society,17389984,,,,English,Int. J. Softw. Eng. Appl.,Article,Scopus,,2-s2.0-84946729588,,Malaysia,No email,,,"Ahmed M., Ibrahim R., Ibrahim N."
"Chen, X., Chen, S.H., Ma, Y., Liu, B.C., Zhang, Y., Huang, G.",An adaptive offloading framework for Android applications in mobile edge computing,2019,SCIENCE CHINA-INFORMATION SCIENCES,62,8,082102,,,17,1,10.1007/s11432-018-9749-8,,"[Chen, Xing; Chen, Shihong; Liu, Bichun] Fuzhou Univ, Coll Math & Comp Sci, Fuzhou 350116, Fujian, Peoples R China; [Chen, Xing; Chen, Shihong; Liu, Bichun] Fuzhou Univ, Fujian Key Lab Network Comp & Intelligent Informa, Fuzhou 350116, Fujian, Peoples R China; [Ma, Yun] Tsinghua Univ, Sch Software, Beijing 100084, Peoples R China; [Zhang, Ying; Huang, Gang] Minist Educ, Key Lab High Confidence Software Technol, Beijing 100871, Peoples R China",,"Mobile edge computing (MEC) provides a fresh opportunity to significantly reduce the latency and battery energy consumption of mobile applications. It does so by enabling the offloading of parts of the applications on mobile edges, which are located in close proximity to the mobile devices. Owing to the geographical distribution of mobile edges and the mobility of mobile devices, the runtime environment of MEC is highly complex and dynamic. As a result, it is challenging for application developers to support computation offloading in MEC compared with the traditional approach in mobile cloud computing, where applications use only the cloud for offloading. On the one hand, developers have to make the offloading adaptive to the changing environment, where the offloading should dynamically occur among available computation nodes. On the other hand, developers have to effectively determine the offloading scheme each time the environment changes. To address these challenges, this paper proposes an adaptive framework that supports mobile applications with offloading capabilities in MEC. First, based on our previous study (DPartner), a new design pattern is proposed to enable an application to be dynamically offloaded among mobile devices, mobile edges, and the cloud. Second, an estimation model is designed to automatically determine the offloading scheme. In this model, different parts of the application may be executed on different computation nodes. Finally, an adaptive offloading framework is implemented to support the design pattern and the estimation model. We evaluate our framework on two real-world applications. The results demonstrate that our approach can aid in reducing the response time by 8%-50% and energy consumption by 9%-51% for computation-intensive applications.",computation offloading; software adaptation; mobile edge computing; application refactoring; Android,CLOUD,computation offloading;software adaptation;mobile edge computing;application refactoring;Android;CLOUD,hg@pku.edu.cn,,"16 DONGHUANGCHENGGEN NORTH ST, BEIJING 100717, PEOPLES R CHINA",,,,SCIENCE PRESS,1674-733X,,,,English,SCI CHINA INFORM SCI,Article,WoS,Computer Science; Engineering,WOS:000482203800002,2-s2.0-85069040226,China,pku.edu.cn,Fuzhou Univ;Tsinghua Univ;Minist Educ,"Fuzhou Univ, China;Tsinghua Univ, China;Minist Educ, China","Chen, Xing; Chen, Shihong; Ma, Yun; Liu, Bichun; Zhang, Ying; Huang, Gang"
"Carlson, B.",An agile classroom experience: Teaching TDD and refactoring,2008,"AGILE 2008, PROCEEDINGS",,,,465,469,5,3,10.1109/Agile.2008.39,,"[Carlson, Brandon] Des Moines Area Community Coll, W Des Moines, IA USA",,"Teaching the Agile practices of Test-Driven Development and Refactoring to entry level students can be a challenge. This paper outlines an approach to doing so with simplicity at its core. It has been an effective way to communicate not only the mechanics of the practices, but also the reasons behind why the practices are important to a professional software developer.",,,,,"Melnik, G; Kruchten, P; Poppendieck, M","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",AGILE 2008 Conference,"Toronto, CANADA","AUG 04-08, 2008",IEEE COMPUTER SOC,,978-0-7695-3321-6,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000259081600076,2-s2.0-52949101403,United States,No email,Des Moines Area Community Coll,"Des Moines Area Community Coll, United States","Carlson, Brandon"
"Concas, G., Di Francesco, M., Marchesi, M., Quaresima, R., Pinna, S.",An agile development process and its assessment using quantitative object-oriented metrics,2008,"AGILE PROCESSES IN SOFTWARE ENGINEERING AND EXTREME PROGRAMMING, PROCEEDINGS",9,,,83,+,2,1,,,"[Concas, Giulio; Marchesi, Michele; Quaresima, Roberta; Pinna, Sandro] Univ Cagliari, DIEE, Piazza Armi, I-09123 Cagliari, Italy; [Concas, Giulio; Marchesi, Michele] FlossLab srl, I-09122 Cagliari, Italy; [Di Francesco, Marco] Sardengna Ricerche, ICT District, Lab Open Source Software, I-09123 Cagliari, Italy",,"The development of a Web application using agile practices is presented, characterized by empirical software measurements that have been performed throughout the duration of the project. The project is the specialization of jAPS, an open source Java Web portal generation framework, for building a Research Register management system. The agile principles and practices used in the project are described and discussed. During the various phases of the project some key agile practices, such as pair programming, test-based development and refactoring, were used at different levels of adoption. The evolution of some object-oriented metrics of the system, and their behavior related to the agile practices adoption level is presented and discussed, showing that software quality, as measured using standard 00 metrics, looks directly related to agile practices adoption.",software metrics; agile methodologies; object-oriented languages,SOFTWARE; VALIDATION; DESIGN,software metrics;agile methodologies;object-oriented languages;SOFTWARE;VALIDATION;DESIGN,concas@diee.unica.it; difrancesco80@gmail.com; michele@diee.unica.it; roberta.quaresima@diee.unica.it; pinnasandro@diee.unica.it,"Abrahamsson, P; Baskerville, R; Conboy, K; Fitzgerald, B; Morgan, L; Wang, X","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",9th International Conference on Agile Processes in Software Engineering and Extreme Porgramming,"Limerick, IRELAND","JUN 10-14, 2008",SPRINGER-VERLAG BERLIN,1865-1348,978-3-540-68254-7,,,English,LECT NOTES BUS INF P,Proceedings Paper,WoS,Computer Science,WOS:000256667100009,2-s2.0-84878735575,Italy,diee.unica.it,Univ Cagliari;FlossLab srl;Sardengna Ricerche,"Univ Cagliari, Italy;FlossLab srl, Italy;Sardengna Ricerche, Italy","Concas, Giulio; Di Francesco, Marco; Marchesi, Michele; Quaresima, Roberta; Pinna, Sandro"
"Saadeh, E., Kourie, D., Boake, A.",An Algorithm for Ordering Refactorings Based on Fine-Grained Model Transformations,2008,"NEW TRENDS IN SOFTWARE METHODOLOGIES, TOOLS AND TECHNIQUES",182,,,225,243,19,1,10.3233/978-1-58603-916-5-225,,"[Saadeh, Emmad; Kourie, Derrick; Boake, Andrew] Univ Pretoria, ZA-0002 Pretoria, South Africa",,"In this paper, we propose a new algorithm to find automatically the optimal ordering of a batch of refactorings in which to apply these refactorings. The algorithm detects implicit sequential dependencies, resolves conflicts between the different refactorings in the batch and minimizes the number of refactoring operations by removing the redundant ones. It is based on the semantics of a predefined set of fine-grain transformations (FGTs) to describe any refactoring, and relies on logic-based representations of the underlying UML model. The algorithm saves time and effort and uses several innovative techniques to improve the performance at the time of refactoring.",Refactoring; sequential dependencies; conflicts; compaction process,SOFTWARE,Refactoring;sequential dependencies;conflicts;compaction process;SOFTWARE,,"Fujita, H; Zualkernan, I","NIEUWE HEMWEG 6B, 1013 BG AMSTERDAM, NETHERLANDS","7th International Conference on Software Methodologies, Tools","Amer Univ Sharjah, Sharjah, U ARAB EMIRATES","OCT 14-17, 2008",IOS PRESS,0922-6389,978-1-58603-916-5,,,English,FRONT ARTIF INTEL AP,Proceedings Paper,WoS,Computer Science,WOS:000272333000014,,South Africa,No email,Univ Pretoria,"Univ Pretoria, South Africa","Saadeh, Emmad; Kourie, Derrick; Boake, Andrew"
"Mens, T., Taentzer, G., Runge, O.",Analysing refactoring dependencies using graph transformation,2007,SOFTWARE AND SYSTEMS MODELING,6,3,,269,285,17,90,10.1007/s10270-006-0044-6,,"[Mens, Tom] Univ Mons, Software Engn Lab, B-7000 Mons, Belgium; [Taentzer, Gabriele] Univ Marburg, Fac Math & Comp Sci, D-35032 Marburg, Germany; [Runge, Olga] Tech Univ Berlin, D-10587 Berlin, Germany",,"Refactoring is a widely accepted technique to improve the structure of object-oriented software. Nevertheless, existing tool support remains restricted to automatically applying refactoring transformations. Deciding what to refactor and which refactoring to apply still remains a difficult manual process, due to the many dependencies and interrelationships between relevant refactorings. In this paper, we represent refactorings as graph transformations, and we propose the technique of critical pair analysis to detect the implicit dependencies between refactorings. The results of this analysis can help the developer to make an informed decision of which refactoring is most suitable in a given context and why. We report on several experiments we carried out in the AGG graph transformation tool to support our claims.",refactoring; graph transformation; critical pair analysis; dependency analysis; AGG,SYSTEMS,refactoring;graph transformation;critical pair analysis;dependency analysis;AGG;SYSTEMS,tom.mens@umh.ac.be; gabi@cs.tu-berlin.de; olga@cs.tu-berlin.de,,"TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY",3rd International Conference on Graph Transformations,"Natal, BRAZIL","SEP 17-23, 2006",SPRINGER HEIDELBERG,1619-1366,,,,English,SOFTW SYST MODEL,Article; Proceedings Paper,WoS,Computer Science,WOS:000254667900005,2-s2.0-34548050450,Belgium;Germany,umh.ac.be,Univ Mons;Univ Marburg;Tech Univ Berlin,"Univ Mons, Belgium;Univ Marburg, Germany;Tech Univ Berlin, Germany","Mens, Tom; Taentzer, Gabriele; Runge, Olga"
"Qayum F., Heckel R.",Analysing refactoring dependencies using unfolding of graph transformation systems,2009,"Proceedings of the 6th International Conference on Frontiers of Information Technology, FIT '09",,, 1838019,,,,3,10.1145/1838002.1838019,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956274618&doi=10.1145%2f1838002.1838019&partnerID=40&md5=c0b9d012b33dacd3a737046b69268ee5,"Department of Computer Science, University of Leicester, Leicester, United Kingdom","Qayum, F., Department of Computer Science, University of Leicester, Leicester, United Kingdom; Heckel, R., Department of Computer Science, University of Leicester, Leicester, United Kingdom","Refactoring has emerged as a successful technique to reduce complexity of object oriented designs. But due to implicit dependencies not all sequences of refactorings are appropriate. In this paper we model refactoring steps as graph transformation and use the unfolding analysis technique to choose the sequence of refactorings best suited in order to improve the design. We use graphs to represent software architectures at the class level and graph transformation to formally describe their refactoring operations. This makes it possible to use concepts and techniques from the theory of graph transformation, such as unfolding to identify dependencies between refactoring steps. Copyright 2009 ACM.",Graph transformation systems; Search based refactoring,Analysis techniques; AS graph; Class level; Graph Transformation; Graph transformation system; Object oriented design; Refactorings; Search-based; Use concept; Information technology; Software architecture; Graph theory,Graph transformation systems;Search based refactoring;Analysis techniques;AS graph;Class level;Graph Transformation;Graph transformation system;Object oriented design;Refactorings;Search-based;Use concept;Information technology;Software architecture;Graph theory,"Qayum, F.; Department of Computer Science, University of Leicester, Leicester, United Kingdom; email: fq7@mcs.le.ac.uk",,,,,,,,9781605586427,,,English,"Proc. Int. Conf. Front. Inf. Technol., FIT",Conference Paper,Scopus,,2-s2.0-77956274618,,United Kingdom,mcs.le.ac.uk,,,"Qayum F., Heckel R."
"Brown N., Nord R.L., Ozkaya I., Pais M.",Analysis and management of architectural dependencies in iterative release planning,2011,"Proceedings - 9th Working IEEE/IFIP Conference on Software Architecture, WICSA 2011",,, 5959724,103,112,,17,10.1109/WICSA.2011.22,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051993458&doi=10.1109%2fWICSA.2011.22&partnerID=40&md5=0dfc286f7696ef05403a93897407a97b,"Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; Master of Software Engineering Program, Carnegie Mellon University, Pittsburgh, PA, United States","Brown, N., Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; Nord, R.L., Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; Ozkaya, I., Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; Pais, M., Master of Software Engineering Program, Carnegie Mellon University, Pittsburgh, PA, United States","Within any incremental development paradigm, there exists a tension between the desire to deliver value to the customer early and the desire to reduce cost by avoiding architectural refactoring in subsequent releases. What is lacking, however, is quantifiable guidance that highlights the potential benefits and risks of choosing one or the other of these alternatives or a blend of both strategies. In this paper, we assert that the ability to quantify architecture quality with measurable criteria provides engineering guidance for iterative release planning. We demonstrate the use of propagation cost as a proxy for architectural health with dependency analysis of design structure and domain mapping matrices as a quantifiable basis for iteration planning. © 2011 IEEE.",Architecture quality; Dependency management; Design structure matrix; Propagation cost,Dependency analysis; Dependency management; Design structure; Design structure matrix; Domain mapping; Incremental development; Potential benefits; Refactorings; Release planning; Cost benefit analysis; Health risks; Software architecture; Planning,Architecture quality;Dependency management;Design structure matrix;Propagation cost;Dependency analysis;Design structure;Domain mapping;Incremental development;Potential benefits;Refactorings;Release planning;Cost benefit analysis;Health risks;Software architecture;Planning,"Brown, N.; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; email: nb@sei.cmu.edu",,,,,,,,9780769543512,,,English,"Proc. - Work. IEEE/IFIP Conf. Softw. Archit., WICSA",Conference Paper,Scopus,,2-s2.0-80051993458,,United States,sei.cmu.edu,,,"Brown N., Nord R.L., Ozkaya I., Pais M."
"Kaur, A., Kaur, M.",Analysis of Code Refactoring Impact on Software Quality,2016,4TH INTERNATIONAL CONFERENCE ON ADVANCEMENTS IN ENGINEERING & TECHNOLOGY (ICAET-2016),57,,UNSP 02012,,,6,0,10.1051/matecconf/20165702012,,"[Kaur, Amandeep; Kaur, Manpreet] Punjab Tech Univ, Dept Comp Sci & Engn, Jalandhar, India",,"Code refactoring is a ""Technique used for restructuring an existing source code, improving its internal structure without changing its external behaviour"". It is the process of changing a source code in such a way that it does not alter the external behaviour of the code yet improves its internal structure. It is a way to clean up code that minimizes the chances of introducing bugs. Refactoring is a change made to the internal structure of a software component to make it easier to understand and cheaper to modify, without changing the observable behaviour of that software component. Bad smells indicate that there is something wrong in the code that have to refactor. There are different tools that are available to identify and remove these bad smells. It is a technique that change our source code in a more readable and maintainable form by removing the bad smells from the code. Refactoring is used to improve the quality of software by reducing the complexity. In this paper bad smells are found and perform the refactoring based on these bad smell and then find the complexity of program and compare with initial complexity. This paper shows that when refactoring is performed the complexity of software decrease and easily understandable.",,,,amansidhu1092@gmail.com; manpreet.kaur@bbsbec.ac.in,"Srivastava, T; Rani, S; Kakkar, S","17 AVE DU HOGGAR PARC D ACTIVITES COUTABOEUF BP 112, F-91944 CEDEX A, FRANCE",4th International Conference on Advancements in Engineering and Technology (ICAET),"Sangrur, INDIA","MAR 18-19, 2016",E D P SCIENCES,2261-236X,,,,English,MATEC WEB CONF,Proceedings Paper,WoS,Agriculture; Computer Science; Engineering,WOS:000392134100041,,India,gmail.com,Punjab Tech Univ,"Punjab Tech Univ, India","Kaur, Amandeep; Kaur, Manpreet"
"Sehgal, R., Mehrotra, D., Bala, M.",Analysis of code smell to quantify the refactoring,2017,INTERNATIONAL JOURNAL OF SYSTEM ASSURANCE ENGINEERING AND MANAGEMENT,8,2,,1750,1761,12,0,10.1007/s13198-017-0658-9,,"[Sehgal, Rajni; Mehrotra, Deepti] Amity Univ, Noida, Uttar Pradesh, India; [Bala, Manju] Univ Delhi, IP Coll Women, Delhi, India",,"During development process software may encounter design flaws which are referred as ""code smell"". These code smells are potential faults that can be handled using suitable refactoring approach. Refactoring being an expensive process is a thought provocation task, and there is a need to identify the relationship between code smells and design metrics by considering expert's opinion. The approach adopted in this paper ranks the design metrics, according to their criticality and need using AHP. This method helps to identify refactoring approach that may be used to improve the code and needs to be implemented before the execution phase. The proposed approach is explained considering a case study of medium sized software.",Design metrics; Code smell; Refactoring approach; AHP; Weights,SOFTWARE-RELIABILITY,Design metrics;Code smell;Refactoring approach;AHP;Weights;SOFTWARE-RELIABILITY,rajnisehgal23@gmail.com,,"7TH FLOOR, VIJAYA BUILDING, 17, BARAKHAMBA ROAD, NEW DELHI, 110 001, INDIA",,,,SPRINGER INDIA,0975-6809,,,,English,INT J SYST ASSUR ENG,Article,WoS,Engineering,WOS:000415383700093,,India,gmail.com,Amity Univ;Univ Delhi,"Amity Univ, India;Univ Delhi, India","Sehgal, Rajni; Mehrotra, Deepti; Bala, Manju"
"Huang, X.Q.",Analysis of Embedded ARM System Design and Application,2015,PROCEEDINGS OF THE 2015 INTERNATIONAL CONFERENCE ON APPLIED SCIENCE AND ENGINEERING INNOVATION,12,,,579,586,8,0,,,"[Huang Xiuqing] Qilu Normal Univ, Coll Informat Sci & Engn, Jinan 250000, Shandong, Peoples R China",,"Based on the single camera 3D refactoring system of ARM+FPGA, this paper designed dicaryon hardware architecture, which takes ARM processor as logic control center and FPGA as co-processor, to complete the design of device driver and partial software. This paper also utilized FPGA to complete the key technical studies of image capture and calculation, 3D image refactor as well as others, besides, it fully utilized C2H and user-defined element, defined instruction and other technology to improve the calculation capability of the system; moreover, it utilized ARM processor specially for 3D image processing engine, GPMC controller, and sophisticated multimedia and network administration function to complete the design of the main control unit.",Embedded; ARM; System; Application,,Embedded;ARM;System;Application,15053188785@139.com,"Xu, M; Wang, G","29 AVENUE LAVMIERE, PARIS, 75019, FRANCE",International Conference on Applied Science and Engineering Innovation (ASEI),"Jinan, PEOPLES R CHINA","AUG 30-31, 2015",ATLANTIS PRESS,2352-5401,978-94-62520-94-3,,,English,AER ADV ENG RES,Proceedings Paper,WoS,Engineering,WOS:000375708200112,,China,139.com,Qilu Normal Univ,"Qilu Normal Univ, China",Huang Xiuqing
"Robert, K., Istvan, B., Tamas, K., Mate, T., Melinda, T.",Analysis of Preprocessor Constructs in Erlang,2010,"ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP",,,,45,55,11,1,,,"[Robert, Kitlei; Istvan, Bozo; Tamas, Kozsik; Mate, Tejfel; Melinda, Toth] Eotvos Lorand Univ, Fac Informat, Dept Programming Languages & Compilers, H-1364 Budapest, Hungary",,"Program analysis and transformation tools work on source code, which - as in the case of Erlang - may contain macros and other preprocessor directives. Such preprocessor constructs have to be treated in an utterly different way than lexical and syntactical constructs. This paper presents an approach to treat preprocessor constructs in a non-invasive way that is reasonably efficient and supports code transformations and analyses in an Erlang specific framework.",Erlang; macro; preprocessor; refactoring,,Erlang;macro;preprocessor;refactoring,kitlei@inf.elte.hu; bozo_i@inf.elte.hu; kto@aszt.inf.elte.hu; matej@inf.elte.hu; toth_m@inf.elte.hu,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",9th ACM SIGPLAN Erlang Workshop,"Baltimore, MD","SEP 30, 2010",ASSOC COMPUTING MACHINERY,,978-1-4503-0253-1,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000286913300005,,Hungary,inf.elte.hu,Eotvos Lorand Univ,"Eotvos Lorand Univ, Hungary","Robert, Kitlei; Istvan, Bozo; Tamas, Kozsik; Mate, Tejfel; Melinda, Toth"
"Peake, I.D., Blech, J.O., Fernando, L., Sharma, D., Ramaswamy, S., Kande, M.",Analysis of Software Binaries for Reengineering-Driven Product Line Architecture - An Industrial Case Study,2015,ELECTRONIC PROCEEDINGS IN THEORETICAL COMPUTER SCIENCE,,182,,71,82,12,1,10.4204/EPTCS.182.6,,"[Peake, Ian D.; Blech, Jan Olaf; Fernando, Lasith] RMIT Univ, Melbourne, Vic, Australia; [Sharma, Divyasheel; Ramaswamy, Srini; Kande, Mallikarjun] ABB Corp Res, Bangalore, Karnataka, India",,"This paper describes a method for the recovering of software architectures from a set of similar (but unrelated) software products in binary form. One intention is to drive refactoring into software product lines and combine architecture recovery with run time binary analysis and existing clustering methods. Using our runtime binary analysis, we create graphs that capture the dependencies between different software parts. These are clustered into smaller component graphs, that group software parts with high interactions into larger entities. The component graphs serve as a basis for further software product line work. In this paper, we concentrate on the analysis part of the method and the graph clustering. We apply the graph clustering method to a real application in the context of automation/robot configuration software tools.",,DISCOVERING ARCHITECTURES,DISCOVERING ARCHITECTURES,,,"OPEN PUBL ASSOC, SYDNEY, 00000, AUSTRALIA",,,,OPEN PUBL ASSOC,2075-2180,,,,English,ELECTRON P THEOR COM,Article,WoS,Computer Science,WOS:000367335000007,2-s2.0-85014954197,Australia;India,No email,RMIT Univ;ABB Corp Res,"RMIT Univ, Australia;ABB Corp Res, India","Peake, Ian D.; Blech, Jan Olaf; Fernando, Lasith; Sharma, Divyasheel; Ramaswamy, Srini; Kande, Mallikarjun"
"Gergely, T., Balogh, G., Horvath, F., Vancsics, B., Beszedes, A., Gyimothy, T.",Analysis of Static and Dynamic Test-to-code Traceability Information,2018,ACTA CYBERNETICA,23,3,,903,919,17,0,10.14232/actacyb.23.3.2018.11,,"[Gergely, Tamas; Balogh, Gergo; Horvath, Ferenc; Vancsics, Bela; Beszedes, Arpad; Gyimothy, Tibor] Univ Szeged, Dept Software Engn, Szeged, Hungary; [Balogh, Gergo; Gyimothy, Tibor] Univ Szeged, MTA SZTE Res Grp Artificial Intelligence, Szeged, Hungary",,"Unit test development has some widely accepted guidelines. Two of them concern the test and code relationship, namely isolation (unit tests should examine only a single unit) and separation (they should be placed next to this unit). These guidelines are not always kept by the developers. They can however be checked by investigating the relationship between tests and the source code, which is described by test-to-code traceability links. Still, these links perhaps cannot be inferred unambiguously from the test and production code. We developed a method that is based on the computation of traceability links for different aspects and report Structural Unit Test Smells where the traceability links for the different aspects do not match. The two aspects are the static structure of the code that reflects the intentions of the developers and testers and the dynamic coverage which reveals the actual behavior of the code during test execution. In this study, we investigated this method on real programs. We manually checked the reported Structural Unit Test Smells to find out whether they are real violations of the unit testing rules. Furthermore, the smells were analyzed to determine their root causes and possible ways of correction.",test-to-code traceability; unit testing; code coverage; test smells; refactoring,,test-to-code traceability;unit testing;code coverage;test smells;refactoring,gertom@inf.u-szeged.hu; geryxyz@inf.u-szeged.hu; hferenc@inf.u-szeged.hu; vancsics@inf.u-szeged.hu; beszedes@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu,,"C/O E SZABO, EXCHANGE LIBRARIAN, DUGONICS TER 13, PO BOX 393, SZEGED, 6701, HUNGARY",,,,"UNIV SZEGED, FAC SCIENCE",0324-721X,,,,English,ACTA CYBERN,Article,WoS,Computer Science,WOS:000438539600011,,Hungary,inf.u-szeged.hu,Univ Szeged,"Univ Szeged, Hungary","Gergely, Tamas; Balogh, Gergo; Horvath, Ferenc; Vancsics, Bela; Beszedes, Arpad; Gyimothy, Tibor"
"Deryugina O., Nikulchev E., Ryadchikov I., Sechenev S., Shmalko E.",Analysis of the anywalker software architecture using the UML refactoring tool,2019,Procedia Computer Science,150,,,743,750,,0,10.1016/j.procs.2019.02.005,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064431259&doi=10.1016%2fj.procs.2019.02.005&partnerID=40&md5=c42753e5361363522e6c94619d022a34,"MIREA, Russian Technological University, Institute of Integrated Security and Special Instrument Engineering, 119454 Prospect Vernadskogo 78, Moscow, Russian Federation; Kuban State University, 350040 Stavropolskaya Street 149, Krasnodar, Russian Federation; Federal Research Center, Computer science and control, RAS, 119333 Vavylova Street,44/2, Moscow, Russian Federation","Deryugina, O., MIREA, Russian Technological University, Institute of Integrated Security and Special Instrument Engineering, 119454 Prospect Vernadskogo 78, Moscow, Russian Federation; Nikulchev, E., MIREA, Russian Technological University, Institute of Integrated Security and Special Instrument Engineering, 119454 Prospect Vernadskogo 78, Moscow, Russian Federation; Ryadchikov, I., Kuban State University, 350040 Stavropolskaya Street 149, Krasnodar, Russian Federation; Sechenev, S., Kuban State University, 350040 Stavropolskaya Street 149, Krasnodar, Russian Federation; Shmalko, E., Federal Research Center, Computer science and control, RAS, 119333 Vavylova Street,44/2, Moscow, Russian Federation","Refactoring (restructuring of a system, which keeps its functionality invariant) of the software can be aimed at the optimization of such characteristics as modifiability, maintainability and understandability. Model refactoring can be conducted not only at the code level, but also at the model level. According to the MDA approach models are described using the Unified Modelling Language (UML). UML class diagrams are used to specify software architecture. UML Refactoring is a software tool, which provides UML class diagram analysis and refactoring. This article proposes results of AnyWalker project UML class diagram refactoring using the UML Refactoring tool. © 2019 The Authors. Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (https://creativecommons.org/licenses/by-nc-nd/4.0/) Peer-review under responsibility of the scientific committee of the 13th International Symposium “Intelligent Systems” (INTELS'18).",AnyWalker; Clas diagram; MDA; Model refactoring; Refactoring; Software architecture; UML Refactoring,Encoding (symbols); Intelligent systems; Modeling languages; AnyWalker; Clas diagram; MDA approach; Modifiability; Refactoring tools; Refactorings; UML class diagrams; Understandability; Software architecture,AnyWalker;Clas diagram;MDA;Model refactoring;Refactoring;Software architecture;UML Refactoring;Encoding (symbols);Intelligent systems;Modeling languages;MDA approach;Modifiability;Refactoring tools;Refactorings;UML class diagrams;Understandability,"Deryugina, O.; MIREA, Russian Technological University, Institute of Integrated Security and Special Instrument Engineering, 119454 Prospect Vernadskogo 78, Russian Federation; email: o.a.derugina@yandex.ru",Lobo Pereira F.M.F.Nikulchev E.V.Diveev A.I.Zelinka I.,,,,,Elsevier B.V.,18770509,,,,English,Procedia Comput. Sci.,Conference Paper,Scopus,,2-s2.0-85064431259,,Russian Federation,yandex.ru,,,"Deryugina O., Nikulchev E., Ryadchikov I., Sechenev S., Shmalko E."
"Dersten, S., Froberg, J., Axelsson, J., Land, R.",Analysis of the Business Effects of Software Architecture Refactoring in an Automotive Development Organization,2010,36TH EUROMICRO CONFERENCE ON SOFTWARE ENGINEERING AND ADVANCED APPLICATIONS,,,,269,278,10,3,10.1109/SEAA.2010.13,,"[Dersten, Sara; Axelsson, Jakob; Land, Rikard] Malardalen Univ, Vasteras, Sweden; [Froberg, Joakim] Volvo CE, Eskilstuna, Sweden",,"This paper presents an exploratory study of an automotive manufacturer, which develops embedded software for over 150 products and has adopted a company-wide software product-line approach. The company is facing the introduction of a new software architecture in all products in near time. This architecture introduces new paradigms more explicitly, such as explicit software components and signal-based communication, newer technologies, and adheres to new standards. Concretely, the architecture consists of common infrastructure and other generic components. Such a fundamental and drastic technology change can be expected to have far-reaching consequences, both of technical and non-technical nature. In this study we systematically investigate the introduction of the new software architecture, by mapping individual elements of the architectural change to system properties and company functions. The study implies that the whole organization is affected, and the new architecture also influences the cooperation with suppliers.",,,,sara.dersten@mdh.se; joakim.froberg@volvo.com; jakob.axelsson@mdh.se; rikard.land@mdh.se,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",36th EUROMICRO Conference on Software Engineering and Advanced Applications (SEAA2010),"Univ Lille Nord France, Polytechn Grad Engn Sch, Lille, FRANCE","SEP 01-03, 2010",IEEE COMPUTER SOC,1089-6503,978-0-7695-4170-9,,,English,EUROMICRO CONF PROC,Proceedings Paper,WoS,Computer Science,WOS:000395720700035,2-s2.0-78449304324,Sweden,mdh.se,Malardalen Univ;Volvo CE,"Malardalen Univ, Sweden;Volvo CE, Sweden","Dersten, Sara; Froberg, Joakim; Axelsson, Jakob; Land, Rikard"
"dos Reis F.H.B., Correa, U.B., Duarte, L.M., Beck, A.C.S.",Analysis of the impact of refactorings on the performance of embedded systems,2014,PROCEEDINGS OF IV BRAZILIAN SYMPOSIUM ON COMPUTING SYSTEMS ENGINEERING SBESC 2014,,,,97,102,6,0,10.1109/SBESC.2014.22,,"[dos Reis, Heitor B. F.; Correa, Ulisses B.; Duarte, Lucio Mauro; Beck, Antonio C. S.] Univ Fed Rio Grande Sul UFRGS, Inst Informat, Porto Alegre, RS, Brazil",,"In recent years, the large growth of embedded platforms available in the market brought a great challenge to software developers, since this kind of system offers limited hardware resources, which are lower than desktop computers. Therefore, these must be optimally used by programmers in order to meet expectations of end-users, such as performance, usability and battery life. In this context, this work aims to study the impact of code refactoring on the embedded devices' performance. This study is done by source code refactoring, aiming to improve readability and performance without altering the original functionality of the requirement. Three basic refactorings were evaluated and the Mult2Sim processor simulator was used.",physical metrics; Performance microprocessors,,physical metrics;Performance microprocessors,hbrfilho@inf.ufrgs.br; ubcorrea@inf.ufrgs.br; lmduarte@inf.ufrgs.br; caco@inf.ufrgs.br,,"345 E 47TH ST, NEW YORK, NY 10017 USA",4th Brazilian Symposium on Computing Systems Engineering (SBESC),"Manaus, BRAZIL","NOV 03-07, 2014",IEEE,2324-7886,978-1-4799-8559-3,,,English,BRAZ SYM COMPUT SYST,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000393499100017,2-s2.0-85019539607,Brazil,inf.ufrgs.br,Univ Fed Rio Grande Sul UFRGS,"Univ Fed Rio Grande Sul UFRGS, Brazil","dos Reis, Heitor B. F.; Correa, Ulisses B.; Duarte, Lucio Mauro; Beck, Antonio C. S."
"Zibran, M.F., Saha, R.K., Asaduzzaman, M., Roy, C.K.",Analyzing and Forecasting Near-miss Clones in Evolving Software: An Empirical Study,2011,2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS),,,,295,304,10,25,10.1109/ICECCS.2011.36,,"[Zibran, Minhaz F.; Saha, Ripon K.; Asaduzzaman, Muhammad; Roy, Chanchal K.] Univ Saskatchewan, Dept Comp Sci, Saskatoon, SK S7N 5C9, Canada",,"Effort for development and maintenance of complex large software is believed to have dependency on the amount of duplicated code fragments (code clones) present in code-bases. For example, clones need to be carefully and consistently maintained and/or refactored for preventing accidental error propagation. Thus it is important to understand the proportion and evolution of clones in evolving software systems for cost estimation or the like. This paper presents a study on the evolution of near-miss clones at release level in medium to large open source software systems of different types (operating systems, database systems, editors, etc.) written in three different programming languages namely C, C#, and Java. Using a hybrid clone detector, NiCad, we detected both exact and near-miss clones at different levels of similarity. Applying statistical methods we investigated, from different dimensions, the evolution of both exact and near-miss clones, and also forecasted the amount of clones in future releases of the software systems. Our study offers significant insights into the existence and evolution of code clones and their relationships with programming language or paradigm and program size.",,CODE CLONES; EVOLUTION; CLONING,CODE CLONES;EVOLUTION;CLONING,minhaz.zibran@usask.ca; ripon.saha@usask.ca; md.asad@usask.ca; chanchal.roy@usask.ca,"Perseil, I; Breitman, K; Sterritt, R","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",IEEE Int Conf/Workshops on Engineering of Autonomic and Autonomous Systems/Int Conf on the Engineering of Computer-Based Systems/Int Conf on the Engineering of Complex Computer Systems,"Las Vegas, NV","APR 27-29, 2011",IEEE COMPUTER SOC,,978-0-7695-4381-9,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000298664200029,,Canada,usask.ca,Univ Saskatchewan,"Univ Saskatchewan, Canada","Zibran, Minhaz F.; Saha, Ripon K.; Asaduzzaman, Muhammad; Roy, Chanchal K."
"Silva I.P.S.C., Alves E.L.G., Andrade W.L.",Analyzing automatic test generation tools for refactoring validation,2017,"Proceedings - 2017 IEEE/ACM 12th International Workshop on Automation of Software Testing, AST 2017",,, 7962330,38,44,,2,10.1109/AST.2017.9,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85026775305&doi=10.1109%2fAST.2017.9&partnerID=40&md5=42291a1307e687a1a53f81038cb659de,"Federal University of Campina Grande - UFCG, Software Practices Laboratory - SPLab, Brazil","Silva, I.P.S.C., Federal University of Campina Grande - UFCG, Software Practices Laboratory - SPLab, Brazil; Alves, E.L.G., Federal University of Campina Grande - UFCG, Software Practices Laboratory - SPLab, Brazil; Andrade, W.L., Federal University of Campina Grande - UFCG, Software Practices Laboratory - SPLab, Brazil","Refactoring edits are very common during agile development. Due to their inherent complexity, refactorings are know to be error prone. In this sense, refactoring edits require validation to check whether no behavior change was introduced. A valid way for validating refactorings is the use of automatically generated regression test suites. However, although popular, it is not certain whether the tools for generating tests (e.g., Randoop and EvoSuite) are in fact suitable in this context. This paper presents an exploratory study that investigated the efficiency of suites generated by automatic tools regarding their capacity of detecting refactoring faults. Our results show that both Randoop and EvoSuite suites missed more than 50% of all injected faults. Moreover, their suites include a great number of tests that could not be run integrally after the edits (obsolete test cases). © 2017 IEEE.",EvoSuite; Randoop; refactoring; test generation,Automatic test pattern generation; Automatic test generation; Automatically generated; EvoSuite; Exploratory studies; Inherent complexity; Randoop; Refactorings; Test generations; Software testing,EvoSuite;Randoop;refactoring;test generation;Automatic test pattern generation;Automatic test generation;Automatically generated;Exploratory studies;Inherent complexity;Refactorings;Test generations;Software testing,"Silva, I.P.S.C.; Federal University of Campina Grande - UFCG, Software Practices Laboratory - SPLabBrazil; email: indy@copin.ufcg.edu.br",,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781538615485,,,English,"Proc. - IEEE/ACM Int. Workshop Autom. Softw. Test., AST",Conference Paper,Scopus,,2-s2.0-85026775305,,Brazil,copin.ufcg.edu.br,,,"Silva I.P.S.C., Alves E.L.G., Andrade W.L."
"Sun W., France R.B., Ray I.",Analyzing behavioral refactoring of class models,2013,CEUR Workshop Proceedings,1090,,,70,79,,2,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923645048&partnerID=40&md5=8c05ea6ad1ec83ea9cede7741422f691,"Colorado State University, Fort Collins, CO, United States","Sun, W., Colorado State University, Fort Collins, CO, United States; France, R.B., Colorado State University, Fort Collins, CO, United States; Ray, I., Colorado State University, Fort Collins, CO, United States",Software modelers refactor their design models to improve design quality while preserving essential functional properties. Tools that allow modelers to check whether their refactorings preserve specified essential behaviors are needed to support rigorous model evolution. In this paper we describe a rigorous approach to analyzing design model refactorings that involve changes to operation specifications expressed in the Object Constraint Language (OCL). The analysis checks whether the refactored model preserves the essential behavior of changed operations in a source design model. A refactoring example involving the Abstract Factory design pattern is used in the paper to illustrate the approach. © 2013 for the individual papers by the papers' authors.,Alloy; Behavioral refactoring; UML/OCL,Alloying; Computational linguistics; Design modeling; Design Quality; Factory design; Functional properties; Object Constraint Language; Refactorings; Rigorous approach; Uml/ocl; Design,Alloy;Behavioral refactoring;UML/OCL;Alloying;Computational linguistics;Design modeling;Design Quality;Factory design;Functional properties;Object Constraint Language;Refactorings;Rigorous approach;Design,,Pierantonio A.Schatz B.,,,,,CEUR-WS,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-84923645048,,United States,No email,,,"Sun W., France R.B., Ray I."
"Lozano, A., Mens, K., Portugal, J.",Analyzing Code Evolution to Uncover Relations between Bad Smells,2015,2015 IEEE 2ND INTERNATIONAL WORKSHOP ON PATTERNS PROMOTION AND ANTI-PATTERNS PREVENTION (PPAP),,,,1,4,4,3,,,"[Lozano, Angela] Vrije Univ Brussel, Brussels, Belgium; [Mens, Kim] Catholic Univ Louvain, Louvain La Neuve, Belgium",,"This paper reports on evidence found of five possible relations (Plain Support, Mutual Support, Rejection, Common Refactoring, and Inclusion) among four bad smells (God Class, Long Method, Feature Envy, and Type Checking). We analyzed several releases of three open-source applications (16 for Log4j, 34 for Jmol, and 45 for JFreeChart) using four direct and two indirect metrics. This analysis uncovered correlations between three of these bad smells, namely, Feature Envy, Long Method, and God Class. The strongest correlation discovered was between Feature Envy and Long Method, followed by a mild correlation between Long Method and God Class, and between Feature Envy and God Class. These findings seem to provide initial evidence of the co-existence of bad smells and therefore, the need for bad smell removal plans to take into account these correlations in order to minimize code improvement efforts.",,,,alozanor@vub.ac.be; kim.mens@uclouvain.be; jawitugal@gmail.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",2015 IEEE 2nd International Workshop on Pattern Promotion and Anti-Pattern Prevention (PPAP),"Montreal, CANADA","MAR 02-02, 2015",IEEE,,978-1-4673-6920-6,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000380460600001,,Belgium,vub.ac.be,Vrije Univ Brussel;Catholic Univ Louvain,"Vrije Univ Brussel, Belgium;Catholic Univ Louvain, Belgium","Lozano, Angela; Mens, Kim; Portugal, Jawira"
"Mehta, Y., Singh, P., Sureka, A.",Analyzing Code Smell Removal Sequences for Enhanced Software Maintainability,2018,2018 CONFERENCE ON INFORMATION AND COMMUNICATION TECHNOLOGY (CICT'18),,,,,,6,0,,,"[Mehta, Yukti; Singh, Paramvir] Natl Inst Technol, Jalandhar, Punjab, India; [Sureka, Ashish] Ashoka Univ, Sonipat, Haryana, India",,"Code smells are the surface indications which affect the maintainability of the software. Code smells disturb the maintainability of the code by starting a chain reaction of breakages in dependent modules which makes it difficult to read and modify. Applying appropriate refactoring sequences by prioritizing the classes to obtain maintainable software is a tedious process due to strict deadlines of the projects for the developers. Recent researches have explored varied ways of ranking the classes to improve the maintainability. This work empirically investigates the impact of eliminating three prominent code smells by considering their six possible combinations. Our work prioritizes the object oriented software classes in the code that are in the need of refactoring. For prioritizing the refactoring prone classes, a proposed metric, maintainability complexity index is calculated using the values of maintainability index and relative logical complexity as the inputs. The study outcomes show the values of maintainability predicting metrics for the corresponding permutation of the code smell removal sequence. Also, the work aims to yield the sequence which gives software with maximum maintainability so that developers and researchers can save their effort and time to produce high quality software.",maintainability; code smell; prioritization; refactoring; removal sequences; maintainability metrics,,maintainability;code smell;prioritization;refactoring;removal sequences;maintainability metrics,yukti.mehta19@gmail.com; singhpv@nitj.ac.in; ashish.sureka@ieee.org,,"345 E 47TH ST, NEW YORK, NY 10017 USA",Conference on Information and Communication Technology (CICT),"Jabalpur, INDIA","OCT 26-28, 2018",IEEE,,978-1-5386-8215-9,,,English,,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000475908200067,2-s2.0-85067115135,India,gmail.com,Natl Inst Technol;Ashoka Univ,"Natl Inst Technol, India;Ashoka Univ, India","Mehta, Yukti; Singh, Paramvir; Sureka, Ashish"
"Bohnet J., Dollner J.",Analyzing feature implementation by visual exploration of architecturally-embedded call-graphs,2006,Proceedings - International Conference on Software Engineering,,,,41,47,,3,10.1145/1138912.1138922,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77953547622&doi=10.1145%2f1138912.1138922&partnerID=40&md5=6f09d8096166b4ef83a08939b70cf228,"University of Potsdam, Hasso-Plattner-Institute, Prof.-Dr.-Helmert-Str. 2-3, 14482 Potsdam, Germany","Bohnet, J., University of Potsdam, Hasso-Plattner-Institute, Prof.-Dr.-Helmert-Str. 2-3, 14482 Potsdam, Germany; Döllner, J., University of Potsdam, Hasso-Plattner-Institute, Prof.-Dr.-Helmert-Str. 2-3, 14482 Potsdam, Germany","Maintenance, reengineering, and refactoring of large and complex software systems are commonly based on modifications and enhancements related to features. Before developers can modify feature functionality they have to locate the relevant code components and understand the components' interaction. In this paper, we present a prototype tool for analyzing feature implementation of large C/C++ software systems by visual exploration of dynamically extracted call relations between code components. The component interaction can be analyzed on various abstraction levels ranging from function interaction up to interaction of the system with shared libraries of the operating system. The user visually explores the component interaction within a multiview visualization system consisting of various textual and a graphical 3D landscape view. During exploration the 3D landscape view supports the user firstly in deciding early whether a call relation is essential for understanding the feature and, secondly, in finding starting points for fine-grained feature analysis using a top-down approach. Copyright 2006 ACM.",dynamic analysis; dynamic slicing; feature analysis; program comprehension; reverse engineering; software visualization,Abstraction level; Code components; Complex software systems; Component interaction; Dynamic slicing; Feature analysis; Multiview visualization; Operating systems; Program comprehension; Prototype tools; Refactorings; Software systems; software visualization; Top-down approach; Visual exploration; Computer operating systems; Computer programming; Computer software maintenance; Reengineering; Reverse engineering; Software engineering; Three dimensional; Visualization; Dynamic analysis,dynamic analysis;dynamic slicing;feature analysis;program comprehension;reverse engineering;software visualization;Abstraction level;Code components;Complex software systems;Component interaction;Multiview visualization;Operating systems;Prototype tools;Refactorings;Software systems;Top-down approach;Visual exploration;Computer operating systems;Computer programming;Computer software maintenance;Reengineering;Software engineering;Three dimensional;Visualization,"Bohnet, J.; University of Potsdam, Hasso-Plattner-Institute, Prof.-Dr.-Helmert-Str. 2-3, 14482 Potsdam, Germany; email: bohnet@hpi.uni-potsdam.de",,,,,,,02705257,1595934006; 9781595934000,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-77953547622,,Germany,hpi.uni-potsdam.de,,,"Bohnet J., Dollner J."
"Garrido A., Johnson R.",Analyzing multiple configurations of a C program,2005,"IEEE International Conference on Software Maintenance, ICSM",2005,, 1510133,379,388,,43,10.1109/ICSM.2005.23,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646910830&doi=10.1109%2fICSM.2005.23&partnerID=40&md5=5bd10029112d198761c866a318f2509a,"University of Illinois, Urbana-Champaign, IL, United States","Garrido, A., University of Illinois, Urbana-Champaign, IL, United States; Johnson, R., University of Illinois, Urbana-Champaign, IL, United States","Preprocessor conditionals are heavily used in C programs since they allow the source code to be configured for different platforms or capabilities. However, preprocessor conditionals, as well as other preprocessor directives, are not part of the C language. They need to be evaluated and removed, and so a single configuration selected, before parsing can take place. Most analysis and program understanding tools run on this preprocessed version of the code so their results are based on a single configuration. This paper describes the approach of CRefactory, a refactoring tool for C programs. A refactoring tool cannot consider only a single configuration: changing the code for one configuration may break the rest of the code. CRefactory analyses the program for all possible configurations simultaneously. CRefactory also preserves preprocessor directives and integrates them in the internal representations. The paper also presents metrics from two case studies to show that CRefactory's program representation is practical. © 2005 IEEE.",,Codes (symbols); Computer aided software engineering; Program processors; CRefactory's program; Preprocessor directives; C (programming language),Codes (symbols);Computer aided software engineering;Program processors;CRefactory's program;Preprocessor directives;C (programming language),"Garrido, A.; University of Illinois, Urbana-Champaign, IL, United States; email: garrido@cs.uiuc.edu",,,,,,,,,,,English,IEEE Int. Conf. Softw. Maint. ICSM,Conference Paper,Scopus,,2-s2.0-33646910830,,United States,cs.uiuc.edu,,,"Garrido A., Johnson R."
"Gao, Y., Liu, H., Fan, X.Z., Niu, Z.D., Nyirongo, B.",Analyzing Refactorings' Impact on Regression Test Cases,2015,"39TH ANNUAL IEEE COMPUTERS, SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC 2015), VOL 2",,,,222,231,10,1,10.1109/COMPSAC.2015.16,,"[Gao, Yuan; Liu, Hui; Fan, XiaoZhong; Niu, ZhenDong; Nyirongo, Bridget] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing, Peoples R China",,"Software refactoring is to improve readability, maintainability and expansibility of software by adjusting its internal structure, whereas the external behaviors of software are not changed. Although software refactoring should not change the external behaviors of software systems, they might make a regression test case obsolete (with syntax and runtime errors) or fail. People have investigated which refactorings had an influence on regression test case. However, how test cases are influenced by refactorings and what kind of errors might be introduced remain unknown. To this end, in this paper, we proposed an approach to analyze refactorings' impact on regression test cases. On one hand, we analyzed why regression test cases failed. On the other hand, we analyzed the influence of refactorings on software interfaces. Based on the analysis, we built up a mapping between refactorings and test case failure. Such a mapping can be used to guide test case repair automation where test cases are made obsolete by refactorings. The approach was evaluated on five open-source applications. Evaluation results suggest that the precision of the approach is greater than 80%.",,,,alexandagy@gmail.com; liuhui2005@gmail.com; fxz@bit.edu.cn; zniu@bit.edu.cn; bnyirongo@cc.ac.mw,"Ahamed, SI; Chang, CK; Chu, W; Crnkovic, I; Hsiung, PA; Huang, G; Yang, JW","345 E 47TH ST, NEW YORK, NY 10017 USA",39th IEEE Annual International Computer Software and Applications Conference Workshops (COMPSAC),"Taichung, TAIWAN","JUL 01-05, 2015",IEEE,0730-3157,978-1-4673-6563-5,,,English,P INT COMP SOFTW APP,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380584300035,2-s2.0-84962171701,China,gmail.com,Beijing Inst Technol,"Beijing Inst Technol, China","Gao, Yuan; Liu, Hui; Fan, XiaoZhong; Niu, ZhenDong; Nyirongo, Bridget"
"Soares G., Catao B., Varjao C., Aguiar S., Gheyi R., Massoni T.",Analyzing refactorings on software repositories,2011,"Proceedings - 25th Brazilian Symposium on Software Engineering, SBES 2011",,, 6065160,164,173,,13,10.1109/SBES.2011.21,https://www.scopus.com/inward/record.uri?eid=2-s2.0-82255180584&doi=10.1109%2fSBES.2011.21&partnerID=40&md5=ca98d61144096857d5dfb23d4c94924a,"Department of Computing and Systems, Federal University of Campina Grande, Brazil","Soares, G., Department of Computing and Systems, Federal University of Campina Grande, Brazil; Catão, B., Department of Computing and Systems, Federal University of Campina Grande, Brazil; Varjão, C., Department of Computing and Systems, Federal University of Campina Grande, Brazil; Aguiar, S., Department of Computing and Systems, Federal University of Campina Grande, Brazil; Gheyi, R., Department of Computing and Systems, Federal University of Campina Grande, Brazil; Massoni, T., Department of Computing and Systems, Federal University of Campina Grande, Brazil","Currently analysis of refactoring in software reposi- tories is either manual or only syntactic, which is time-consuming, error-prone, and non-scalable. Such analysis is useful to understand the dynamics of refactoring throughout development, especially in multi-developer environments, such as open source projects. In this work, we propose a fully automatic technique to analyze refactoring frequency, granularity and scope in software repositories. It is based on SAFEREFACTOR, a tool that analyzes transformations by generating tests to detect behavioral changes - it has found a number of bugs in refactoring implementations within some IDEs, such as Eclipse and Netbeans. We use our technique to analyze five open source Java projects (JHotDraw, ArgoUML, SweetHome 3D, HSQLDB and jEdit). From more than 40,723 software versions, 39 years of software development, 80 developers and 1.5 TLOC, we have found that: 27% of changes are refactorings. Regarding the refactorings, 63,83% are Low level, and 71% have local scope. Our results indicate that refactorings are frequently applied before likely functionality changes, in order to better prepare design for accommodating additions. © 2011 IEEE.",,Automatic technique; Behavioral changes; Error prones; JHotDraw; Low level; NetBeans; Open source projects; Open sources; Refactorings; Software repositories; Software versions; Behavioral research; Java programming language; Software design,Automatic technique;Behavioral changes;Error prones;JHotDraw;Low level;NetBeans;Open source projects;Open sources;Refactorings;Software repositories;Software versions;Behavioral research;Java programming language;Software design,"Soares, G.; Department of Computing and Systems, Federal University of Campina GrandeBrazil; email: gsoares@dsc.ufcg.edu.br",,,,,,,,9780769546032,,,English,"Proc. - Braz. Symp. Softw. Eng., SBES",Conference Paper,Scopus,,2-s2.0-82255180584,,Brazil,dsc.ufcg.edu.br,,,"Soares G., Catao B., Varjao C., Aguiar S., Gheyi R., Massoni T."
"Stuurman S., Passier H., Barendsen E.",Analyzing students' software redesign strategies,2016,ACM International Conference Proceeding Series,,,,110,119,,1,10.1145/2999541.2999559,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85014699298&doi=10.1145%2f2999541.2999559&partnerID=40&md5=d9a060de027a4d51e0f8e74a078f4207,"Open University, Netherlands; Radboud University, Netherlands","Stuurman, S., Open University, Netherlands; Passier, H., Open University, Netherlands; Barendsen, E., Open University, Netherlands, Radboud University, Netherlands","The design of software is known to be difficult for novice computer scientists. In this paper, we focus on software redesign and on the refactoring necessary to implement a redesign. Redesigning an application aims to improve nonfunctional aspects such as extensibility, without changing the functionality. Redesign is a complex task, involving knowledge and skills from software design in general and the use of design patterns in particular. This study is part of an educational design research project aiming at developing scaffolding for students' software redesign activities in the form of procedural guidance. We investigated students' strategies and usage of concepts during a software redesign assignment using students' reports and team colllaboration recordings as data sources, thus focusing on the process instead of on the design results, in contrast with existing studies. We identified several difficulties that can serve as starting points for procedural guidance. For instance, students seem to avoid using a structured analysis method. Our findings indicate that students' activities were mainly directed towards the code rather than the design problem. © 2016 ACM.",Design patterns; Education; Procedural guidelines; Redesign; Refactoring,Education; Scaffolds; Students; Computer scientists; Design Patterns; Non-functional aspects; Procedural guidances; Procedural guidelines; Redesign; Refactorings; Structured analysis; Software design,Design patterns;Education;Procedural guidelines;Redesign;Refactoring;Scaffolds;Students;Computer scientists;Non-functional aspects;Procedural guidances;Refactorings;Structured analysis;Software design,,,,,,,Association for Computing Machinery,,9781450347709,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85014699298,,Netherlands,No email,,,"Stuurman S., Passier H., Barendsen E."
"Behutiye, W.N., Rodriguez, P., Oivo, M., Tosun, A.",Analyzing the concept of technical debt in the context of agile software development: A systematic literature review,2017,INFORMATION AND SOFTWARE TECHNOLOGY,82,,,139,158,20,11,10.1016/j.infsof.2016.10.004,,"[Behutiye, Woubshet Nema; Rodriguez, Pilar; Oivo, Markku] Univ Oulu, Oulu, Finland; [Tosun, Ayse] Istanbul Tech Univ, Fac Comp Engn & Informat, Sariyer, Turkey",,"Context: Technical debt (TD) is a metaphor that is used to communicate the consequences of poor software development practices to non-technical stakeholders. In recent years, it has gained significant attention in agile software development (ASD). Objective: The purpose of this study is to analyze and synthesize the state of the art of TD, and its causes, consequences, and management strategies in the context of ASD. Research Method: Using a systematic literature review (SLR), 38 primary studies, out of 346 studies, were identified and analyzed. Results: We found five research areas of interest related to the literature of TD in ASD. Among those areas, ""managing TD in ASD"" received the highest attention, followed by ""architecture in ASD and its relationship with TD"". In addition, eight categories regarding the causes and five categories regarding the consequences of incurring TD in ASD were identified. ""Focus on quick delivery"" and ""architectural and design issues"" were the most popular causes of incurring TD in ASD. ""Reduced productivity"", ""system degradation"" and ""increased maintenance cost"" were identified as significant consequences of incurring TD in ASD. Additionally, we found 12 strategies for managing TD in the context of ASD, out of which ""refactoring"" and ""enhancing the visibility of TD"" were the most significant. Conclusion: The results of this study provide a structured synthesis of TD and its management in the context of ASD as well as potential research areas for further investigation. (C) 2016 Elsevier B.V. All rights reserved.",Technical debt; Agile software development; Technical debt management; Systematic literature review,,Technical debt;Agile software development;Technical debt management;Systematic literature review,woub.behutiye@gmail.com,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Review,WoS,Computer Science,WOS:000389167000008,2-s2.0-84993990146,Finland;Turkey,gmail.com,Univ Oulu;Istanbul Tech Univ,"Univ Oulu, Finland;Istanbul Tech Univ, Turkey","Behutiye, Woubshet Nema; Rodriguez, Pilar; Oivo, Markku; Tosun, Ayse"
"Liebig J., Kastner C., Apel S.",Analyzing the discipline of preprocessor annotations in 30 million lines of C code,2011,"Proceedings of the 10th International Conference on Aspect-Oriented Software Development, AOSD.11",,,,191,202,,71,10.1145/1960275.1960299,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79955152719&doi=10.1145%2f1960275.1960299&partnerID=40&md5=7fadd250b07ffffcec6694d2966111e0,"University of Passau, Passau, Germany; Philipps-University Marburg, Marburg, Germany","Liebig, J., University of Passau, Passau, Germany; Kästner, C., Philipps-University Marburg, Marburg, Germany; Apel, S., University of Passau, Passau, Germany","The C preprocessor cpp is a widely used tool for implementing variable software. It enables programmers to express variable code (which may even crosscut the entire implementation) with conditional compilation. The C preprocessor relies on simple text processing and is independent of the host language (C, C++, Java, and so on). Language-independent text processing is powerful and expressive - programmers can make all kinds of annotations in the form of #ifdefs - but can render unpreprocessed code difficult to process automatically by tools, such as refactoring, concern management, and variability-aware type checking. We distinguish between disciplined annotations, which align with the underlying source-code structure, and undisciplined annotations, which do not align with the structure and hence complicate tool development. This distinction raises the question of how frequently programmers use undisciplined annotations and whether it is feasible to change them to disciplined annotations to simplify tool development and to enable programmers to use a wide variety of tools in the first place. By means of an analysis of 40 medium-sized to large-sized C programs, we show empirically that programmers use cpp mostly in a disciplined way: about 84% of all annotations respect the underlying source-code structure. Furthermore, we analyze the remaining undisciplined annotations, identify patterns, and discuss how to transform them into a disciplined form.",Conditional compilation; Crosscutting concerns; Ifdef; Preprocessor; Virtual separation of concerns,Conditional compilation; Crosscutting concern; Ifdef; Preprocessors; Virtual separation of concerns; Computer systems programming; Java programming language; Text processing; Word processing; Software design,Conditional compilation;Crosscutting concerns;Ifdef;Preprocessor;Virtual separation of concerns;Crosscutting concern;Preprocessors;Computer systems programming;Java programming language;Text processing;Word processing;Software design,"Liebig, J.; University of Passau, Passau, Germany; email: joliebig@fim.uni-passau.de",,,,,,,,9781450305563,,,English,"Proc. Int. Conf. Asp.-Oriented Softw. Dev., AOSD",Conference Paper,Scopus,,2-s2.0-79955152719,,Germany,fim.uni-passau.de,,,"Liebig J., Kastner C., Apel S."
"Lee H.H., Lai W.C.",Analyzing the evolution patterns of object-oriented system,2007,"Proceedings of the 11th IASTED International Conference on Software Engineering and Applications, SEA 2007",,,,501,504,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959047992&partnerID=40&md5=de4ea6e9288731be72e5ed78de88ccff,"Graduate Institute of Computer Science and Information Engineering, National Taiwan University, Taipei, Taiwan","Lee, H.-H., Graduate Institute of Computer Science and Information Engineering, National Taiwan University, Taipei, Taiwan; Lai, W.-C., Graduate Institute of Computer Science and Information Engineering, National Taiwan University, Taipei, Taiwan","In the process of development in a software system, software maintenance plays an important role to reduce cost and effort. As software release, maintenance becomes difficult due to the complexity increase. Understanding and refactoring are the solutions. We discovery historical events for more understanding what happened. There are macro and micro phenomenon of software history. In macro, we pointed out the events happened in the real world. In micro, we descript how these events behave and evolve. Multiple sequence alignment gathers these behaviours and emerge macro phenomenon. In the end of paper, a case study is demonstrated to prove that maintenance is achieved.",Multiple sequence alignment; Software evolution; Software maintenance; Software metric,Application programs; Computer software maintenance; Maintenance; Software engineering; Systems analysis; Evolution patterns; Multiple sequence alignments; Object-oriented system; Software Evolution; Software history; Software metrices; Software release; Software systems; Object oriented programming,Multiple sequence alignment;Software evolution;Software maintenance;Software metric;Application programs;Computer software maintenance;Maintenance;Software engineering;Systems analysis;Evolution patterns;Multiple sequence alignments;Object-oriented system;Software history;Software metrices;Software release;Software systems;Object oriented programming,,,,,,,ACTA Press,,9780889867055,,,English,"Proc. IASTED Int. Conf. Softw. Eng. Appl., SEA",Conference Paper,Scopus,,2-s2.0-84959047992,,Taiwan,No email,,,"Lee H.-H., Lai W.-C."
"Perez-Castillo, R., Piattini, M.",Analyzing the Harmful Effect of God Class Refactoring on Power Consumption,2014,IEEE SOFTWARE,31,3,,48,54,7,13,10.1109/MS.2014.23,,"[Perez-Castillo, Ricardo; Piattini, Mario] Univ Castilla La Mancha, E-13071 Ciudad Real, Spain",,,,SOFTWARE,SOFTWARE,ricardo.pdelcastillo@gmail.com; piattini@uclm.es,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0740-7459,,,,English,IEEE SOFTWARE,Article,WoS,Computer Science,WOS:000335152800011,2-s2.0-84899674997,Spain,gmail.com,Univ Castilla La Mancha,"Univ Castilla La Mancha, Spain","Perez-Castillo, Ricardo; Piattini, Mario"
"Wilches, A., Aponte, J.",Analyzing the Impact of Information Retrieval and Relevance Feedback on Concept Location Tasks. A Controlled Experiment,2018,OBRAS COLECTIVAS EN CIENCIAS DE LA COMPUTACION,,,,269,284,16,0,,,"[Wilches, Andres; Aponte, Jairo] Univ Nacl Colombia, Dept Ingn Sistemas & Ind, Bogota, Colombia",,"Concept location is the process by which a programmer determines the place, within a system codebase, where a change is to start in response to a modification request. It is a usual and fundamental process performed as part of software maintenance tasks such as bug fixing, refactoring, and in some cases, new feature implementation. One of the recent approaches proposed to support that process augments information retrieval (IR) based concept location via an explicit relevance feedback (RF) mechanism. This paper presents a tool that implements the IR+RF approach and a controlled experiment aimed at assessing the impact of that approach on bug fixing tasks. Within the experiment, five bug fixing tasks were performed by 40 undergraduate software engineering students. The efficiency of the participants, the completion time, and the correctness of their responses were measured. The results indicate that the IR+ RF approach surpasses in correctness and efficiency the default searching functionalities provided by the Eclipse IDE. On the other hand, it does not reduce the completion time in bug fixing tasks.",Concept Location; Information Retrieval; Relevance Feedback; Controlled Experiment,,Concept Location;Information Retrieval;Relevance Feedback;Controlled Experiment,,"Beltran, VMP; Paz, LP","CALLE 25 NO 115 85 KM 2 VIA CALI-JAMUNDI, CALI, 760030, COLOMBIA",12th Colombian Conference on Computing (CCC),"Cali, COLOMBIA","SEP 19-22, 2017",UNIV AUTONOMA OCCIDENTE,,978-958-5415-19-5,,,English,,Proceedings Paper,WoS,Computer Science; Robotics,WOS:000483360200018,,Colombia,No email,Univ Nacl Colombia,"Univ Nacl Colombia, Colombia","Wilches, Andres; Aponte, Jairo"
"Hasanain W., Labiche Y., Eldh S.",An analysis of complex industrial test code using clone analysis,2018,"Proceedings - 2018 IEEE 18th International Conference on Software Quality, Reliability, and Security, QRS 2018",,, 8424999,482,489,,1,10.1109/QRS.2018.00061,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052315105&doi=10.1109%2fQRS.2018.00061&partnerID=40&md5=0bbef3c13945b7eae2e0069303c9860b,"Department of Systems and Computer Engineering, Carleton University, Ottawa, Canada; Ericsson AB, Kista, Sweden","Hasanain, W., Department of Systems and Computer Engineering, Carleton University, Ottawa, Canada; Labiche, Y., Department of Systems and Computer Engineering, Carleton University, Ottawa, Canada; Eldh, S., Ericsson AB, Kista, Sweden","Many companies, including Ericsson, experience increased software verification costs. Agile cross-functional teams find it easy to make new additions of test cases for every change and fix. The consequence of this phenomenon is duplications of test code. In this paper, we perform an industrial case study that aims at better understanding such duplicated test fragments or as we call them, clones. In our study, 49% (LOC) of the entire test code are clones. The reported results include figures about clone frequencies, types, similarity, fragments, and size distributions, and the number of line differences in cloned test cases. It is challenging to keep clones consistent and remove unnecessary clones during the entire testing process of large-scale commercial software. © 2018 IEEE.",Clone detection; Code duplications; Industrial case study; Refactoring test code; Test code; Test smell,Cloning; Codes (symbols); Computer software selection and evaluation; Software reliability; Testing; Verification; Clone detection; Code duplication; Commercial software; Cross-functional teams; Industrial case study; Industrial tests; Software verification; Test code; Software testing,Clone detection;Code duplications;Industrial case study;Refactoring test code;Test code;Test smell;Cloning;Codes (symbols);Computer software selection and evaluation;Software reliability;Testing;Verification;Code duplication;Commercial software;Cross-functional teams;Industrial tests;Software verification;Software testing,,,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781538677575,,,English,"Proc. - IEEE Int. Conf. Softw. Qual., Reliab., Secur., QRS",Conference Paper,Scopus,,2-s2.0-85052315105,,Canada;Sweden,No email,,,"Hasanain W., Labiche Y., Eldh S."
"Wood M.I., Ivanov L., Lamprou Z.",An analysis of inheritance hierarchy evolution,2019,ACM International Conference Proceeding Series,,,,24,33,,0,10.1145/3319008.3319023,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85064752392&doi=10.1145%2f3319008.3319023&partnerID=40&md5=814beb73d887fc487a7391396bd0ef3b,"Dept. of Computer and Information Sciences, University of Strathclyde, Glasgow, G1 1XH, United Kingdom","Wood, M.I., Dept. of Computer and Information Sciences, University of Strathclyde, Glasgow, G1 1XH, United Kingdom; Ivanov, L., Dept. of Computer and Information Sciences, University of Strathclyde, Glasgow, G1 1XH, United Kingdom; Lamprou, Z., Dept. of Computer and Information Sciences, University of Strathclyde, Glasgow, G1 1XH, United Kingdom","This research investigates the evolution of object-oriented inheritance hierarchies in open source, Java systems. The paper contributes an understanding of how hierarchies, particularly large complex hierarchies, evolve in ‘real world’ systems. It informs object-oriented design practices that aim to control or avoid these complicated design structures. The study is based on a detailed analysis of 665 inheritance hierarchies drawn from a total of 262 versions of 10 open source systems. The research contributions include that: i) the majority of inheritance hierarchies are ‘simple’ in structure and remain that way throughout their lifetimes ii) the majority of hierarchies are stable in terms of size and shape throughout their lifetimes iii) there is a minority of large, complex, branching ‘Subtree’ hierarchies that continue to grow ever more complicated as the systems evolve iv) a detailed analysis of some of these larger hierarchies finds evidence of ‘good’ object-oriented design practices being used but also highlights the significant challenges involved in understanding and refactoring these complex structures. There is clear evidence that some of the complex hierarchies are emphasising reuse while others appear focused on type inheritance. © 2019 Association for Computing Machinery.",Case study; Empirical; Evolution; Hierarchy; Inheritance; Open source,Open source software; Open systems; Empirical; Evolution; Hierarchy; Inheritance; Open sources; Object oriented programming,Case study;Empirical;Evolution;Hierarchy;Inheritance;Open source;Open source software;Open systems;Open sources;Object oriented programming,,,,,,,Association for Computing Machinery,,9781450371452,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85064752392,,United Kingdom,No email,,,"Wood M.I., Ivanov L., Lamprou Z."
"Liebig J., Apel S., Lengauer C., Kastner C., Schulze M.",An analysis of the variability in forty preprocessor-based software product lines,2010,Proceedings - International Conference on Software Engineering,1,,,105,114,,172,10.1145/1806799.1806819,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954730541&doi=10.1145%2f1806799.1806819&partnerID=40&md5=8f67119512582057938b5763abfea2e3,"University of Passau, Germany; University of Magdeburg, Germany","Liebig, J., University of Passau, Germany; Apel, S., University of Passau, Germany; Lengauer, C., University of Passau, Germany; Kästner, C., University of Magdeburg, Germany; Schulze, M., University of Magdeburg, Germany","Over 30 years ago, the preprocessor cpp was developed to extend the programming language C by lightweight metaprogramming capabilities. Despite its error-proneness and low abstraction level, the preprocessor is still widely used in present-day software projects to implement variable software. However, not much is known about how cpp is employed to implement variability. To address this issue, we have analyzed forty open-source software projects written in C. Specifically, we answer the following questions: How does program size influence variability? How complex are extensions made via cpp's variability mechanisms? At which level of granularity are extensions applied? Which types of extension occur? These questions revive earlier discussions on program comprehension and refactoring in the context of the preprocessor. To provide answers, we introduce several metrics measuring the variability, complexity, granularity, and types of extension applied by preprocessor directives. Based on the collected data, we suggest alternative implementation techniques. Our data set is a rich source for rethinking language design and tool support. © 2010 ACM.",C preprocessor; empirical study; software product lines,Abstraction level; Data sets; Empirical studies; Implementation techniques; Language design; Metaprogramming capabilities; Open-source softwares; Preprocessors; Program comprehension; Program size; Programming language; Refactorings; Software Product Line; Software project; Tool support; Linguistics; Software engineering; Program processors,C preprocessor;empirical study;software product lines;Abstraction level;Data sets;Empirical studies;Implementation techniques;Language design;Metaprogramming capabilities;Open-source softwares;Preprocessors;Program comprehension;Program size;Programming language;Refactorings;Software Product Line;Software project;Tool support;Linguistics;Software engineering;Program processors,"Liebig, J.; University of PassauGermany; email: joliebig@fim.uni-passau.de",,,,,,,02705257,9781605587196,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-77954730541,,Germany,fim.uni-passau.de,,,"Liebig J., Apel S., Lengauer C., Kastner C., Schulze M."
"Gaddam, R., Nandhini, M.",An Analysis of Various Snort Based Techniques to Detect and Prevent Intrusions in Networks Proposal with Code Refactoring Snort Tool in Kali Linux Environment,2017,PROCEEDINGS OF THE 2017 INTERNATIONAL CONFERENCE ON INVENTIVE COMMUNICATION AND COMPUTATIONAL TECHNOLOGIES (ICICCT),,,,10,15,6,4,,,"[Gaddam, RaviTeja; Nandhini, M.] Pondicherry Univ, Dept Comp Sci, Pondicherry, India",,"Security and reliability are the major concern of our daily life usage of any network. But with the swift advancements in network technology, attacks are becoming more sophisticated than defenses. Although firewalls and router-based packet filtering are essential elements of an overall network security topology, they are not enough on their own. So, to brace the network from unauthorized access the idea of Intrusion Detection System (IDS) and Intrusion Prevention System (IPS) is attracting security experts. This paper briefs various trends in Intrusion Detection & Prevention. To understand various techniques in IDS, this paper analyses various approaches proposed by security researchers specifically using popular open source software Snort as their IDS tool. Being an open source IDS, Snort can be easily configured and deployed in any environment. To assess the efficiency, these research papers are analyzed in various performance aspects like Detection Accuracy, Scalability and Capability of detecting unknown attacks. To overcome various challenges like low detection rate, incapable of handling huge traffic, unsupported automated tuning, etc. that are identified during literature review, this paper proposes a level based architecture. All the levels are designed as incremental i.e. capable of providing the desired functionality and also its lower levels. To prove the efficiency of the proposed architecture, it can be integrated into Snort Tool using Code Refactoring. Also proposed an environment setup to evaluate the modified Snort Tool performance in future.",security; reliability; attacks; Intrusion Detection System; Intrusion Prevention System; Snort Tool; Kali Linux,NETWORK,security;reliability;attacks;Intrusion Detection System;Intrusion Prevention System;Snort Tool;Kali Linux;NETWORK,raviteja.csebec@gmail.com; mnandhini2005@yahoo.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Inventive Communication and Computational Technologies (ICICCT),"Coimbatore, INDIA","MAR 10-11, 2017",IEEE,,978-1-5090-5297-4,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000412845400003,2-s2.0-85027466001,India,gmail.com,Pondicherry Univ,"Pondicherry Univ, India","Gaddam, RaviTeja; Nandhini, M."
"Linstead, E., Lopes, C., Baldi, P.",An Application of Latent Dirichlet Allocation to Analyzing Software Evolution,2008,"SEVENTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS",,,,813,818,6,42,10.1109/ICMLA.2008.47,,"[Linstead, Erik; Lopes, Cristina; Baldi, Pierre] Univ Calif Irvine, Bren Sch Informat & Comp Sci, Irvine, CA 92717 USA",,"We develop and apply unsupervised statistical topic models, in particular Latent Dirichlet Allocation, to identify functional components of source code and study their evolution over multiple project versions. We present results for two large, open source Java projects, Eclipse and ArgoUML, which are well-known and well-studied within the software mining community Our results demonstrate the effectiveness of probabilistic topic models in automatically summarizing the temporal dynamics of software concerns, with direct application to project management and program understanding. In addition to detecting the emergence of topics on the release timeline which represent integration points for key source code functionality, our techniques can also be used to pinpoint refactoring events in the underlying software design, as well as to identify general programming concepts whose prevalence is dependent only of the size of the code base to be analyzed. Complete results are available from our supplementary materials website at http://sourcerer.ics.uci.edu/icmla2008/software_evolution.html.",,,,elinstea@ics.uci.edu; lopes@ics.uci.edu; pfbaldi@ics.uci.edu,"Wani, MA; Chen, X; Casasent, D; Kurgan, L; Hu, T; Hafeez, K","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",7th International Conference on Machine Learning and Applications,"San Diego, CA","DEC 11-13, 2008",IEEE COMPUTER SOC,,978-0-7695-3495-4,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000263205800125,2-s2.0-60649084378,United States,ics.uci.edu,Univ Calif Irvine,"Univ Calif Irvine, United States","Linstead, Erik; Lopes, Cristina; Baldi, Pierre"
"Einarsson H.P., Neukirchen H.",An approach and tool for synchronous refactoring of UML diagrams and models using model-to-model transformations,2012,ACM International Conference Proceeding Series,,,,16,23,,6,10.1145/2328876.2328879,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864646714&doi=10.1145%2f2328876.2328879&partnerID=40&md5=e163882502515d8420e6a9d1fb76ce24,"University of Iceland, Reykjavík, Iceland","Einarsson, H.P., University of Iceland, Reykjavík, Iceland; Neukirchen, H., University of Iceland, Reykjavík, Iceland","When refactorings are applied to software models that are specified using the Unified Modeling Language (UML), the actual model and the graphical presentation of the model using a diagram need to be distinguished. While UML refactoring tools exist, they typically perform transformations only on the model level and are not able to transform the corresponding diagram as well. Thus, the UML model and the diagram representation of the model may get out of sync. This paper presents an approach that can be used in UML tools to refactor UML models together with their diagrams. To this aim model-to-model transformations are applied to the underlying model as well as to the related diagram. To prove the applicability of this approach, a prototype plug-in for the Eclipse-based Papyrus UML editor has been implemented. The model transformation language Query/View/-Transformation (QVT) is used to specify the transformation of the UML model and the diagrams. © 2012 ACM.",diagrams; models; QVT; refactoring; UML,diagrams; Graphical presentations; Model to model transformation; Model transformation; Plug-ins; QVT; Refactoring tools; Refactorings; Software model; UML; UML diagrams; UML Model; UML tools; Mathematical models; Models; Unified Modeling Language,diagrams;models;QVT;refactoring;UML;Graphical presentations;Model to model transformation;Model transformation;Plug-ins;Refactoring tools;Refactorings;Software model;UML diagrams;UML Model;UML tools;Mathematical models;Unified Modeling Language,"Einarsson, H.P.; University of Iceland, Reykjavík, Iceland; email: hafsteinn.thor.einarsson@gmail.com",,,,,,,,9781450315005,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-84864646714,,Iceland,gmail.com,,,"Einarsson H.P., Neukirchen H."
"Bartusevics, A., Novickis, L., Lesovskis, A.",An Approach for Development of Reusable Function Library for Automation of Continuous Processes,2017,ICTE 2016,104,,,112,119,8,0,10.1016/j.procs.2017.01.082,,"[Bartusevics, Arturs] RTU, Fac Comp Sci & Informat Technol, Kalku St 1, LV-1658 Riga, Latvia",,"The paper introduce to challenges in automation of continuous processes in companies with many active software development projects. Usually companies have automation solutions for particular projects. When new software development projects are coming, companies would like to save up resources and efforts needed for automation solutions in these projects. In case when automation solutions, implemented in existing projects, are reusable, they could be used in new project without additional efforts for refactoring, development automation solution from scratch etc. Current paper provides an approach for development of library of reusable functions. This library allows reusing implemented automation functions in the different projects and in the different workflows. Finally, a prototype is developed for practical experiments. Based on its results, benefits, disadvantages and improvement directions of provided approach are detected. (C) 2017 The Authors. Published by Elsevier B.V.",Automation; DevOps; IT operations; Automation Scripts,,Automation;DevOps;IT operations;Automation Scripts,arturik16@inbox.lv,"Ginters, E; Kohlhammer, J","SARA BURGERHARTSTRAAT 25, PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",ICTE Conference,"Riga Tech Univ, Riga, LATVIA",2016,ELSEVIER SCIENCE BV,1877-0509,,,,English,PROCEDIA COMPUT SCI,Proceedings Paper,WoS,Computer Science,WOS:000399478800015,2-s2.0-85016065301,Latvia,inbox.lv,RTU,"RTU, Latvia","Bartusevics, Arturs; Novickis, Leonids; Lesovskis, Andrejs"
"Ishikawa, H.",An Approach for Refactoring using ESC/Java2,2009,"NEW TRENDS IN SOFTWARE METHODOLOGIES, TOOLS AND TECHNIQUES",199,,,61,72,12,0,10.3233/978-1-60750-049-0-61,,"Niigata Univ Int & Informat Studies, Nishi Ku, Niigata 9502292, Japan",,"Refactoring is a structural transformation technique for program code, which preserves their functional or behavioral aspects. Check whether the transformed program codes preserve such properties or not is a significant process. It carried out to support quality assurance. This paper introduces an alternative approach for the checking process via program verification. In this approach, ESC/Java2 tool is used for refactoring program codes in Java.",Refactoring; Program Verification; ESC/Java2; Quality Assurance,CHECKING,Refactoring;Program Verification;ESC/Java2;Quality Assurance;CHECKING,ishihiro@nuis.ac.jp,"Fujita, H; Marik, V","NIEUWE HEMWEG 6B, 1013 BG AMSTERDAM, NETHERLANDS","8th International Conference on New Trends in Software Methodology Tools, and Techniques (SoMeT)","Prague, CZECH REPUBLIC","SEP 23-25, 2009",IOS PRESS,0922-6389,978-1-60750-049-0,,,English,FRONT ARTIF INTEL AP,Proceedings Paper,WoS,Computer Science,WOS:000321117900004,,Japan,nuis.ac.jp,Nishi Ku,"Nishi Ku, Japan","Ishikawa, Hiroshi"
Ishikawa H.,An approach for refactoring using ESC/Java2: - A simple case study,2009,"Proceedings of 8th International Conference on New Trends in Software Methodologies, Tools and Techniques, SoMeT_09",,,,,,12,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84861690812&partnerID=40&md5=a27c362629ff43e7d0a5979570070818,"Niigata University of International and Information Studies, 3-1-1, Mizukino, Nishi-ku, Niigata 950-2292, Japan","Ishikawa, H., Niigata University of International and Information Studies, 3-1-1, Mizukino, Nishi-ku, Niigata 950-2292, Japan","Refactoring is a structural transformation technique for program code, which preserves their functional or behavioral aspects. Check whether the transformed program codes preserve such properties or not is a significant process. It carried out to support quality assurance. This paper introduces an alternative approach for the checking process via program verification. In this approach, ESC/Java2 tool is used for refactoring program codes in Java. © 2009 The authors and IOS Press.",ESC/java2; Program verification; Quality assurance; Refactoring,Alternative approach; ESC/java2; Program code; Program Verification; Refactorings; Structural transformation; Java programming language; Quality assurance; Computer software,ESC/java2;Program verification;Quality assurance;Refactoring;Alternative approach;Program code;Refactorings;Structural transformation;Java programming language;Computer software,"Ishikawa, H.; Niigata University of International and Information Studies, 3-1-1, Mizukino, Nishi-ku, Niigata 950-2292, Japan; email: ishihiro@nuis.ac.jp",,,,,,,,9781607500490,,,English,"Proc. Int. Conf. New Trends Softw. Methodol., Tools Tech., SoMeT",Conference Paper,Scopus,,2-s2.0-84861690812,2-s2.0-72949115231,Japan,nuis.ac.jp,,,Ishikawa H.
"Aversano, L., Canfora, G., De Ruvo, G., Tortorella, M.",An Approach for Restructuring Text Content,2013,PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013),,,,1225,1228,4,1,,,"[Aversano, Lerina; Canfora, Gerardo; De Ruvo, Giuseppe; Tortorella, Maria] Univ Sannio, Dept Engn, Benevento, Italy",,"Software engineers have successfully used Natural Language Processing for refactoring source code. Conversely, in this paper we investigate the possibility to apply software refactoring techniques to textual content. As a procedural program is composed of functions calling each other, a document can be modeled as content fragments connected each other through links. Inspired by software engineering refactoring strategies, we propose an approach for refactoring wiki content. The approach has been applied to the EMF category of Eclipsepedia with encouraging results.",Refactoring; Reverse Engineering; Reengineering; Wiki; Concept Location; Documentation,REQUIREMENTS,Refactoring;Reverse Engineering;Reengineering;Wiki;Concept Location;Documentation;REQUIREMENTS,aversano@unisannio.it; canfora@unisannio.it; gderuvo@unisannio.it; tortorella@unisannio.it,"Notkin, D; Cheng, BHC; Pohl, K","345 E 47TH ST, NEW YORK, NY 10017 USA",35th International Conference on Software Engineering (ICSE),"San Francisco, CA","MAY 18-26, 2013",IEEE,,978-1-4673-3076-3,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000333965800138,2-s2.0-84886417339,Italy,unisannio.it,Univ Sannio,"Univ Sannio, Italy","Aversano, Lerina; Canfora, Gerardo; De Ruvo, Giuseppe; Tortorella, Maria"
"Carvalho L.P.S., Novais R.L., Salvador L.N., Neto M.G.M.",An approach for semantically-enriched recommendation of refactorings based on the incidence of code smells,2018,Lecture Notes in Business Information Processing,321,,,313,335,,0,10.1007/978-3-319-93375-7_15,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85048976185&doi=10.1007%2f978-3-319-93375-7_15&partnerID=40&md5=8775f3cada76033175aa246bfd5ef045,"Federal Institute of Bahia, 3150 - Zabele, Vitoria da Conquista, Bahia, Brazil; Federal Institute of Bahia, 39 - Canela, Av. Araújo Pinho, Salvador, Bahia, Brazil; Federal University of Bahia, Av. Ademar de Barros, s/n, Ondina, Salvador, Bahia, Brazil","Carvalho, L.P.S., Federal Institute of Bahia, 3150 - Zabele, Vitoria da Conquista, Bahia, Brazil; Novais, R.L., Federal Institute of Bahia, 39 - Canela, Av. Araújo Pinho, Salvador, Bahia, Brazil; Salvador, L.N., Federal University of Bahia, Av. Ademar de Barros, s/n, Ondina, Salvador, Bahia, Brazil; Neto, M.G.M., Federal University of Bahia, Av. Ademar de Barros, s/n, Ondina, Salvador, Bahia, Brazil","Code smells are symptoms of bad decisions on the design and development of software. The occurrence of code smells in software can lead to costly consequences. Refactorings are considered adequate resources when it comes to reducing or removing the undesirable effects of smells in software. Ontologies and semantics can play a substantial role in reducing the interpretation burden of software engineers as they have to decide about adequate refactorings to mitigate the impact of smells. However, related work has given little attention to associating the recommendation of refactorings with the use of ontologies and semantics. Developers can benefit from the combination of code smells detection with a semantically-oriented approach for recommendation of refactorings. To make this possible, we expand the application of our previous ontology, ONTOlogy for Code smEll ANalysis (ONTOCEAN), to combine it with a new one, Ontology for SOftware REfactoring (OSORE). We also introduce a new tool, our REfactoring REcommender SYStem (RESYS) which is capable of binding our two ontologies. As a result, refactorings are automatically chosen and semantically linked to their respective code smells. We also conducted a preliminary evaluation of our approach in a real usage scenario with four open-source software projects. © Springer International Publishing AG, part of Springer Nature 2018.",Code smells; Ontology; Recommendation; Refactoring; Semantic,Application programs; Codes (symbols); Information systems; Information use; Odors; Ontology; Open source software; Semantics; Code smell; Design and Development; Open source software projects; Recommendation; Refactorings; Software refactoring; Undesirable effects; Usage scenarios; Open systems,Code smells;Ontology;Recommendation;Refactoring;Semantic;Application programs;Codes (symbols);Information systems;Information use;Odors;Open source software;Semantics;Code smell;Design and Development;Open source software projects;Refactorings;Software refactoring;Undesirable effects;Usage scenarios;Open systems,"Carvalho, L.P.S.; Federal Institute of Bahia, 3150 - Zabele, Brazil; email: luispscarvalho@gmail.com",Smialek M.Hammoudi S.Camp O.Filipe J.,,,,,Springer Verlag,18651348,9783319933740,,,English,Lect. Notes Bus. Inf. Process.,Conference Paper,Scopus,,2-s2.0-85048976185,,Brazil,gmail.com,,,"Carvalho L.P.S., Novais R.L., Salvador L.N., Neto M.G.M."
"Zhong L.H., Xu L., Ye M.S., Zheng Y., Xie B.",An approach for software architecture refactoring based on clustering of extended component dependency graph,2009,"Proceedings - 2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009",,, 5362854,,,,0,10.1109/CISE.2009.5362854,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949700560&doi=10.1109%2fCISE.2009.5362854&partnerID=40&md5=7adc7879dea903a9d4b6ad1babc5c55e,"School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; Nanchang Hangkong University, NanChang, Jiang Xi, 330063, China; School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China","Zhong, L.-H., School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; Xu, L., Nanchang Hangkong University, NanChang, Jiang Xi, 330063, China; Ye, M.-S., School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; Zheng, Y., School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; Xie, B., School of Electronics Engineering and Computer Science, Peking University, Beijing 100871, China","For improving the evolvability of software architecture, the paper proposes a software architecture refactoring strategy based on extended clustering of component dependency relation, which consists of logical relation and evolution relation among components. By using the graph clustering algorithm, the software architecture can be restructured according to the software quality of ""high cohesion and low coupling"" under the control of our refactoring algorithm. Moreover, an example is shown for explaining its usability.",Evolution information; Software architecture; Software evolution; Software refactoring,Dependency graphs; Dependency relation; Evolvability; Graph clustering; Logical relations; Low coupling; Refactorings; Software Evolution; Software Quality; Software refactoring; Architecture; Artificial intelligence; Clustering algorithms; Computer software selection and evaluation; Software architecture,Evolution information;Software architecture;Software evolution;Software refactoring;Dependency graphs;Dependency relation;Evolvability;Graph clustering;Logical relations;Low coupling;Refactorings;Software Quality;Architecture;Artificial intelligence;Clustering algorithms;Computer software selection and evaluation,"Zhong, L.-H.; School of Computer Information and Engineering, JiangXi Normal University, Jiangxi 330022, China; email: shiningto@yahoo.com.cn",,,,,,,,9781424445073,,,English,"Proc. - Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,Scopus,,2-s2.0-77949700560,,China,yahoo.com.cn,,,"Zhong L.-H., Xu L., Ye M.-S., Zheng Y., Xie B."
"Lerthathairat P., Prompoon N.",An approach for source code classification to enhance maintainability,2011,"Proceedings of the 2011 8th International Joint Conference on Computer Science and Software Engineering, JCSSE 2011",,, 5930141,319,324,,7,10.1109/JCSSE.2011.5930141,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960424372&doi=10.1109%2fJCSSE.2011.5930141&partnerID=40&md5=71808de5e5d7f053618745576f022d8a,"Engineering Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Thailand","Lerthathairat, P., Engineering Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Thailand; Prompoon, N., Engineering Department of Computer Engineering, Faculty of Engineering, Chulalongkorn University, Thailand","The importance of software development is a design and programming to create a code quality, especially maintainability fatcor. An approach for source code classification to enhance maintainability is a method to clssify and improve code. This approach can increase High cohesion and Low coupling that effect to the internal and the external of software. It can reduce degraded integrity. First of all, we classify source code with software metrics and fuzzy logic and then improve bad smell, ambiguous code with refactoring to be a clean code. The last step, we evaluate the quality of clean code with maintainability measurement. © 2011 IEEE.",Clean Code; Code Quality Improvement; Fuzzy Logic; Refactoring; Software Metrics,Clean Code; Code quality; Low coupling; Refactorings; Software Metrics; Source codes; Computer programming; Fuzzy logic; Fuzzy systems; Maintainability; Software design; Computer software,Clean Code;Code Quality Improvement;Fuzzy Logic;Refactoring;Software Metrics;Code quality;Low coupling;Refactorings;Source codes;Computer programming;Fuzzy systems;Maintainability;Software design;Computer software,"Lerthathairat, P.; Engineering Department of Computer Engineering, Faculty of Engineering, Chulalongkorn UniversityThailand; email: pornchai.lerthathairat@thomsonreuters.com",,,,,,,,9781457706875,,,English,"Proc. Int. Jt. Conf. Comput. Sci. Softw. Eng., JCSSE",Conference Paper,Scopus,,2-s2.0-79960424372,,Thailand,thomsonreuters.com,,,"Lerthathairat P., Prompoon N."
"Lerthathairat, P., Prompoon, N.",An Approach for Source Code Classification Using Software Metrics and Fuzzy Logic to Improve Code Quality with Refactoring Techniques,2011,"SOFTWARE ENGINEERING AND COMPUTER SYSTEMS, PT 3",181,,,478,492,15,2,,,"[Lerthathairat, Pornchai; Prompoon, Nakornthip] Chulalongkorn Univ, Dept Comp Engn, Ctr Excellence Software Engn, Software Engn Lab,Fac Engn, Bangkok 10330, Thailand",,"The problem of developing software quality is developer's experience which has different style and does not care about coding with principle that causes error or even bad smell. To reduce the risk of causing bad smell, the developer should concern with a good design principle and coding well. In addition, knowing the qualification and the characteristic of code is also important to promptly support verifying, recovering bad smell and improving them to be a good code. This research presents an approach for source code classification using software metrics and fuzzy logic to improve code quality with refactoring techniques. Our approach composed of 3 main sections; Source code definition with metrics and evaluation to classify source code type, Source code classification with fuzzy logic and Source code improvement with refactoring. The result of our approach is able to classify source code in type correctly and improve had smell, ambiguous code to be a clean code.",Code Quality Improvement; Clean Code; Fuzzy Logic; Refactoring; Software Metrics,,Code Quality Improvement;Clean Code;Fuzzy Logic;Refactoring;Software Metrics,pornchai.lerthathairat@thomsonreuters.com; Nakornthip.S@chula.ac.th,"Zain, JM; Mohd, WMB; ElQawasmeh, E","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",2nd International Conference on Software Engineering and Computing Systems (ICSECS 2011),"Univ Malaysia Pahang, Kuantan, MALAYSIA","JUN 27-29, 2011",SPRINGER-VERLAG BERLIN,1865-0929,978-3-642-22202-3,,,English,COMM COM INF SC,Proceedings Paper,WoS,Computer Science,WOS:000303027200042,2-s2.0-79960363901,Thailand,thomsonreuters.com,Chulalongkorn Univ,"Chulalongkorn Univ, Thailand","Lerthathairat, Pornchai; Prompoon, Nakornthip"
"Akash P.S., Sadiq A.Z., Kabir A.",An approach of extracting God class exploiting both structural and semantic similarity,2019,ENASE 2019 - Proceedings of the 14th International Conference on Evaluation of Novel Approaches to Software Engineering,,,,427,433,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067448559&partnerID=40&md5=a68fade8de45bf909124317660072e35,"Institute of Information Technology, University of Dhaka, Bangladesh","Akash, P.S., Institute of Information Technology, University of Dhaka, Bangladesh; Sadiq, A.Z., Institute of Information Technology, University of Dhaka, Bangladesh; Kabir, A., Institute of Information Technology, University of Dhaka, Bangladesh","Code smell is a sign of design and development flaws in a software system which reduces the reusability and maintainability of the system. Refactoring is a continuous practice of eliminating code smells from the source code. A God Class is one of the most common code smells where too many responsibilities are defined in a single class. God Classes reduce the quality of a system by increasing coupling and decreasing cohesion. In this paper, we propose an approach for extracting a God Class into new classes by increasing class cohesion. For this, both structural and semantic relationship between methods in a class are analyzed, and strongly related methods are clustered and suggested to be in the same class. We assessed the proposed approach on fifteen real God Classes from two well-known open source systems and it is shown that the cohesion among the classes is increased after refactoring. A comparative result of our approach with a similar existing approach is presented and it is found that our approach provides better results for almost all the experimented God Classes. Copyright © 2019 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved",Code Smell; Cohesion; Coupling; God Class; LDA; Refactoring,Codes (symbols); Computer software reusability; Couplings; Odors; Open source software; Reusability; Semantics; Code smell; Cohesion; Design and Development; God Class; Open source system; Refactorings; Semantic relationships; Semantic similarity; Open systems,Code Smell;Cohesion;Coupling;God Class;LDA;Refactoring;Codes (symbols);Computer software reusability;Couplings;Odors;Open source software;Reusability;Semantics;Design and Development;Open source system;Refactorings;Semantic relationships;Semantic similarity;Open systems,,Spanoudakis G.Damiani E.Maciaszek L.Maciaszek L.,,,,,SciTePress,,9789897583759,,,English,ENASE - Proc. Int. Conf. Evaluation Novel Approaches Softw. Eng.,Conference Paper,Scopus,,2-s2.0-85067448559,,Bangladesh,No email,,,"Akash P.S., Sadiq A.Z., Kabir A."
"Dao, T.H., Le, H.A., Truong, N.T.",An Approach to Analyzing Execution Preservation in Java Program Refactoring,2017,CONTEXT-AWARE SYSTEMS AND APPLICATIONS (ICCASA 2016),193,,,101,110,10,0,10.1007/978-3-319-56357-2_11,,"[Thi-Huong Dao; Ninh Thuan Truong] Univ Engn & Technol, VNU, Hanoi, Vietnam; [Hong Anh Le] Hanoi Univ Min & Geol, Hanoi, Vietnam",,"Code refactoring is a technique that improves the existing code in order to make software easier to understand and more extensible without changing the external behavior. Software design patterns, programming language independent reusable solutions to comment problems, are well-known in Java communities. On one hand, the refactoring using design patterns brings many benefits such as cost saving, flexibilities, and maintainability. On the other hand, it potentially causes bugs or changes execution behavior of Java programs. This paper proposes a new approach to checking behavior preservation properties of Java programs after applying design patterns. We present new definitions to compute pre/post conditions of program behavior. In the next step, the paper makes use of Java Modeling Language (JML) to represent and check if the refactored program neglects to preserve the external behavior. A motivating example of Adaptive Road Traffic Control (ARTC) is given to illustrate the approach in detail.",Refactoring; Design patterns; Consistency; ARTC,,Refactoring;Design patterns;Consistency;ARTC,huongdt.di12@vnu.edu.vn; lehonganh@humg.edu.vn; thuantn@vnu.edu.vn,"Vinh, PC; Anh, LT; Loan, NTT; Siricharoen, WV","GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND",5th International Conference on Context-Aware Systems and Applications (ICCASA),"Thu Dau Mot, VIETNAM","NOV 24-25, 2016",SPRINGER INTERNATIONAL PUBLISHING AG,1867-8211,978-3-319-56357-2; 978-3-319-56356-5,,,English,L N INST COMP SCI SO,Proceedings Paper,WoS,Computer Science,WOS:000426423000011,2-s2.0-85018664603,Vietnam,vnu.edu.vn,Univ Engn & Technol;Hanoi Univ Min & Geol,"Univ Engn & Technol, Vietnam;Hanoi Univ Min & Geol, Vietnam",Thi-Huong Dao; Hong Anh Le; Ninh Thuan Truong
"Hecht, G.",An Approach to Detect Android Antipatterns,2015,"2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2",,,,766,768,3,2,10.1109/ICSE.2015.243,,"[Hecht, Geoffrey] Univ Lille 1, F-59655 Villeneuve Dascq, France; [Hecht, Geoffrey] Inria, Rocquencourt, France; [Hecht, Geoffrey] Univ Quebec Montreal, Montreal, PQ, Canada",,"Mobile applications are becoming complex software systems that must be developed quickly and evolve regularly to fit new user requirements and execution contexts. However, addressing these constraints may result in poor design choices, known as antipatterns, which may degrade software quality and performance. Thus, the automatic detection of antipatterns is an important activity that eases the future maintenance and evolution tasks. Moreover, it helps developers to refactor their applications and thus, to improve their quality. While antipatterns are well-known in object-oriented applications, their study in mobile applications is still in their infancy. In this paper, we presents a tooled approach, called PAPRIKA, to analyze Android applications and to detect object-oriented and Android-specific antipatterns from binaries of applications.",,,,geoffrey.hecht@inria.fr,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE/ACM 2nd International Workshop on Software Architecture and Metrics (SAM),"Florence, ITALY","MAY 16-16, 2015",IEEE,,978-1-4799-1934-5,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380572400122,,France;Canada,inria.fr,Univ Lille 1;Inria;Univ Quebec Montreal,"Univ Lille 1, France;Inria, France;Univ Quebec Montreal, Canada","Hecht, Geoffrey"
"Kim, J.I., Lee, E.J.",An Approach to detect Similar Script Functions in Web Applications based on Calling Information,2013,"INFORMATION TECHNOLOGY APPLICATIONS IN INDUSTRY, PTS 1-4",263-266,,,1593,1599,7,0,10.4028/www.scientific.net/AMM.263-266.1593,,"[Kim, Jung-Ii; Lee, Eun-Joo] KyungPook Natl Univ, Sch Engn & Comp Sci, Taegu, South Korea",,"Cloned code might exacerbate a system maintenance problem, so it is important to remove duplicate code to improve system performance. In web development, script code can often be duplicated as a unit of a script function. Previous research for detecting similar script functions forecasted candidates of similar script functions based on the name of the function and classified the detected candidates into four similarity levels by comparing factors contained within the script functions. There are two key issues that need to be considered to detect similar script functions when using that method. One was that a pair of similar script functions needs to have the same name to be detected. The other was that some modifications particularly such as adding or removing calling statements were not identified after detecting. Adding or removing calling statements might prevent identification for duplicate script function. In this paper, we propose a novel approach to detect similar script functions that can determine the similarity of a script function by evaluating the structural similarity of function code and the calling structure. The evaluation for detecting the structural similarity of code and the calling structure is performed based on a similarity metric, FSIM, which we have defined. We showed the usefulness of FSIM by applying it to three open source projects.",function clones; refactoring; code duplication; software metric; similarity; web application,CLONES; CODE,function clones;refactoring;code duplication;software metric;similarity;web application;CLONES;CODE,2009307043@knu.ac.kr; ejlee@knu.ac.kr,"Zhang, J; Wang, ZJ; Zhu, SR; Meng, XM","KREUZSTRASSE 10, 8635 DURNTEN-ZURICH, SWITZERLAND",International Conference on Information Technology and Management Innovation (ICITMI2012),"Guangzhou, PEOPLES R CHINA","NOV 10-11, 2012",TRANS TECH PUBLICATIONS LTD,1660-9336,978-3-03785-574-4,,,English,APPL MECH MATER,Proceedings Paper,WoS,Computer Science; Materials Science,WOS:000318818700305,,South Korea,knu.ac.kr,KyungPook Natl Univ,"KyungPook Natl Univ, South Korea","Kim, Jung-Ii; Lee, Eun-Joo"
"Shimomura T., Ikeda K., Takahashi M.",An approach to GA-driven automatic refactoring based on design patterns,2010,"Proceedings - 5th International Conference on Software Engineering Advances, ICSEA 2010",,, 5615736,213,218,,5,10.1109/ICSEA.2010.39,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78649815063&doi=10.1109%2fICSEA.2010.39&partnerID=40&md5=d77ecc6a04ecbda9aff2d3c1eb3539d0,"Dept. of Info Sci. and Intel. Syst., University of Tokushima, Tokushima, Japan; Dept. of Control and SE, Toin University of Yokohama, Yokohama, Japan","Shimomura, T., Dept. of Info Sci. and Intel. Syst., University of Tokushima, Tokushima, Japan; Ikeda, K., Dept. of Info Sci. and Intel. Syst., University of Tokushima, Tokushima, Japan; Takahashi, M., Dept. of Control and SE, Toin University of Yokohama, Yokohama, Japan","Refactoring is a process of applying behavior-preserving transformations to improve the design, readability, structure, performance, abstraction, and maintainability of existing code. This paper presents an approach to genetic algorithm-driven refactoring for Java programs to automatically judge the qualities of programs based on design patterns. If a program is judged to be bad, refactoring will be further recommended so that the program can be transformed using an appropriate design pattern. © 2010 IEEE.",Design patterns; Discriminant analysis; Genetic algorithm; Refactoring; Syntax analysis,Automatic refactoring; Design Patterns; Java program; Refactorings; Syntax analysis; Computer software; Design; Discriminant analysis; Java programming language; Maintainability; Syntactics; Genetic algorithms,Design patterns;Discriminant analysis;Genetic algorithm;Refactoring;Syntax analysis;Automatic refactoring;Java program;Refactorings;Computer software;Design;Java programming language;Maintainability;Syntactics;Genetic algorithms,"Shimomura, T.; Dept. of Info Sci. and Intel. Syst., University of Tokushima, Tokushima, Japan; email: simomura@is.tokushima-u.ac.jp",,,,,,,,9780769541440,,,English,"Proc. - Int. Conf. Softw. Eng. Adv., ICSEA",Conference Paper,Scopus,,2-s2.0-78649815063,,Japan,is.tokushima-u.ac.jp,,,"Shimomura T., Ikeda K., Takahashi M."
"Massoni T., Gheyi R., Borba P.",An approach to invariant-based program refactoring,2006,Electronic Communications of the EASST,3,,,,,11,4,10.14279/tuj.eceasst.3.25.15,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85040309432&doi=10.14279%2ftuj.eceasst.3.25.15&partnerID=40&md5=b45e5ee42e575e06ff9bd62b3338a192,"Polytechnic School, University of Pernambuco, Recife, Brazil; Federal University of Pernambuco, Recife, Brazil","Massoni, T., Polytechnic School, University of Pernambuco, Recife, Brazil; Gheyi, R., Federal University of Pernambuco, Recife, Brazil; Borba, P., Federal University of Pernambuco, Recife, Brazil","Refactoring tools include checking of an object-oriented program for the fulfillment of preconditions, for ensuring correctness. However, program invariants - semantic information about classes and fields assumed valid during program execution - are not considered by this precondition checking. As a result, applicability of automated refactorings is constrained in these cases, as refactorings that would be applicable considering the invariants get rejected, usually requiring manual changes. In this paper, we describe initial work on the use of program invariants (declared as code annotations) to increase applicability of automated refactoring. We propose an approach that uses primitive program transformations that employ the invariant to make the program syntactically amenable to the desired refactoring, before applying the refactoring itself. © Software Evolution through Transformations 2006.",Program invariants; Refactoring,,Program invariants;Refactoring,,,,,,,Universitatsbibliothek TU Berlin,18632122,,,,English,Electron. Commun. EASST,Article,Scopus,,2-s2.0-85040309432,,Brazil,No email,,,"Massoni T., Gheyi R., Borba P."
"Zhao X., Osterweil L.J.",An approach to modeling and supporting the rework process in refactoring,2012,"2012 International Conference on Software and System Process, ICSSP 2012 - Proceedings",,, 6225953,110,119,,7,10.1109/ICSSP.2012.6225953,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864353867&doi=10.1109%2fICSSP.2012.6225953&partnerID=40&md5=67d99f4063fedc9bda40a1ff27fb2b2b,"Department of Computer Science, University of Massachusetts Amherst, Amherst, MA 01003, United States","Zhao, X., Department of Computer Science, University of Massachusetts Amherst, Amherst, MA 01003, United States; Osterweil, L.J., Department of Computer Science, University of Massachusetts Amherst, Amherst, MA 01003, United States","This paper presents the definition of a process for performing rework, and a tool that executes the process in order to support humans seeking help in being sure that they are carrying out rework completely and correctly. The process definition treats rework as the reinstantiation of previously-performed activities in new contexts, which requires the careful specification and management of the values of the artifacts that comprise key process execution history and contextual information. The rework tool exploits access to this information to provide human reworkers with guidance about the rework tasks to be done and with context and history information expected to be useful in guiding superior rework decisions. The paper presents a detailed example of the use of the process and tool in supporting a particular kind of rework, namely the refactoring of the design of an Object-Oriented program. © 2012 IEEE.",refactoring; rework; software process,Contextual information; Key process; Object-oriented program; Process definition; Refactorings; rework; Rework process; Software process,refactoring;rework;software process;Contextual information;Key process;Object-oriented program;Process definition;Refactorings;Rework process,"Zhao, X.; Department of Computer Science, University of Massachusetts Amherst, Amherst, MA 01003, United States; email: xiang@cs.umass.edu",,,,,,,,9781467323529,,,English,"Int. Conf. Softw. Syst. Process, ICSSP - Proc.",Conference Paper,Scopus,,2-s2.0-84864353867,,United States,cs.umass.edu,,,"Zhao X., Osterweil L.J."
"Basicevic, I., Jovanovic, S., Drapsin, B., Popovic, M., Vrtunski, V.",An Approach to Parallelization of Legacy Software,2009,2009 1ST IEEE EASTERN EUROPEAN CONFERENCE ON THE ENGINEERING OF COMPUTER BASED SYSTEMS,,,,42,+,2,6,10.1109/ECBS-EERC.2009.8,,"[Basicevic, Ilija; Jovanovic, Sabina; Drapsin, Branislav; Popovic, Miroslav] Univ Novi Sad, Dept Comp & Automat, Trg D Obradovica 6, Novi Sad 21000, Serbia; [Vrtunski, Vladislav] DMS Grupa Ltd, Novi Sad 21000, Serbia",,"The issue of parallelization of large and complex software systems has been widely researched, but no definite solution has been published yet. In the paper we introduce the concept of parallelization based on the identification of mutually independent data sets and refactoring legacy software for the purpose of adjusting it to execution as a task tree. Then we present implementation of the concept on existing distribution management system. Finally, we present the results of the performance evaluation based on a series of experiments made on the dual-core symmetric multiprocessor.",,,,basicevic@krt.neobee.net; vrtunski@neobee.net,"Popovic, M","345 E 47TH ST, NEW YORK, NY 10017 USA",1st IEEE Eastern European Conference on the Engineering of Computer Based Systems,"Univ Novi Sad, Fac Tech Sci, Dept Comp Engn & Comp Commun, Novi Sad, SERBIA","SEP 07-08, 2009",IEEE,,978-1-4244-4677-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000274849200006,2-s2.0-74349115503,Serbia,krt.neobee.net,Univ Novi Sad;DMS Grupa Ltd,"Univ Novi Sad, Serbia;DMS Grupa Ltd, Serbia","Basicevic, Ilija; Jovanovic, Sabina; Drapsin, Branislav; Popovic, Miroslav; Vrtunski, Vladislav"
"Mohan, M., Greer, D.",An Approach to Prioritize Classes in a Multi-objective Software Maintenance Framework,2018,PROCEEDINGS OF THE 13TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING,,,,215,222,8,0,10.5220/0006631902150222,,"[Mohan, Michael; Greer, Des] Queens Univ Belfast, Dept Elect Elect Engn & Comp Sci, Belfast, Antrim, North Ireland",,"Genetic algorithms have become popular in automating software refactoring and an increasing level of attention is being given to the use of multi-objective approaches. This paper investigated the use of a multi-objective genetic algorithm to automate software refactoring using a purpose built tool, MultiRefactor. The tool used a metric function to measure quality in a software system and tested a second objective to measure the importance of the classes being refactored. This priority objective takes as input a set of classes to favor and, optionally, a set of classes to disfavor as well. The multi-objective setup refactors the input program to improve its quality using the quality objective, while also focusing on the classes specified by the user. An experiment was constructed to measure the multi-objective approach against the alternative mono-objective approach that does not use an objective to measure priority of classes. The two approaches were tested on six different open source Java programs. The multi-objective approach was found to give significantly better priority scores across all inputs in a similar time, while also generating improvements in the quality scores.",Search based Software Engineering; Maintenance; Automated Refactoring; Refactoring Tools; Software Quality; Multi-objective Optimization; Genetic Algorithms,,Search based Software Engineering;Maintenance;Automated Refactoring;Refactoring Tools;Software Quality;Multi-objective Optimization;Genetic Algorithms,,"Damiani, E; Spanoudakis, G; Maciaszek, L","AV D MANUELL, 27A 2 ESQ, SETUBAL, 2910-595, PORTUGAL",13th International Conference on Evaluation of Novel Approaches to Software Engineering,"Funchal, PORTUGAL","MAR 23-24, 2018",SCITEPRESS,,978-989-758-300-1,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000450506700018,2-s2.0-85051995422,North Ireland,No email,Queens Univ Belfast,"Queens Univ Belfast, North Ireland","Mohan, Michael; Greer, Des"
"Vidal, S.A., Marcos, C., Diaz-Pace, J.A.",An approach to prioritize code smells for refactoring,2016,AUTOMATED SOFTWARE ENGINEERING,23,3,,501,532,32,30,10.1007/s10515-014-0175-x,,"[Vidal, Santiago A.; Marcos, Claudia; Andres Diaz-Pace, J.] UNICEN, ISISTAN, Tandil, Argentina; [Vidal, Santiago A.; Andres Diaz-Pace, J.] Consejo Nacl Invest Cient & Tecn, Tandil, Argentina; [Marcos, Claudia] CIC, Buenos Aires, DF, Argentina",,"Code smells are a popular mechanism to find structural design problems in software systems. Consequently, several tools have emerged to support the detection of code smells. However, the number of smells returned by current tools usually exceeds the amount of problems that the developer can deal with, particularly when the effort available for performing refactorings is limited. Moreover, not all the code smells are equally relevant to the goals of the system or its health. This article presents a semi-automated approach that helps developers focus on the most critical problems of the system. We have developed a tool that suggests a ranking of code smells, based on a combination of three criteria, namely: past component modifications, important modifiability scenarios for the system, and relevance of the kind of smell. These criteria are complementary and enable our approach to assess the smells from different perspectives. Our approach has been evaluated in two case-studies, and the results show that the suggested code smells are useful to developers.",Code smells; Refactoring; Software evolution; Design problems,IDENTIFICATION; OPPORTUNITIES; EVOLUTION,Code smells;Refactoring;Software evolution;Design problems;IDENTIFICATION;OPPORTUNITIES;EVOLUTION,svidal@exa.unicen.edu.ar; cmarcos@exa.unicen.edu.ar; adiaz@exa.unicen.edu.ar,,"233 SPRING ST, NEW YORK, NY 10013 USA",,,,SPRINGER,0928-8910,,,,English,AUTOMAT SOFTW ENG,Article,WoS,Computer Science,WOS:000376660500007,2-s2.0-84917706742,Argentina,exa.unicen.edu.ar,UNICEN;Consejo Nacl Invest Cient & Tecn;CIC,"UNICEN, Argentina;Consejo Nacl Invest Cient & Tecn, Argentina;CIC, Argentina","Vidal, Santiago A.; Marcos, Claudia; Andres Diaz-Pace, J."
"Neukirchen H., Zeiss B., Grabowski J.",An approach to quality engineering of TTCN-3 test specifications,2008,International Journal on Software Tools for Technology Transfer,10,4,,309,326,,11,10.1007/s10009-008-0075-0,https://www.scopus.com/inward/record.uri?eid=2-s2.0-48349147433&doi=10.1007%2fs10009-008-0075-0&partnerID=40&md5=b5094aeedc9ce09e2bab56e8b294a213,"Software Engineering for Distributed Systems Group, Institute for Computer Science, University of Göttingen, Lotzestr. 16-18, Göttingen 37083, Germany","Neukirchen, H., Software Engineering for Distributed Systems Group, Institute for Computer Science, University of Göttingen, Lotzestr. 16-18, Göttingen 37083, Germany; Zeiss, B., Software Engineering for Distributed Systems Group, Institute for Computer Science, University of Göttingen, Lotzestr. 16-18, Göttingen 37083, Germany; Grabowski, J., Software Engineering for Distributed Systems Group, Institute for Computer Science, University of Göttingen, Lotzestr. 16-18, Göttingen 37083, Germany","Experience with the development and maintenance of large test suites specified using the Testing and Test Control Notation (TTCN-3) has shown that it is difficult to construct tests that are concise with respect to quality aspects such as maintainability or usability. The ISO/IEC standard 9126 defines a general software quality model that substantiates the term ""quality"" with characteristics and subcharacteristics. The domain of test specifications, however, requires an adaption of this general model. To apply it to specific languages such as TTCN-3, it needs to be instantiated. In this paper, we present an instantiation of this model as well as an approach to assess and improve test specifications. The assessment is based on metrics and the identification of code smells. The quality improvement is based on refactoring. Example measurements using our TTCN-3 tool TRex demonstrate how this procedure is applied in practise. © Springer-Verlag 2008.",Code smells; Metrics; Quality model; Refactoring; Test specification; TTCN-3,Computer software selection and evaluation; Maintainability; Specifications; Standards; Evolution (CO); General model; ISO/IEC; Metrics (CO); Quality aspects; Quality engineering; Quality improvement (QI); Refactoring; Software-quality; Special sections; Specific languages; Test Automation; Test specification (TS); Test suites; Testing and Test Control Notation (TTCN); Testing,Code smells;Metrics;Quality model;Refactoring;Test specification;TTCN-3;Computer software selection and evaluation;Maintainability;Specifications;Standards;Evolution (CO);General model;ISO/IEC;Metrics (CO);Quality aspects;Quality engineering;Quality improvement (QI);Software-quality;Special sections;Specific languages;Test Automation;Test specification (TS);Test suites;Testing and Test Control Notation (TTCN);Testing,"Neukirchen, H.; Software Engineering for Distributed Systems Group, Institute for Computer Science, University of Göttingen, Lotzestr. 16-18, Göttingen 37083, Germany; email: neukirchen@cs.uni-goettingen.de",,,,,,,14332779,,,,English,Int. J. Softw. Tools Technol. Trans.,Article,Scopus,,2-s2.0-48349147433,,Germany,cs.uni-goettingen.de,,,"Neukirchen H., Zeiss B., Grabowski J."
"Garg, R., Tekchandani, R.",An Approach to Rank Code Clones for Efficient Clone Management,2014,"2014 INTERNATIONAL CONFERENCE ON ADVANCES IN ELECTRONICS, COMPUTERS AND COMMUNICATIONS (ICAECC)",,,,,,5,0,,,"[Garg, Ridhi; Tekchandani, Rajkumar] Thapar Univ, Comp Sci Engn Dept, Patiala, Punjab, India",,"Code clone detection has been widely accepted and is being carried out at the industrial level using a number of tools. But along with clone detection, clone management also becomes an important area of research. Clone Management includes refactoring or even removal of clones and works on the resultant information obtained from the clone detection tools. This paper discusses an approach to rank the clone detection results in order to manage them easily. The idea behind the approach is to find out the maintenance overhead of the detected clones to define their criticality, which is calculated using factors like: size of code clone, MCC complexity and frequency of clone repetition. Based on the criticality of the clones, clones are later prioritized, so that the most critical ones can be refactored first and the least critical ones can be refactored later or can even be ignored.",clone detection; prioritization; refactoring; maintenance overhead,,clone detection;prioritization;refactoring;maintenance overhead,ridhi08.garg@gmail.com; rtekchandani@thapar.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",Int Conference Adv Elect Comp Commun ICAECC,"Bangalore, INDIA","OCT 10-11, 2014",IEEE,,978-1-4799-5496-4,,,English,,Proceedings Paper,WoS,Engineering,WOS:000380449500007,,India,gmail.com,Thapar Univ,"Thapar Univ, India","Garg, Ridhi; Tekchandani, Rajkumar"
"Moeini A., Rafe V., Mahdian F.",An approach to refactoring legacy systems,2010,"ICACTE 2010 - 2010 3rd International Conference on Advanced Computer Theory and Engineering, Proceedings",5,, 5579183,V55,V58,,4,10.1109/ICACTE.2010.5579183,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78149317648&doi=10.1109%2fICACTE.2010.5579183&partnerID=40&md5=6d695e3525a6628eb478bbe65c475dd1,"Computer Engineering Department, Islamic Azad University, Toyserkan Branch, Iran; Computer Engineering Department, Arak University, Iran","Moeini, A., Computer Engineering Department, Islamic Azad University, Toyserkan Branch, Iran; Rafe, V., Computer Engineering Department, Arak University, Iran; Mahdian, F., Computer Engineering Department, Islamic Azad University, Toyserkan Branch, Iran","As the requirements of the systems change, it is desirable to take these changes into account. To do so, the software must be extended to consider the changes. But the problem is that the modifications on software artifacts may cause conflicts and inconsistencies in the structure of the software, which are difficult to find and time-consuming to correct. Hence, it is necessary to refactor software during its lifetime. In this paper, we present a formal approach to refactor the structure of the object-oriented models -specified through graph transformation systems- while preserving their semantics. © 2010 IEEE.",Graph transformation; Object-oriented models; Refactorin,,Graph transformation;Object-oriented models;Refactorin,"Moeini, A.; Computer Engineering Department, Islamic Azad University, Toyserkan BranchIran; email: Azam_moini2007@yahoo.com",,,,,,,,9781424465408,,,English,"ICACTE - Int. Conf. Adv. Comput. Theory Eng., Proc.",Conference Paper,Scopus,,2-s2.0-78149317648,,Iran,yahoo.com,,,"Moeini A., Rafe V., Mahdian F."
"Dobrzanski L., Kuzniarz L.",An approach to refactoring of executable UML models,2006,Proceedings of the ACM Symposium on Applied Computing,2,,,1273,1279,,13,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33751032648&partnerID=40&md5=93917432c8d317b7355e0fae29a4f184,"Motorola Global Software Group Poland, ul. Bobrzyńskiego 46, 30-381 Kraków, Poland; Department of Systems and Software Engineering, Blekinge Institute of Technology, Box 520, SE-372 25 Ronneby, Sweden","Dobrzański, L., Motorola Global Software Group Poland, ul. Bobrzyńskiego 46, 30-381 Kraków, Poland; Kuźniarz, L., Department of Systems and Software Engineering, Blekinge Institute of Technology, Box 520, SE-372 25 Ronneby, Sweden","Design erosion is one of the unavoidable effects of software evolution. This destructive phenomenon occurs also in the context of executable UML models, which are primary artefacts in Agile MDA software development methodology. Model refactorings are model transformations that can be applied with the aim of counteracting design erosion of UML models. In this paper, we present a systematic approach to specification of both executable UML model refactorings as well as associated bad smells in models. The application of this method is illustrated on an exemplary refactoring and a related bad smell. Moreover, we show how this transformation and detection of the bad smell can be implemented in Telelogic TAU, a state-of-the art UML CASE tool. Copyright 2006 ACM.",Executable UML; Model refactoring,Mathematical models; Mathematical transformations; Software engineering; Executable UML models; Telelogic TAU; UML model refactorings; Computer programming languages,Executable UML;Model refactoring;Mathematical models;Mathematical transformations;Software engineering;Executable UML models;Telelogic TAU;UML model refactorings;Computer programming languages,"Dobrzański, L.; Motorola Global Software Group Poland, ul. Bobrzyńskiego 46, 30-381 Kraków, Poland; email: Lukasz.Dobrzanski@motorola.com",,,,,,,,1595931082; 9781595931085,,,English,Proc ACM Symp Appl Computing,Conference Paper,Scopus,,2-s2.0-33751032648,,Poland;Sweden,motorola.com,,,"Dobrzanski L., Kuzniarz L."
"Guggulothu, T., Moiz, S.A.",An Approach to Suggest Code Smell Order for Refactoring,2019,EMERGING TECHNOLOGIES IN COMPUTER ENGINEERING: MICROSERVICES IN BIG DATA ANALYTICS,985,,,250,260,11,0,10.1007/978-981-13-8300-7_21,,"[Guggulothu, Thirupathi; Moiz, Salman Abdul] Univ Hyderabad, Hyderabad, Telangana, India",,"Code smell is an indicator of issues in source code qualities that may hinder maintenance, and evolution. Source code metrics are used to measure the quality of the code. In the literature, there are many code smells, refactoring techniques, and refactoring tools. However, a software project often contains thousands of code smells and many of them have no relation with design quality. It is a challenge for developers to decide which kind of code smell should be refactored first. We have proposed an approach that suggests a code smell order based on two aspects: (1) finding relevant metrics for each code smell dataset with the help of feature selection technique (2) analyzing the internal relation among the code smells with those relevant metrics. With this analysis, we are suggesting code smell order for developers to save their effort in the refactoring stage. The suggested order is evaluated on simple java source code.",Code smell; Refactoring; Maintenance; Design quality; Code smell order; Feature selection technique,,Code smell;Refactoring;Maintenance;Design quality;Code smell order;Feature selection technique,thirupathi.gugguloth@gmail.com; salman@uohyd.ac.in,"Somani, AK; Ramakrishna, S; Chaudhary, A; Choudhary, C; Agarwal, B","GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND",2nd International Conference on Emerging Technologies in Computer Engineering - Microservices in Big Data Analytics (ICETCE),"Swami Keshvanand Inst Technol Management & Gramothan, Jaipur, INDIA","FEB 01-02, 2019",SPRINGER INTERNATIONAL PUBLISHING AG,1865-0929,978-981-13-8300-7; 978-981-13-8299-4,,,English,COMM COM INF SC,Proceedings Paper,WoS,Computer Science,WOS:000492304300021,2-s2.0-85066074957,India,gmail.com,Univ Hyderabad,"Univ Hyderabad, India","Guggulothu, Thirupathi; Moiz, Salman Abdul"
"Tort, A., Olive, A., Sancho, M.R.",An approach to test-driven development of conceptual schemas,2011,DATA & KNOWLEDGE ENGINEERING,70,12,,1088,1111,24,6,10.1016/j.datak.2011.07.006,,"[Tort, Albert; Olive, Antoni; Sancho, Maria-Ribera] Univ Politecn Catalunya BarcelonaTech, Dept Serv & Informat Syst Engn, Barcelona 08034, Catalonia, Spain",,"Test-Driven Development (TDD) is an extreme programming development method in which a software system is developed in short iterations. In this paper we present the Test-Driven Conceptual Modeling (TDCM) method, which is an application of TDD for conceptual modeling. and we show how to develop a conceptual schema using it. In TDCM, a system's conceptual schema is incrementally obtained by performing three kinds of tasks: (1) Write a test the system should pass; (2) Change the schema to pass the test; and (3) Refactor the schema to improve its qualities. We also describe an integration approach of TDCM into a broad set of software development methodologies, including the Unified Process development methodology, the MDD-based approaches, the storytest-driven agile methods and the goal and scenario-oriented requirements engineering methods. We deal with schemas written in UML/OCL, but the TDCM method could be adapted to the development of schemas in other languages. (C) 2011 Elsevier B.V. All rights reserved.",Conceptual modeling; Testing; TDD; Requirements validation; UML/OCL,UML; REQUIREMENTS; SPECIFICATION; ENVIRONMENT; QUALITY; UML/OCL; MODELS,Conceptual modeling;Testing;TDD;Requirements validation;UML/OCL;UML;REQUIREMENTS;SPECIFICATION;ENVIRONMENT;QUALITY;MODELS,albert.tort@upc.edu; antoni.olive@upc.edu; maria.ribera.sancho@upc.edu,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,0169-023X,,,,English,DATA KNOWL ENG,Article,WoS,Computer Science,WOS:000296124100005,,Spain,upc.edu,Univ Politecn Catalunya BarcelonaTech,"Univ Politecn Catalunya BarcelonaTech, Spain","Tort, Albert; Olive, Antoni; Sancho, Maria-Ribera"
"Steinbeck, M.",An Arc-Based Approach for Visualization of Code Smells,2017,"2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER)",,,,397,401,5,2,,,"[Steinbeck, Marcel] Univ Bremen, Bremen, Germany",,"Code smells are indicators of design flaws that may have negative effects on software comprehensibility and changeability. In recent years several detection tools have been developed that are supposed to help in revealing code smells in large size software systems. However, usually a subset of the detected code smells are suitable for refactorings only. Previous studies on software clones have shown that visualization of findings may assist developers in identifying relevant refactoring opportunities by highlighting peculiarities and, thus, is useful to enhance a software's maintainability. Nevertheless, techniques to visualize code smells in general are rare, though, being an interesting field of research to bridge the gap between code smell detection and code smell refactoring. This paper presents a visualization approach that is supposed to help in assessing the dispersion and extent of arbitrary code smells by combining different existing techniques. The core of our approach consists of several Treemaps that are arranged on a circle in order to obtain a better integration of additional visualizations. Furthermore, the presented technique provides various interaction mechanisms that allow users to adjust the visualization to target elements of interest.",,,,marcel@informatik.uni-bremen.de,"Pinzger, M; Bavota, G; Marcus, A","345 E 47TH ST, NEW YORK, NY 10017 USA","24th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)","Klagenfurt, AUSTRIA","FEB 20-24, 2017",IEEE,,978-1-5090-5501-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000402557000038,2-s2.0-85018402234,Germany,informatik.uni-bremen.de,Univ Bremen,"Univ Bremen, Germany","Steinbeck, Marcel"
"Zhou C., Xu H., Zhou T., Shi L.",An aspect transformation approach with refactoring,2005,"17th International Conference on Software Engineering and Knowledge Engineering, SEKE 2005",,,,318,323,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886931613&partnerID=40&md5=a6d5d0704c9c9aabea021f150b841287,"Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China; Jiangshu Institute of Software Quality, Nanjin 210096, China; National Key Laboratory of Software Engineering, Wuhan University, Wuhan 430072, China","Zhou, C., Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China, Jiangshu Institute of Software Quality, Nanjin 210096, China; Xu, H., Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China, Jiangshu Institute of Software Quality, Nanjin 210096, China, National Key Laboratory of Software Engineering, Wuhan University, Wuhan 430072, China; Zhou, T., Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China, Jiangshu Institute of Software Quality, Nanjin 210096, China; Shi, L., Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China, Jiangshu Institute of Software Quality, Nanjin 210096, China","Aspect-oriented programming (AOP) is a revolutionary programming paradigm aims to modularize crosscutting concerns in software design and implementation phase by a special unit-aspect, and it is proposed to resolve code tangling in object-oriented programming (OOP). But the A OP languages cannot be compiled directly by current compilers, so a transformation is needed. Refactoring is the process of improving the design of existing code without altering the external behavior of the program In this paper, we first present a preprocessor based on information tables for Aspect J method-call join point, then we refactor AspectJ programs to make it weaving-friendly, at last the weaving engine transfers AspectJ into pure Java programs, which can he compiled directly bv current compilers. Our approach is based on source code, therefore it can be applied to other languages, and it can be a platform for aspect mining and AO-refactoring further.",Aspect-oriented programming; Aspectj; Program transformation; Refactoring,Aspect-J; Aspect-Oriented Programming (AOP); Cross-cutting concerns in software; External behavior; Objectoriented programming (OOP); Program transformations; Programming paradigms; Refactorings; Aspect oriented programming; Computer software; Knowledge engineering; Object oriented programming; Program compilers; Weaving; Java programming language,Aspect-oriented programming;Aspectj;Program transformation;Refactoring;Aspect-J;Aspect-Oriented Programming (AOP);Cross-cutting concerns in software;External behavior;Objectoriented programming (OOP);Program transformations;Programming paradigms;Refactorings;Aspect oriented programming;Computer software;Knowledge engineering;Object oriented programming;Program compilers;Weaving;Java programming language,"Department of Computer Science and Engineering, Southeast University, Nanjin 210096, China",,,,,,,,9781627486590,,,English,"Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,Scopus,,2-s2.0-84886931613,,China,No email,,,"Zhou C., Xu H., Zhou T., Shi L."
"MacBeth, J.S., Heinz, D., Gray, K.",An assembler driven verification methodology (ADVM),2005,"DESIGNERS' FORUM: DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION",,,,278,283,6,1,10.1109/DATE.2005.52,,"Verilab GmbH, D-85748 Munich, Germany",,"This paper presents an overview Of an assembler driven verification methodology (ADVM) that was created and implemented for a chip card project at Infineon Technologies AG [2]. The primary advantage of this methodology is that it enables rapid porting of directed tests to new targets and derivatives, with only a minimum amount of code refactoring. As a consequence, considerable verification development time and effort was saved.",,,,john.macbeth@verilab.com; dietmar.heinz@infineon.com; ken.gray@verilab.com,"Wehn, N; Lindwer, M; Heer, C","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA","Design, Automation and Test in Europe Conference and Exhibition (DATE 05)","Munich, GERMANY","MAR 07-11, 2005",IEEE COMPUTER SOC,1530-1591,0-7695-2288-2,,,English,DES AUT TEST EUROPE,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000228088700051,,Germany,verilab.com,D-85748 Munich,"D-85748 Munich, Germany","MacBeth, JS; Heinz, D; Gray, K"
"Velioglu, S., Selcuk, Y.E.",An Automated Code Smell and Anti-Pattern Detection Approach,2017,"2017 IEEE/ACIS 15TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS (SERA)",,,,271,275,5,1,,,"[Velioglu, Sevilay] Kuveyt Turk Participat Bank Inc, IT Res & Dev Ctr, Istanbul, Turkey; [Selcuk, Yunus Emre] Yildiz Tech Univ, Comp Engn Dept, Istanbul, Turkey",,"Today, software maintenance is more expensive than development costs. As class complexity increases, it is increasingly difficult for new programmers to adapt to software projects, causing the cost of the software to go up. Therefore, it's important to produce faultless and understandable code. Moreover, software projects are not developed by one person alone; even a small-scale project needs 3 or more participants working on the code at the same time. Producing well designed code during the development stage has a significant value because this process makes software projects more understandable and leads to higher code quality. Consequently, the cost of software project maintenance will decrease. Code smells and anti-patterns are symptoms of poorly designed code. The aforementioned tendencies of software projects increase the possibility of poor implementations and code imperfections. Therefore it is necessary to detect and refactor poorly designed code. This paper describes an attempt to achieve their detection.",code smells; anti-patterns; automatic detection; brain method; data class,,code smells;anti-patterns;automatic detection;brain method;data class,sevilay_tanis@kuveytturk.com.tr; yselcuk@yildiz.edu.tr,"Bacon, L; Ma, J; MacKinnon, L","345 E 47TH ST, NEW YORK, NY 10017 USA","15th IEEE/ACIS International Conference on Software Engineering Research, Management and Applications (SERA)","Univ Greenwich, London, ENGLAND","JUN 07-09, 2017",IEEE,,978-1-5090-5756-6,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000426991000040,,Turkey,kuveytturk.com.tr,Kuveyt Turk Participat Bank Inc;Yildiz Tech Univ,"Kuveyt Turk Participat Bank Inc, Turkey;Yildiz Tech Univ, Turkey","Velioglu, Sevilay; Selcuk, Yunus Emre"
"Jeon, S.U., Lee, J.S., Bae, D.H.",An automated refactoring approach to design pattern-based program transformations in java programs,2002,APSEC 2002: NINTH ASIA PACIFIC SOFTWARE ENGINEERING CONFERENCE,,,,337,345,9,17,10.1109/APSEC.2002.1183003,,"Korea Adv Inst Sci & Technol, Dept Elect Engn & Comp Sci, Div Comp Sci, Seoul, South Korea",,"Software often need to be modified for accommodating requirements changes through the software life cycle. To deal with several accidental requirements changes related to software maintenance, a systematic and safe approach to modifying softwares is needed. The design patterns provide a high degree of design flexibility for such accidental requirements changes. In this paper, we propose an automated approach to refactoring based on design patterns in Java programs. In our approach, for a particular design pattern, we define an inference rule to automatically identify a set of candidate spots and a refactoring strategy to transform one of the set of candidate spots into the desired design pattern structure. A candidate spot may be a class or a set of classes to which the design patterns can be applied. We believe that our approach would be helpful to the maintainers in the sense that much of manual analysis on source code can be reduced, and the fashion of automated program transformation preserves the behavior of the original program by means of the refactoring technique.",,,,sujeon@se.kaist.ac.kr; joon@se.kaist.ac.kr; bae@se.kaist.ac.kr,"Strooper, P; Muenchaisri, P","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",9th Asia/Pacific Software Engineering Conference (APSEC 2002),"GOLD COAST, AUSTRALIA","DEC 04-06, 2002",IEEE COMPUTER SOC,,0-7695-1850-8,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000180141400034,2-s2.0-84948976804,South Korea,se.kaist.ac.kr,Dept Elect Engn & Comp Sci,"Dept Elect Engn & Comp Sci, South Korea","Jeon, SU; Lee, JS; Bae, DH"
"Magalhaes N.M., De Souza Campos H., Jr., Araujo M.A.P., De Oliveira Neves V.",An automated refactoring approach to remove unnecessary complexity in source code,2017,ACM International Conference Proceeding Series,Part F130656,, 3,,,,0,10.1145/3128473.3128476,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85030472654&doi=10.1145%2f3128473.3128476&partnerID=40&md5=e10e5bea7d6a890b4a4776be512ef19b,"Instituto Federal Do Sudeste de Minas Gerais, Juiz de Fora, Minas Gerais, Brazil; Universidade Federal de Juiz de Fora, Juiz de Fora, Minas Gerais, Brazil; Instituto Federal Do Sudeste de Minas Gerais, Universidade Federal de Juiz de Fora, Juiz de Fora, Minas Gerais, Brazil","Magalhães, N.M., Instituto Federal Do Sudeste de Minas Gerais, Juiz de Fora, Minas Gerais, Brazil; De Souza Campos, H., Jr., Universidade Federal de Juiz de Fora, Juiz de Fora, Minas Gerais, Brazil; Araújo, M.A.P., Instituto Federal Do Sudeste de Minas Gerais, Universidade Federal de Juiz de Fora, Juiz de Fora, Minas Gerais, Brazil; De Oliveira Neves, V., Instituto Federal Do Sudeste de Minas Gerais, Universidade Federal de Juiz de Fora, Juiz de Fora, Minas Gerais, Brazil","Programming apprentices may choose to prioritize the correct functioning of a source code without focusing on their quality, making them difficult to maintain and test. Based on that, a phenomenon called unnecessary structural complexity may occur, in which a program has a cyclomatic complexity value that can be reduced without affecting its external behavior. In a previous work, we developed an approach and tool to address this problem. The approach is able to identify the presence of unnecessary cyclomatic complexity and to show the developer a suggestion to restructure the source code, through a control flow graph. The goal of this paper is to automate the source code refactoring process to support the elimination of unnecessary cyclomatic complexity. We performed two experimental studies to evaluate the approach in the academic context. The evidences provided by these studies suggest that the approach is able to support unnecessary cyclomatic complexity removal. We could not find, however, evidences about the implications of such approach on unit tests development. © 2017 Association for Computing Machinery.",Control Flow Graph; Cyclomatic Complexity; Software Quality; Software Testing; Source Code Refactoring,Automation; Codes (symbols); Computer programming languages; Computer software selection and evaluation; Data flow analysis; Flow graphs; Graphic methods; Quality control; Control flow graphs; Cyclomatic complexity; External behavior; Refactorings; Software Quality; Source codes; Structural complexity; Unit tests; Software testing,Control Flow Graph;Cyclomatic Complexity;Software Quality;Software Testing;Source Code Refactoring;Automation;Codes (symbols);Computer programming languages;Computer software selection and evaluation;Data flow analysis;Flow graphs;Graphic methods;Quality control;Control flow graphs;External behavior;Refactorings;Source codes;Structural complexity;Unit tests,"Magalhães, N.M.; Instituto Federal Do Sudeste de Minas GeraisBrazil; email: nathan.manera@gmail.com",,,,,,Association for Computing Machinery,,9781450353021,,,Portuguese,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85030472654,,Brazil,gmail.com,,,"Magalhaes N.M., De Souza Campos H., Jr., Araujo M.A.P., De Oliveira Neves V."
"Sui, Y.Y., Lin, J., Zhang, X.T.",An automated refactoring tool for Dataflow Visual Programming Language,2008,ACM SIGPLAN NOTICES,43,4,,21,28,8,0,10.1145/1374752.1374755,,"[Sui, Yang-Yi; Lin, Jun] Jilin Univ, Coll Instrument Sci & Elect Engn, Changchun 130061, Peoples R China; [Zhang, Xiao-Tuo] Jilin Univ, Sch Commun Engn, Changchun 130022, Peoples R China",,"Refactoring tools are extremely important to prevent errors and reduce consumed time. But these tools only support text-based languages, especially in Object Oriented languages. In order to accommodate the situation that Dataflow Visual Programming Languages (DFVPLs) are more and more popular, an automated refactoring tool for DFVPL was proposed. DFVPL was divided into two layers-visual layer and dataflow layer. Two layers mutually evolved, which ensured correctness of visual elements and dataflow semantic during refactoring. Some algorithms like middle graph generation; terminal auto-generation and terminal auto-modification were proposed to implement the changes of two layers. This tool has been proved correct and efficient by some refactoring instances. In addition, we discussed some famous DFVPL like LabVIEW to expose lacking of automated refactoring tool forced refactoring by hand to be time-consuming and error-prone.",software engineering; dataflow visual programming language; refactoring; dataflow,,software engineering;dataflow visual programming language;refactoring;dataflow,suiyangyi@163.com,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article,WoS,Computer Science,WOS:000256501500003,,China,163.com,Jilin Univ,"Jilin Univ, China","Sui, Yang-Yi; Lin, Jun; Zhang, Xiao-Tuo"
"Yang-Yi S., Jun L., Xiao-Tuo Z.",An automated refactoring tool for dataflow visual programming language,2008,ACM SIGPLAN Notices,43,4,,21,28,,1,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-67249128938&partnerID=40&md5=02f72e0fb703e3779e0b391ac81305a7,"College of Instrument Science and Electronic Engineering, Jilin University, Changchun 130061, China; School of Communication Engineering, Jilin University, Changchun 130022, China","Yang-Yi, S., College of Instrument Science and Electronic Engineering, Jilin University, Changchun 130061, China; Jun, L., College of Instrument Science and Electronic Engineering, Jilin University, Changchun 130061, China; Xiao-Tuo, Z., School of Communication Engineering, Jilin University, Changchun 130022, China","Refactoring tools are extremely important to prevent errors and reduce consumed time. But these tools only support text-based languages, especially in Object Oriented languages. In order to accommodate the situation that Dataflow Visual Programming Languages (DFVPLs) are more and more popular, an automated refactoring tool for DFVPL was proposed. DFVPL was divided into two layers visual layer and dataflow layer. Two layers mutually evolved, which ensured correctness of visual elements and dataflow semantic during refactoring. Some algorithms like middle graph generation; terminal auto-generation and terminal auto-modification were proposed to implement the changes of two layers. This tool has been proved correct and efficient by some refactoring instances. In addition, we discussed some famous DFVPL like LabVIEW to expose lacking of automated refactoring tool forced refactoring by and to be time-consuming and error-prone.",Dataflow; Dataflow visual programming language; Refactoring; Software engineering,Auto-modification; Data-flow semantics; Dataflow; Dataflow visual programming language; Error prone; Graph generation; LabViEW; Object-oriented languages; Refactoring; Refactoring tools; Two layers; Visual elements; Visual programming languages; Ada (programming language); Algorithmic languages; Automation; C (programming language); Computer software; Linguistics; Query languages; Object oriented programming,Dataflow;Dataflow visual programming language;Refactoring;Software engineering;Auto-modification;Data-flow semantics;Error prone;Graph generation;LabViEW;Object-oriented languages;Refactoring tools;Two layers;Visual elements;Visual programming languages;Ada (programming language);Algorithmic languages;Automation;C (programming language);Computer software;Linguistics;Query languages;Object oriented programming,"Yang-Yi, S.; College of Instrument Science and Electronic Engineering, Jilin University, Changchun 130061, China; email: suiyangyi@163.com",,,,,,,15232867,,,,English,ACM SIGPLAN Not.,Article,Scopus,,2-s2.0-67249128938,,China,163.com,,,"Yang-Yi S., Jun L., Xiao-Tuo Z."
"Silva V.J.S., Dorca F.A.",An automatic and intelligent approach for supporting teaching and learning of software engineering considering design smells in object-oriented programming,2019,"Proceedings - IEEE 19th International Conference on Advanced Learning Technologies, ICALT 2019",,, 8820876,321,323,,0,10.1109/ICALT.2019.00100,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072925856&doi=10.1109%2fICALT.2019.00100&partnerID=40&md5=11b1daae35536b637e055bc38c356720,"Faculty of Computing-FACOM, Federal University of Uberlandia-UFU, Uberlândia, MG, Brazil","Silva, V.J.S., Faculty of Computing-FACOM, Federal University of Uberlandia-UFU, Uberlândia, MG, Brazil; Dorça, F.A., Faculty of Computing-FACOM, Federal University of Uberlandia-UFU, Uberlândia, MG, Brazil","Design smells are software structures that may indicate a code or design problem that makes software difficult to evolve and maintain [3]. Know those errors is the first step to improve some development skills, such as refactoring. Current tools that detect software problems does not aim to help students to learn with their own errors neither help teachers to use it to improve the way they teach object oriented programming (OOP) and software engineering disciplines. This work aims to develop an expert system module to improve the existent tools and help students and teachers in their tasks. © 2019 IEEE.",Design smells; Learning; Object-oriented programming; Refactoring; Software engineering; Teaching,Expert systems; Odors; Software engineering; Teaching; Design problems; Engineering disciplines; Learning; Objectoriented programming (OOP); Refactorings; Software problems; Software structures; Teaching and learning; Object oriented programming,Design smells;Learning;Object-oriented programming;Refactoring;Software engineering;Teaching;Expert systems;Odors;Design problems;Engineering disciplines;Objectoriented programming (OOP);Refactorings;Software problems;Software structures;Teaching and learning;Object oriented programming,,Chang M.Sampson D.G.Huang R.Gomes A.S.Chen N.-S.Bittencourt I.I.Kinshuk K.Dermeval D.Bittencourt I.M.,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781728134857,,,English,"Proc. - IEEE Int. Conf. Adv. Learn. Technol., ICALT",Conference Paper,Scopus,,2-s2.0-85072925856,,Brazil,No email,,,"Silva V.J.S., Dorca F.A."
"Antoniol, G., Di Penta, M., Merlo, E.",An automatic approach to identify class evolution discontinuities,2004,7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION,,,,31,40,10,39,10.1109/IWPSE.2004.1334766,,"Univ Sannio, Dept Engn, RCOST, I-82100 Benevento, Italy",,"When a software system evolves, features are added, removed and changed. Moreover, refactoring activities are periodically performed to improve the software internal structure. A class may be replaced by another, two classes can be merged, or a class may be split in two others. ' As a consequence, it may not be possible to trace software features between a release and another. When studying software evolution, we should be able to trace a class lifetime even when it disappears because it is replaced by a similar one, split or merged. Such a capability is also essential to perform impact analysis. This paper proposes an automatic approach, inspired on vector space information retrieval, to identify class evolution discontinuities and, therefore, cases of possible refactoring. The approach has been applied to identify refactorings performed over 40 releases of a Java open source domain name server. Almost all the refactorings found were actually performed in the analyzed system, thus indicating the helpfulness of the approach and of the developed tool.",software evolution; releases; refactoring; traceability,TRACEABILITY LINKS; SOFTWARE; DOCUMENTATION; INFORMATION; RETRIEVAL; CODE,software evolution;releases;refactoring;traceability;TRACEABILITY LINKS;SOFTWARE;DOCUMENTATION;INFORMATION;RETRIEVAL;CODE,antoniol@ieee.org; dipenta@unisannio.it; ettore.merlo@info.polymtl.ca,"Inoue, K; Ajisaka, T; Gall, H","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",7th International Workshop on Principles of Software Evolution (IWPSE 2004),"Kyoto, JAPAN","SEP 06-07, 2004",IEEE COMPUTER SOC,,0-7695-2211-4,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000224457300004,2-s2.0-11244262339,Italy,ieee.org,Dept Engn,"Dept Engn, Italy","Antoniol, G; Di Penta, M; Merlo, E"
"Schmidt, F., MacDonell, S.G., Connor, A.M.",An Automatic Architecture Reconstruction and Refactoring Framework,2012,"SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS 2011",377,,,95,111,17,6,,,"[Schmidt, Frederik; MacDonell, Stephen G.; Connor, Andrew M.] Auckland Univ Technol, SERL, Auckland 1142, New Zealand",,"A variety of sources have noted that a substantial proportion of non trivial software systems fail due to unhindered architectural erosion. This design deterioration leads to low maintainability, poor testability and reduced development speed. The erosion of software systems is often caused by inadequate understanding, documentation and maintenance of the desired implementation architecture. If the desired architecture is lost or the deterioration is advanced, the reconstruction of the desired architecture and the realignment of this desired architecture with the physical architecture both require substantial manual analysis and implementation effort. This paper describes the initial development of a framework for automatic software architecture reconstruction and source code migration. This framework offers the potential to reconstruct the conceptual architecture of software systems and to automatically migrate the physical architecture of a software system toward a conceptual architecture model. The approach is implemented within a proof of concept prototype which is able to analyze java system and reconstruct a conceptual architecture for these systems as well as to refactor the system towards a conceptual architecture.",Architecture reconstruction; software migration; source code transformation and refactoring; search based software engineering; metaheuristics,SOFTWARE; TOOL; MODULARIZATION; SYSTEMS; PATTERN,Architecture reconstruction;software migration;source code transformation and refactoring;search based software engineering;metaheuristics;SOFTWARE;TOOL;MODULARIZATION;SYSTEMS;PATTERN,fschmidt@aut.ac.nz; stephen.macdonell@aut.ac.nz; andrew.connor@aut.ac.nz,"Lee, R","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY","9th International Conference on Software Engineering Research, Management and Applications (SERA 2011)","Baltimore, MD","AUG 10-11, 2011",SPRINGER-VERLAG BERLIN,1860-949X,978-3-642-23201-5,,,English,STUD COMPUT INTELL,Proceedings Paper,WoS,Computer Science,WOS:000302390400007,2-s2.0-82255177014,New Zealand,aut.ac.nz,Auckland Univ Technol,"Auckland Univ Technol, New Zealand","Schmidt, Frederik; MacDonell, Stephen G.; Connor, Andrew M."
"Yamazaki, S., Nagata, M.",An automatic method for refactoring Java programs,2002,KNOWLEDGE-BASED SOFTWARE ENGINEERING,80,,,167,172,6,0,,,"Keio Univ, Grad Sch Sci & Technol, Kouhoku Ku, Yokohama, Kanagawa 2238522, Japan",,"In order to increase productivity of the software development, it is desired to write understandable and reusable programs. Thus, a refactoring method, which transforms programs into understandable ones, has been an attracted research issue. Existing refactoring tools only replace a specified part of the program with another text by the programmer. However, it is difficult to find the part of the program to be replaced. Thus, we think that the tool should refactor programs automatically. Moreover, it should tell the programmers the refactoring strategy to be applied. This paper proposes a tool refactoring Java programs automatically. Our tool provides the following two common facilities for refactoring small parts of given programs. The first one is to hide methods of a class. For example, if a public method is used only within own class, the method is replaced with the private one. The other facility is to reduce the scope of a variable. For example, a variable is used only within ""for"", ""while"", or ""if"" statement in a method, the variable is declared where the statement is needed. Our tool has succeeded in refactoring many Java programs automatically.",Program understanding; programming knowledge; learning of programming; modeling programs and programmers.,,Program understanding;programming knowledge;learning of programming;modeling programs and programmers.,,"Welzer, T; Yamamoto, S; Rozman, I","NIEUWE HEMWEG 6B, 1013 BG AMSTERDAM, NETHERLANDS",5th Joint Conference on Knowledge-Based Software Engineering (JCKBSE),"MARIBOR, SLOVENIA","SEP 11-13, 2002",I O S PRESS,0922-6389,1-58603-274-7,,,English,FR ART INT,Proceedings Paper,WoS,Computer Science,WOS:000178853500020,,Japan,No email,Grad Sch Sci & Technol,"Grad Sch Sci & Technol, Japan","Yamazaki, S; Nagata, M"
"Varma, P.",Anchored Text For Software Weaving and Merging,2009,"2009 THIRD IEEE INTERNATIONAL CONFERENCE ON SECURE SOFTWARE INTEGRATION AND RELIABILITY IMPROVEMENT, PROCEEDINGS",,,,93,100,8,0,10.1109/SSIRI.2009.16,,"IBM India Res Lab, New Delhi 110070, India",,"Text-based software merge/refactoring systems are predominantly used. Anchored text, a datatype with first-class location anchors and greater commutativity of software merge operations has been proposed recently. In this paper we develop anchored text as a novel weaver for simultaneous, separate concerns. Irregular, crosscutting concerns such as porting issues are applicable simultaneously (multidimensional separation of multi-target porting concerns), in order to allow for choice of a desired subset for a given port. Form-checking rules can be specified with individual concerns, to verify their correct weaving. The simultaneous concerns model can be viewed as an offline, concurrent change weaving problem, according to which a direct implementation is provided. A novel wait-free implementation of an online model, wherein concurrent changes arrive in a dynamic sequence but with fixed scheduling tags is provided and a highly-concurrent version of the same described using speculative scheduling. All these implementations use minimal synchronisation primitives only, namely atomic registers.",software merging; software weaving; refactoring; anchored text; multi-dimensional separation of concerns (MDSOC); simultaneous concerns; highly-concurrent; porting concerns; atomic registers,,software merging;software weaving;refactoring;anchored text;multi-dimensional separation of concerns (MDSOC);simultaneous concerns;highly-concurrent;porting concerns;atomic registers,pvarma@in.ibm.com,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",3rd International Conference on Secure Software Integration and Reliability Improvement,"Shanghai, PEOPLES R CHINA","JUL 08-10, 2009",IEEE COMPUTER SOC,,978-0-7695-3758-0,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000274878700011,2-s2.0-72849130775,India,in.ibm.com,New Delhi 110070,"New Delhi 110070, India","Varma, Pradeep"
"Zarras, A.V., Mamalis, G., Papamichail, A., Kollias, P., Vassiliadis, P.",And the Tool Created a GUI That was Impure and Without Form: Anti-Patterns in Automatically Generated GUIs,2018,EUROPLOP 2018: PROCEEDINGS OF THE 23RD EUROPEAN CONFERENCE ON PATTERN LANGUAGES OF PROGRAMS,,,,,,8,0,10.1145/3282308.3282333,,"[Zarras, Apostolos, V; Mamalis, Georgios; Papamichail, Aggelos; Kollias, Panagiotis; Vassiliadis, Panos] Univ Ioannina, Dept Comp Sci & Engn, Ioannina, Greece",,"A basic prerequisite for any daily development task is to understand the source code that we are working with. To this end, the source code should be clean. Usually, it is up to us, the developers, to keep the source code clean. However, often there are parts of the code that are automatically generated. A typical such case are Graphical User Interfaces (GUIs) created via a GUI builder, i.e., a tool that allows the developer to design the GUI by combining graphical control elements, offered in a palette. In this paper, we investigate the quality of the code that is generated by GUI builders. To assist tool-smiths in developing better GUI builders, we report anti-patterns concerning naming, documentation, design and implementation issues, observed in a study that involves four popular GUI builders for Java. The reported anti-patterns can further assist GUI developers/designers in selecting appropriate tools.",GUIs; Patterns; Refactoring; Code Clones; Responsibilities,,GUIs;Patterns;Refactoring;Code Clones;Responsibilities,zarras@cs.uoi.gr; gmamalis@cs.uoi.gr; apapamichail@cs.uoi.gr; cs101862@cs.uoi.gr; pvassil@cs.uoi.gr,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",23rd European Conference on Pattern Languages of Programs (EuroPLoP),"Irsee, GERMANY","JUL 04-08, 2018",ASSOC COMPUTING MACHINERY,,978-1-4503-6387-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000471044700024,,Greece,cs.uoi.gr,Univ Ioannina,"Univ Ioannina, Greece","Zarras, Apostolos, V; Mamalis, Georgios; Papamichail, Aggelos; Kollias, Panagiotis; Vassiliadis, Panos"
"Han, A.R., Bae, D.H., Cha, S.",An efficient approach to identify multiple and independent Move Method refactoring candidates,2015,INFORMATION AND SOFTWARE TECHNOLOGY,59,,,53,66,14,6,10.1016/j.infsof.2014.10.007,,"[Han, Ah-Rim; Cha, Sungdeok] Korea Univ, Dept Comp Sci, Seoul 136701, South Korea; [Bae, Doo-Hwan] Korea Adv Inst Sci & Technol, Dept Comp Sci, Taejon 305701, South Korea",,"Context: Application of a refactoring operation creates a new set of dependency in the revised design as well as a new set of further refactoring candidates. In the studies of stepwise refactoring recommendation approaches, applying one refactoring at a time has been used, but is inefficient because the identification of the best candidate in each iteration of refactoring identification process is computation-intensive. Therefore, it is desirable to accurately identify multiple and independent candidates to enhance efficiency of refactoring process. Objective: We propose an automated approach to identify multiple refactorings that can be applied simultaneously to maximize the maintainability improvement of software. Our approach can attain the same degree of maintainability enhancement as the method of the refactoring identification of the single best one, but in fewer iterations (lower computation cost). Method: The concept of maximal independent set (MIS) enables us to identify multiple refactoring operations that can be applied simultaneously. Each MIS contains a group of refactoring candidates that neither affect (i.e., enable or disable) nor influence maintainability on each other. Refactoring effect delta table quantifies the degree of maintainability improvement each elementary candidate. For each iteration of the refactoring identification process, multiple refactorings that best improve maintainability are selected among sets of refactoring candidates (MISs). Results: We demonstrate the effectiveness and efficiency of the proposed approach by simulating the refactoring operations on several large-scale open source projects such as jEdit, Columba, and jGit. The results show that our proposed approach can improve maintainability by the same degree or to a better extent than the competing method, choosing one refactoring candidate at a time, in a significantly smaller number of iterations. Thus, applying multiple refactorings at a time is both effective and efficient. Conclusion: Our proposed approach helps improve the maintainability as well as the productivity of refactoring identification. (C) 2014 Elsevier B.V. All rights reserved.",Refactoring identification process; Refactoring selection; Multiple simultaneous refactorings; Maintainability improvement; Refactoring effect dependency,PARALLEL ALGORITHM,Refactoring identification process;Refactoring selection;Multiple simultaneous refactorings;Maintainability improvement;Refactoring effect dependency;PARALLEL ALGORITHM,arhan@korea.ac.kr; bae@se.kaist.ac.kr; scha@korea.ac.kr,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000349427200004,2-s2.0-84921048370,South Korea,korea.ac.kr,Korea Univ;Korea Adv Inst Sci & Technol,"Korea Univ, South Korea;Korea Adv Inst Sci & Technol, South Korea","Han, Ah-Rim; Bae, Doo-Hwan; Cha, Sungdeok"
"Cong, G.J., Wen, H.F., Chung, I.H., Klepacki, D., Murata, H., Negishi, Y.",An Efficient Framework for Multi-dimensional Tuning of High Performance Computing Applications,2012,2012 IEEE 26TH INTERNATIONAL PARALLEL AND DISTRIBUTED PROCESSING SYMPOSIUM (IPDPS),,,,1376,1387,12,0,10.1109/IPDPS.2012.124,,"[Cong, Guojing; Wen, Huifang; Chung, I-hsin; Klepacki, David] IBM TJ Watson Res Ctr, 1101 Kitchawan Rd, Yorktown Hts, NY 10598 USA; [Murata, Hiroki; Negishi, Yasushi] IBM Tokyo Res Lab, Tokyo, Japan",,"Deploying an application onto a target platform for high performance oftentimes demands manual tuning by experts. As machine architecture gets increasingly complex, tuning becomes even more challenging and calls for systematic approaches. In our earlier work we presented a prototype that combines efficiently expert knowledge, static analysis, and runtime observation for bottleneck detection, and employs refactoring and compiler feedback for mitigation. In this study, we develop a software tool that facilitates fast searching of bottlenecks and effective mitigation of problems from major dimensions of computing (e. g., computation, communication, and I/O). The impact of our approach is demonstrated by the tuning of the LBMHD code and a Poisson solver code, representing traditional scientific codes, and a graph analysis code in UPC, representing emerging programming paradigms. In the experiments, our framework detects with a single run of the application intricate bottlenecks of memory access, I/O, and communication. Moreover, the automated solution implementation yields significant overall performance improvement on the target platforms. The improvement for LBMHD is upto 45%, and the speedup for the UPC code is upto 5. These results suggest that our approach is a concrete step towards systematic tuning of high performance computing applications.",,,,gcong@us.ibm.com; hfwen@us.ibm.com; ihchung@us.ibm.com; klepacki@us.ibm.com; MRTHRK@jp.ibm.com; NEGISHI@jp.ibm.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",26th IEEE International Parallel and Distributed Processing Symposium (IPDPS) / Workshop on High Performance Data Intensive Computing,"Shanghai Jiao Tong Univ, Shanghai, PEOPLES R CHINA","MAY 21-25, 2012",IEEE,1530-2075,978-0-7695-4675-9,,,English,INT PARALL DISTRIB P,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000309131900120,2-s2.0-84866866019,United States;Japan,us.ibm.com,IBM TJ Watson Res Ctr;IBM Tokyo Res Lab,"IBM TJ Watson Res Ctr, United States;IBM Tokyo Res Lab, Japan","Cong, Guojing; Wen, Huifang; Chung, I-hsin; Klepacki, David; Murata, Hiroki; Negishi, Yasushi"
"Han A.R., Bae D.H.",An efficient method for assessing the impact of refactoring candidates on maintainability based on matrix computation,2014,"Proceedings - Asia-Pacific Software Engineering Conference, APSEC",1,, 7091340,430,437,,3,10.1109/APSEC.2014.69,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951265737&doi=10.1109%2fAPSEC.2014.69&partnerID=40&md5=6a6cb20027da8256f1384989456c9e94,"Department of Computer Science, Korea University, Seoul, South Korea; Department of Computer Science, Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea","Han, A.-R., Department of Computer Science, Korea University, Seoul, South Korea; Bae, D.-H., Department of Computer Science, Korea Advanced Institute of Science and Technology (KAIST), Daejeon, South Korea","For automating refactoring identification, previous methods for assessing the impact of a large number of refactoring candidates may be computationally expensive. In our paper, we propose an efficient method for assessing the impact of refactoring candidates on maintainability based on matrix computation, which is approximate but fast. This proposed method is evaluated on a refactoring identification approach for jEdit and Columba, two large-scale open source projects. The experiments show that the proposed method requires less time for assessing refactoring candidates and that the refactoring identification approach using our proposed method also improves maintainability. © 2014 IEEE.",Maintainability improvement; Refactoring effect assessment method; Refactoring identification process,Maintainability; Open source software; Software engineering; Effect assessments; Identification approach; Identification process; Matrix computation; Open source projects; Refactorings; Matrix algebra,Maintainability improvement;Refactoring effect assessment method;Refactoring identification process;Maintainability;Open source software;Software engineering;Effect assessments;Identification approach;Identification process;Matrix computation;Open source projects;Refactorings;Matrix algebra,,Gueheneuc Y-G.Kwon G.Cha S.,,,,,IEEE Computer Society,15301362,9781479974252,,,English,Proc. Asia Pac. Softw. Eng. Conf. APSEC,Conference Paper,Scopus,,2-s2.0-84951265737,,South Korea,No email,,,"Han A.-R., Bae D.-H."
"Muzammul, M., Awais, M.",An empirical approach for software reengineering process with relation to quality assurance mechanism,2018,ADCAIJ-ADVANCES IN DISTRIBUTED COMPUTING AND ARTIFICIAL INTELLIGENCE JOURNAL,7,3,,31,45,15,0,10.14201/ADCAIJ2018733146,,"[Muzammul, Muhammad; Awais, M.] GCUF, Dept Software Engn, Faisalabad, Punjab, Pakistan",,"Software development advances focus on productivity of existing software systems and quality is basic demand of every engineering product. In this paper we will discuss complete reengineering process with aspects of forward, reverse and quality assurance mechanism. As we know the software development life cycle (SDLC) follows a complete mechanism of engineering process. In forward engineering we tried to follow selective main phases of software engineering(data, requirements, design, development, implementation). Inreverse engineering we move backward from the last phase of developing product as it gather requirements from implemented product(implementation, coding, design, requirements, data). During reengineering we add up more quality features on customer demands, but the actual demand is to fulfill quality needs that can be assured by external as well as internal quality attributes such as reliability, efficiency, flexibility, reusability and robustness in any software system. We discussed a methodological approach to move from reengineering to the journey of quality assurance. More than 50 studies come into discussion and throughput results proposed by graph and tabular form. We can say if the reengineering process produce quality attributes, then it can be said by old software system refactoring as code refactoring, data refactoring and architectural refactoring we obtained a quality products at lower cost instead of new software system development, which causes decrease in quality attributes as cost, time etc. In future work testing methodology can be proposed for quality assurance.",Software; reengineering; refactoring; restructuring; forward engineering; reverse engineering; quality assurance; internal quality; external quality; flexibility; reusability; reliability; robustness,,Software;reengineering;refactoring;restructuring;forward engineering;reverse engineering;quality assurance;internal quality;external quality;flexibility;reusability;reliability;robustness,m.muzammul1275@gcuf.edu.pk; muhammadawais@gcuf.edu.pk,,"APARTADO DE CORREOS 325, SALAMANCA, 00000, SPAIN",,,,EDICIONES UNIV SALAMANCA,2255-2863,,,,English,ADCAIJ-ADV DISTRIB C,Article,WoS,Computer Science,WOS:000454084600003,,Pakistan,gcuf.edu.pk,GCUF,"GCUF, Pakistan","Muzammul, Muhammad; Awais, M."
"Shatnawi R., Li W.",An empirical assessment of refactoring impact on software quality using a hierarchical quality model,2011,International Journal of Software Engineering and its Applications,5,4,,127,150,,21,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84859865326&partnerID=40&md5=68ac6a2d0a242045f778a6e2247b76b1,"Software Engineering Department, Jordan University of Science and Technology, Irbid, 22110, Jordan; Computer Science Department, University of Alabama, Huntsville, AL 35899, United States","Shatnawi, R., Software Engineering Department, Jordan University of Science and Technology, Irbid, 22110, Jordan; Li, W., Computer Science Department, University of Alabama, Huntsville, AL 35899, United States","Software refactoring is a collection of reengineering activities that aims to improve software quality. Refactorings are commonly used in agile software processes to improve software quality after a significant software development or evolution. There is belief that refactoring improves quality factors such as understandability, flexibility, and reusability. However, there is limited empirical evidence to support such assumptions. The aim of this study is to confirm such claims using a hierarchal quality model. We study the effect of software refactoring on software quality. We provide details of our findings as heuristics that can help software developers make more informed decisions about what refactorings to perform in regard to improve a particular quality factor. We validate the proposed heuristics in an empirical setting on two open-source systems. We found that the majority of refactoring heuristics do improve quality; however some heuristics do not have a positive impact on all software quality factors. In addition, we found that the impact analysis of refactorings divides software measures into two categories: high and low impacted measures. These categories help in the endeavor to know the best measures that can be used to identify refactoring candidates. We validated our findings on two open-source systems-Eclipse and Struts. For both systems, we found consistency between the heuristics and the actual refactorings.",Design measures; QMOOD; Quality factors; Refactoring,,Design measures;QMOOD;Quality factors;Refactoring,"Shatnawi, R.; Software Engineering Department, Jordan University of Science and Technology, Irbid, 22110, Jordan; email: raedamin@just.edu.jo",,,,,,,17389984,,,,English,Int. J. Softw. Eng. Appl.,Article,Scopus,,2-s2.0-84859865326,,Jordan;United States,just.edu.jo,,,"Shatnawi R., Li W."
"Hardt, R., Munson, E.V.",An Empirical Evaluation of Ant Build Maintenance using Formiga,2015,2015 31ST INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE AND EVOLUTION (ICSME) PROCEEDINGS,,,,201,210,10,3,,,"[Hardt, Ryan] Univ Wisconsin, Dept Comp Sci, Eau Claire, WI 54701 USA; [Munson, Ethan V.] Univ Wisconsin, Dept Elect Engn & Comp Sci, Milwaukee, WI 53201 USA",,"As a software project evolves, so does its build system. Significant effort is necessary to maintain the build system to cope with this evolution, in part because changes to source code often require parallel changes in the build system. Our tool, Formiga, is a build maintenance and dependency discovery tool for the Ant build system. Formiga's primary uses are to automate build changes as the source code is updated, to identify the build dependencies within a software project, and to assist with build refactoring. Formiga is implemented as an IDE plugin, which allows it to recognize when project resources are updated and automatically update the build system accordingly. A controlled experiment was conducted to assess Formiga's ability to assist developers with build maintenance. Subjects responded to scenarios in which various forms of build maintenance and/or knowledge about deliverables and their contents were requested. Subjects completed eleven different build maintenance tasks in both an experimental condition using Formiga and a control condition using only conventional IDE services. The study used a balanced design relative to both task order and use of Formiga. This design also ensured that order balancing was not confounded with the subjects' level of Ant expertise. Formiga was shown to significantly reduce the time required to perform build maintenance while increasing the correctness with which it can be performed for both novice and experienced developers.",,,,hardtr@uwec.edu; munson@uwm.edu,"Koschke, R; Krinke, J; Robillard, M","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 31st International Conference on Software Maintenance and Evolution (ICSME),"Bremen, GERMANY","SEP 29-OCT 01, 2015",IEEE,1063-6773,978-1-4673-7532-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380398300021,2-s2.0-84961575953,United States,uwec.edu,Univ Wisconsin,"Univ Wisconsin, United States","Hardt, Ryan; Munson, Ethan V."
"Noel R., Visconti M., Valdes G., Astudillo H.","An empirical evaluation of evolutionary design approach: Design, results and discussion of experiments on Extreme Programming",2007,ENASE 2007 - Proceedings of the 2nd International Conference on Evaluation of Novel Approaches to Software Engineering,,,,119,122,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84880275478&partnerID=40&md5=aa9adfe4d25716697074ac47bab89225,"Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile","Noël, R., Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile; Visconti, M., Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile; Valdés, G., Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile; Astudillo, H., Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile","Evolutionary Design is Extreme Programming's approach to organize software structure and its relationships, encouraging refactoring, test driven development and the simplest solution for the requirements of a single iteration, thus avoiding a big up-front design activity at the beginning of the project that can cause carrying on a huge structural complexity throughout the whole project. In order to contrast this approach with a planned or traditional design approach, an empirical evaluation of impact on software design quality and process productivity has been designed and conducted in an academic environment with toy size problems. Experimental studies planning details are presented, and two replications with different experimental designs are described. Results suggest that there are no differences in quality between both approaches, and that productivity is better when a planned design is adopted.",Evolutionary design; Experimental design; Extreme Programming,Academic environment; Empirical evaluations; Evolutionary design; Experimental studies; EXtreme Programming; Software design quality; Structural complexity; Test driven development; Design; Productivity; Software engineering; Statistics; Design of experiments,Evolutionary design;Experimental design;Extreme Programming;Academic environment;Empirical evaluations;Experimental studies;Software design quality;Structural complexity;Test driven development;Design;Productivity;Software engineering;Statistics;Design of experiments,"Departamento de Informática, Universidad Técnica Federico Santa María, Av. España 1258, Valparaíso, Chile",,,,,,,,9789898111104,,,English,ENASE - Proc. Int. Conf. Eval. Novel Approaches Softw. Eng.,Conference Paper,Scopus,,2-s2.0-84880275478,,Chile,No email,,,"Noel R., Visconti M., Valdes G., Astudillo H."
"Franca, J.M.S., dos Santos, C.A.R., de Oliveira, K.S., Soares, M.S.",An Empirical Evaluation of Refactoring Crosscutting Concerns into Aspects using Software Metrics,2013,PROCEEDINGS OF THE 2013 10TH INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY: NEW GENERATIONS,,,,674,679,6,0,10.1109/ITNG.2013.104,,"[Franca, Joyce M. S.; dos Santos, Caio Augusto R.; de Oliveira, Kenia S.; Soares, Michel S.] Univ Fed Uberlandia, Fac Comp, BR-38400 Uberlandia, MG, Brazil",,"Code scattering and code tangling affect software development in many ways, including poor traceability of requirements, low productivity, poor overall quality and increased efforts for software maintenance. One proposed solution to solve these issues is to use a specific software construction known as aspect. Aspect-oriented programming (AOP) has been widely studied since its introduction with the promise of improving modularization by addressing crosscutting concerns. Few studies on empirical evaluation of the benefits of aspect-oriented paradigm were published. Results presented in these studies are frequently subjective, and some studies are non-conclusive. In addition, these studies are based on the implementation of only one or two crosscutting concerns into aspects, and the evaluation is based on few software metrics. In this article, the evaluation of AOP implementation through software metrics is proposed. The main idea is to implement crosscutting concerns as aspects, with focus on those that were not given properly attention in the literature. Two softwares were used as case studies.",Empirical Evaluation; Software Refactoring; Aspect-Oriented Programming; Software Metrics,IMPACT,Empirical Evaluation;Software Refactoring;Aspect-Oriented Programming;Software Metrics;IMPACT,joycefranca@gmail.com; cairoarsantos@gmail.com; keniasoli@gmail.com; mics.soares@gmail.com,"Latifi, S","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",10th International Conference on Information Technology - New Generations (ITNG),"Las Vegas, NV","APR 15-17, 2013",IEEE COMPUTER SOC,,978-0-7695-4967-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000334926900106,2-s2.0-84886648265,Brazil,gmail.com,Univ Fed Uberlandia,"Univ Fed Uberlandia, Brazil","Franca, Joyce M. S.; dos Santos, Caio Augusto R.; de Oliveira, Kenia S.; Soares, Michel S."
"Dhaka, G., Singh, P.",An Empirical Investigation into Code Smell Elimination Sequences for Energy Efficient Software,2016,2016 23RD ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC 2016),,,,349,352,4,1,10.1109/APSEC.2016.23,,"[Dhaka, Garima; Singh, Paramvir] Natl Inst Technol, Jalandhar, India",,"Recent research has shown that maintainability improving activities, such as removing code smells using recommended refactoring activities, may degrade the energy consumption behavior of software systems. However, current research is still immature and requires considerable effort for transferring findings to practice. This work empirically investigates the impact of eliminating a set of three notorious code smells, individually as well as in all six possible sequences, on energy consumption behavior of software systems. It also analyzes whether any relationship exists between software architecture sustainability (in terms of energy efficiency) and maintainability within the context of individual and sequential code smell elimination. The study outcomes show that the selected code smell removal permutations yield variant levels of energy consumption values for the resulted refactored software versions. Also, a particular permutation is learned to yield most energy-efficient refactored software versions, when compared to all other code smell removal permutations.",energy consumption; sustainability; code smell; refactoring; software architecture; maintainability; green IT,,energy consumption;sustainability;code smell;refactoring;software architecture;maintainability;green IT,garima.dhaka1992@gmail.com; singhpv@nitj.ac.in,"Potanin, A; Murphy, GC; Reeves, S; Dietrich, J","345 E 47TH ST, NEW YORK, NY 10017 USA",23rd Asia-Pacific Software Engineering Conference (APSEC),"Hamilton, NEW ZEALAND","DEC 06-09, 2016",IEEE,1530-1362,978-1-5090-5575-3,,,English,ASIA PAC SOFWR ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000406108100046,2-s2.0-85018475303,India,gmail.com,Natl Inst Technol,"Natl Inst Technol, India","Dhaka, Garima; Singh, Paramvir"
"Sangeetha, M., Chandrasekar, C.",An empirical investigation into code smells rectifications through ADA_BOOSTER,2019,AIN SHAMS ENGINEERING JOURNAL,10,3,,549,553,5,0,10.1016/j.asej.2018.10.005,,"[Sangeetha, M.; Chandrasekar, C.] Periyar Univ Tamil Nadu, Dept Comp Sci, Salem, Tamil Nadu, India",,"Object Oriented Programming has become one of the most established paradigms. It offers us features like encapsulation, polymorphism, inheritance etc. By using these features we are able to develop good software's that are easy to understand. But when the size of the software goes on increasing it poses problems with respect to maintaining the source code. Also we come across the problems like code scattering and code tangling. So object oriented programming has some limitations and this is where Aspect Oriented Programming comes into play. Refactoring is one of the most important activities in software development. It is done to improve the design of the software, to make the software easier and better to understand and to help us in writing programs faster. After the software is refactored, it is important to note the behaviour of that software. Here, we propose new refactorings technique. The refactorings are identified. They are applied on the Systems. The ADA_BOOSTER technique to measure the metrics. By using refactoring we can change the existing software without affecting the behaviour of the software. (C) 2019 The Authors. Published by Elsevier B.V. on behalf of Faculty of Engineering, Ain Shams University.",Software refactoring; Code smell; Smell identifications; Smell rectifications; ADA-Booster,,Software refactoring;Code smell;Smell identifications;Smell rectifications;ADA-Booster,sekar@periyaruniversity.ac.in; ccsekar@gmail.com,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,2090-4479,,,,English,AIN SHAMS ENG J,Article,WoS,Engineering,WOS:000486589500009,,India,periyaruniversity.ac.in,Periyar Univ Tamil Nadu,"Periyar Univ Tamil Nadu, India","Sangeetha, M.; Chandrasekar, C."
"Rachatasumrit, N., Kim, M.",An Empirical Investigation into the Impact of Refactoring on Regression Testing,2012,2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM),,,,357,366,10,26,,,"[Rachatasumrit, Napol; Kim, Miryung] Univ Texas Austin, Austin, TX 78712 USA",,"It is widely believed that refactoring improves software quality and developer's productivity by making it easier to maintain and understand software systems. On the other hand, some believe that refactoring has the risk of functionality regression and increased testing cost. This paper investigates the impact of refactoring edits on regression tests using the version history of Java open source projects: (1) Are there adequate regression tests for refactoring in practice? (2) How many of existing regression tests are relevant to refactoring edits and thus need to be re-run for the new version? (3) What proportion of failure-inducing changes are relevant to refactorings? By using a refactoring reconstruction analysis and a change impact analysis in tandem, we investigate the relationship between the types and locations of refactoring edits identified by REFFINDER and the affecting changes and affected tests identified by the FAULTTRACER change impact analysis. The results on three open source projects, JMeter, XMLSecurity, and ANT, show that only 22% of refactored methods and fields are tested by existing regression tests. While refactorings only constitutes 8% of atomic changes, 38% of affected tests are relevant to refactorings. Furthermore, refactorings are involved in almost half of the failed test cases. These results call for new automated regression test augmentation and selection techniques for validating refactoring edits.",software evolution; refactoring; empirical study; regression testing,,software evolution;refactoring;empirical study;regression testing,nrachatasumrit@utexas.edu; miryung@ece.utexas.edu,"Tonella, P; DiPenta, M; Maletic, JI","345 E 47TH ST, NEW YORK, NY 10017 USA",28th International Conference on Software Maintenance (ICSM),"Riva del Garda, ITALY","SEP 23-28, 2012",IEEE,,978-1-4673-2312-3,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000313625800037,2-s2.0-84873116259,United States,utexas.edu,Univ Texas Austin,"Univ Texas Austin, United States","Rachatasumrit, Napol; Kim, Miryung"
"Tufano, M., Palomba, F., Bavota, G., Di Penta, M., Oliveto, R., De Lucia, A., Poshyvanyk, D.",An Empirical Investigation into the Nature of Test Smells,2016,2016 31ST IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE),,,,4,15,12,28,10.1145/2970276.2970340,,"[Tufano, Michele; Poshyvanyk, Denys] Coll William & Mary, Williamsburg, VA 23187 USA; [Palomba, Fabio; De Lucia, Andrea] Univ Salerno, Fisciano, SA, Italy; [Bavota, Gabriele] USI, Lugano, Switzerland; [Di Penta, Massimiliano] Univ Sannio, Benevento, BN, Italy; [Oliveto, Rocco] Univ Molise, Campobasso, Italy",,"Test smells have been defined as poorly designed tests and, as reported by recent empirical studies, their presence may negatively affect comprehension and maintenance of test suites. Despite this, there are no available automated tools to support identification and repair of test smells. In this paper, we firstly investigate developers' perception of test smells in a study with 19 participants. The results show that developers generally do not recognize (potentially harmful) test smells, highlighting that automated tools for identifying such smells are much needed. However, to build effective tools, deeper insights into the test smells phenomenon are required. To this aim, we conducted a large-scale empirical investigation aimed at analyzing (i) when test smells occur in source code, (ii) what their survivability is, and (iii) whether their presence is associated with the presence of design problems in production code (code smells). The results indicate that test smells are usually introduced when the corresponding test code is committed in the repository for the first time, and they tend to remain in a system for a long time. Moreover, we found various unexpected relationships between test and code smells. Finally, we show how the results of this study can be used to build effective automated tools for test smell detection and refactoring.",Test Smells; Mining Software Repositories; Software Evolution,CODE SMELLS; ANTIPATTERNS,Test Smells;Mining Software Repositories;Software Evolution;CODE SMELLS;ANTIPATTERNS,,"Lo, D; Apel, S; Khurshid, S","345 E 47TH ST, NEW YORK, NY 10017 USA",31st IEEE/ACM International Conference on Automated Software Engineering (ASE),"Singapore, SINGAPORE","SEP 03-07, 2016",IEEE,1527-1366,978-1-4503-3845-5,,,English,IEEE INT CONF AUTOM,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000390237000004,2-s2.0-84989211424,United States;Italy;Switzerland,No email,Coll William & Mary;Univ Salerno;USI;Univ Sannio;Univ Molise,"Coll William & Mary, United States;Univ Salerno, Italy;USI, Switzerland;Univ Sannio, Italy;Univ Molise, Italy","Tufano, Michele; Palomba, Fabio; Bavota, Gabriele; Di Penta, Massimiliano; Oliveto, Rocco; De Lucia, Andrea; Poshyvanyk, Denys"
"Kim, M., Cai, D.X., Kim, S.",An Empirical Investigation into the Role of API-Level Refactorings during Software Evolution,2011,2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE),,,,151,160,10,51,,,"[Kim, Miryung] Univ Texas Austin, Austin, TX 78712 USA; [Cai, Dongxiang; Kim, Sunghun] Hong Kong Univ Sci & Technol, Hong Kong, Hong Kong, Peoples R China",,"It is widely believed that refactoring improves software quality and programmer productivity by making it easier to maintain and understand software systems. However, the role of refactorings has not been systematically investigated using fine-grained evolution history. We quantitatively and qualitatively studied API-level refactorings and bug fixes in three large open source projects, totaling 26523 revisions of evolution. The study found several surprising results: One, there is an increase in the number of bug fixes after API-level refactorings. Two, the time taken to fix bugs is shorter after API-level refactorings than before. Three, a large number of refactoring revisions include bug fixes at the same time or are related to later bug fix revisions. Four, API-level refactorings occur more frequently before than after major software releases. These results call for re-thinking refactoring's true benefits. Furthermore, frequent floss refactoring mistakes observed in this study call for new software engineering tools to support safe application of refactoring and behavior modifying edits together.",Software evolution; empirical study; refactoring; defects; release cycle,,Software evolution;empirical study;refactoring;defects;release cycle,miryung@ece.utexas.edu; caidx@cse.ust.hk; hunkim@cse.ust.hk,,"345 E 47TH ST, NEW YORK, NY 10017 USA",33rd International Conference on Software Engineering (ICSE),"Honolulu, HI","MAY 21-28, 2011",IEEE,,978-1-4503-0445-0,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000297156400016,2-s2.0-79959907623,United States;China,ece.utexas.edu,Univ Texas Austin;Hong Kong Univ Sci & Technol,"Univ Texas Austin, United States;Hong Kong Univ Sci & Technol, China","Kim, Miryung; Cai, Dongxiang; Kim, Sunghun"
"Peruma A., Mkaouer M.W., Decker M.J., Newman C.D.",An empirical investigation of how and why developers rename identifiers,2018,"IWoR 2018 - Proceedings of the 2nd International Workshop on Refactoring, co-located with ASE 2018",,,,26,33,,2,10.1145/3242163.3242169,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063611361&doi=10.1145%2f3242163.3242169&partnerID=40&md5=c65272c431bebae926e32d2d18b06972,"Rochester Institute of Technology, United States; Bowling Green State University, United States","Peruma, A., Rochester Institute of Technology, United States; Mkaouer, M.W., Rochester Institute of Technology, United States; Decker, M.J., Bowling Green State University, United States; Newman, C.D., Rochester Institute of Technology, United States","Renaming is vital to software maintenance and evolution. Developers rename entities when their original names no longer fit their behavioral role within the program. This may happen if the entity's original name was of poor quality or if the system has evolved such that the original name needs to be updated to reflect some of this evolution. In the end, the reason for the rename ultimately falls under increasing understandability and comprehension. Because comprehension is so important, and identifiers are the primary way developers comprehend code, it is critical to understand empirically how and why identifier names evolve. Armed with an understanding of these two facets of identifier evolution, researchers will be able to train algorithms to recognize, recommend, or even automatically generate high-quality identifier names. We present an empirical study of how method, class and package identifier names evolve to better understand the motives of their evolution. The empirical validation involves a set of 524,113 rename refactorings, performed on 3,795 Java systems. In a nutshell, our findings demonstrate that most rename refactorings narrow the meaning of the identifiers for which they are applied. Further, we analyze commit messages to contextualize these renames. © 2018 ACM.",Natural language processing; Program comprehension; Rename refactoring,Software engineering; Empirical investigation; Empirical studies; Empirical validation; NAtural language processing; Program comprehension; Refactorings; Software maintenance and evolution; Understandability; Natural language processing systems,Natural language processing;Program comprehension;Rename refactoring;Software engineering;Empirical investigation;Empirical studies;Empirical validation;Refactorings;Software maintenance and evolution;Understandability;Natural language processing systems,,Ouni A.Cinneide M.O.Kessentini M.,,,,,"Association for Computing Machinery, Inc",,9781450359740,,,English,"IWoR - Proc. Int. Workshop Refactoring, co-located ASE",Conference Paper,Scopus,,2-s2.0-85063611361,,United States,No email,,,"Peruma A., Mkaouer M.W., Decker M.J., Newman C.D."
"Kaur, S., Kaur, K., Kaur, N.",An Empirical Investigation of Relationship between Software Metrics,2015,2015 SECOND INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING AND COMMUNICATION ENGINEERING ICACCE 2015,,,,639,643,5,0,10.1109/ICACCE.2015.23,,"[Kaur, Sandeep; Kaur, Kanwaljeet; Kaur, Navjot] GIMET, Dept CSE, Amritsar, Punjab, India",,"In this paper, we empirically explore the relationship between existing size and object oriented metrics with four quality measures i.e. abstractness, bug density, method to refactor and dead code over the different versions of an open source software JStock. In order to fulfil our goal, we performed an experiment on by calculating size and OO metrics for different versions of an open source software, analyze them and concluded the behavior over time. Next, we perform Pearson correlation analysis between the chosen metrics and four quality measures because exploring the strength of relationship between these metrics can suggest additional significant understandings than studying them in segregation.",Abstractness; Bug Density; Method to refactor; dead code; Object Oriented Metrics,,Abstractness;Bug Density;Method to refactor;dead code;Object Oriented Metrics,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",2nd IEEE International Conference on Advances in Computing and Communication Engineering (ICACCE),"Tulas Inst, Dehradun, INDIA","MAY 01-02, 2015",IEEE,,978-1-4799-1734-1,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000377080900121,,India,No email,GIMET,"GIMET, India","Kaur, Sandeep; Kaur, Kanwaljeet; Kaur, Navjot"
"Wang Y., Wagner C., Ip R.K.F.",An empirical investigation of the key factors for refactoring success in an industrial context,2009,"15th Americas Conference on Information Systems 2009, AMCIS 2009",8,,,5031,5040,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870512570&partnerID=40&md5=fd9ebc0d669992fb593ad34bba509ca0,"Department of Information System, City University of Hong Kong, Hong Kong","Wang, Y., Department of Information System, City University of Hong Kong, Hong Kong; Wagner, C., Department of Information System, City University of Hong Kong, Hong Kong; Ip, R.K.F., Department of Information System, City University of Hong Kong, Hong Kong","Refactoring is an increasingly practiced method in industrial software development. Stated simply, refactoring is an ongoing software improvement process that simplifies the internal structure of existing software, without changing its external behavior. The purpose is to improve the software and facilitate future maintenance and enhancement. Existing studies on refactoring mainly focus on its technical aspects and thus do not consider the team and human factors that influence its success. To identify the major facilitating factors for the success of refactoring, we interviewed 10 industrial software developers, and combined their responses with a study of the existing literature, formulated a model of refactoring success. The resulting conceptual model comprises both technical and non-technical factors. Technical factors include: level, testing and debugging, and tools, while the non-technical factors include: communication and coordination, support activities, individual capability/skills, and programmer participation. We propose to verify this model empirically through a survey of professional software developers (main body of refactoring practitioners). The survey design is provided.",Empirical software engineering; Human factors; Maintenance; Refactoring; Software development,Conceptual model; Empirical investigation; Empirical Software Engineering; External behavior; Industrial context; Industrial software; Industrial software development; Internal structure; Non-technical factors; Professional software; Refactorings; Survey design; Technical aspects; Technical factors; Testing and debugging; Human engineering; Information systems; Software design; Software engineering; Surveys; Maintenance,Empirical software engineering;Human factors;Maintenance;Refactoring;Software development;Conceptual model;Empirical investigation;External behavior;Industrial context;Industrial software;Industrial software development;Internal structure;Non-technical factors;Professional software;Refactorings;Survey design;Technical aspects;Technical factors;Testing and debugging;Human engineering;Information systems;Software design;Software engineering;Surveys,"Wang, Y.; Department of Information System, City University of Hong KongHong Kong; email: ywang43@student.cityu.edu.hk",,,,,,,,9781615675814,,,English,"Amer. Conf. Inf. Sys., AMCIS",Conference Paper,Scopus,,2-s2.0-84870512570,,Hong Kong,student.cityu.edu.hk,,,"Wang Y., Wagner C., Ip R.K.F."
"Martini, A., Bosch, J.",An Empirically Developed Method to Aid Decisions on Architectural Technical Debt Refactoring: AnaConDebt,2016,2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C),,,,31,40,10,15,10.1145/2889160.2889224,,"[Martini, Antonio; Bosch, Jan] Chalmers Univ Technol, Software Engn Div, Gothenburg, Sweden",,"Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.",Architectural Technical Debt; refactoring; decision making; estimation; method; design research; empirical study,,Architectural Technical Debt;refactoring;decision making;estimation;method;design research;empirical study,antonio.martini@chalmers.se; jan.bosch@chalmers.se,,"345 E 47TH ST, NEW YORK, NY 10017 USA",38th IEEE/ACM International Conference on Software Engineering Companion (ICSE),"Austin, TX","MAY 14-22, 2016",IEEE,,978-1-4503-4205-6,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000402155300007,2-s2.0-85018463409,Sweden,chalmers.se,Chalmers Univ Technol,"Chalmers Univ Technol, Sweden","Martini, Antonio; Bosch, Jan"
"Koc, E., Ersoy, N., Andac, A., Camlidere, Z.S., Cereci, I., Kilic, H.",An Empirical Study About Search-Based Refactoring Using Alternative Multiple and Population-Based Search Techniques,2012,COMPUTER AND INFORMATION SCIENCES II,,,,59,+,3,13,10.1007/978-1-4471-2155-8_7,,"[Koc, Ekin; Ersoy, Nur; Andac, Ali; Camlidere, Zelal Seda; Cereci, Ibrahim; Kilic, Hurevren] Atilim Univ, Dept Comp Engn, Ankara, Turkey",,"Automated maintenance of object-oriented software system designs via refactoring is a performance demanding combinatorial optimization problem. In this study, we made an empirical comparative study to see the performances of alternative search algorithms under. a quality model defined by an aggregated software fitness metric. We handled 20 different refactoring actions that realize searches on design landscape defined by combination of 24 object-oriented software metrics. The investigated algorithms include random, steepest descent, multiple first descent, multiple steepest descent, simulated annealing and artificial bee colony searches. The study is realized by using a tool called A-CMA developed in Java that accepts bytecode compiled Java codes as its input. The empiricial study showed that multiple steepest descent and population-based artificial bee colony algorithms are two most suitable approaches for the efficient solution of the search based refactoring problem.",Search-based software engineering; Combinatorial optimization; Automated refactoring; Software maintenance; Software metrics,OBJECT-ORIENTED DESIGN,Search-based software engineering;Combinatorial optimization;Automated refactoring;Software maintenance;Software metrics;OBJECT-ORIENTED DESIGN,antimon@gmail.com; nersoy88@gmail.com; alyandac@gmail.com; zelalseda@gmail.com; icereci@atilim.edu.tr; hurevren@gmail.com,"Gelenbe, E; Lent, R; Sakellari, G","SWEETAPPLE HOUSE CATTESHALL RD FARNCOMBE, GODALMING GU7 1NH, SURREY, ENGLAND",26th Annual International Symposium on Computer and Information Science,"Royal Soc London, London, ENGLAND","SEP 26-28, 2011",SPRINGER-VERLAG LONDON LTD,,978-1-4471-2154-1,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000398249500007,2-s2.0-84887839407,Turkey,gmail.com,Atilim Univ,"Atilim Univ, Turkey","Koc, Ekin; Ersoy, Nur; Andac, Ali; Camlidere, Zelal Seda; Cereci, Ibrahim; Kilic, Hurevren"
"Ahmed, I., Mannan, U.A., Gopinath, R., Jensen, C.",An Empirical Study of Design Degradation: How Software Projects Get Worse Over Time,2015,2015 ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM),,,,31,40,10,4,,,"[Ahmed, Iftekhar; Mannan, Umme Ayda; Gopinath, Rahul; Jensen, Carlos] Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA",,"Context: Software decay is a key concern for large, long-lived software projects. Systems degrade over time as design and implementation compromises and exceptions pile up. Goal: Quantify design decay and understand how software projects deal with this issue. Method: We conducted an empirical study on the presence and evolution of code smells, used as an indicator of design degradation in 220 open source projects. Results: The best approach to maintain the quality of a project is to spend time reducing both software defects (bugs) and design issues (refactoring). We found that design issues are frequently ignored in favor of fixing defects. We also found that design issues have a higher chance of being fixed in the early stages of a project, and that efforts to correct these stall as projects mature and the code base grows, leading to a build-up of problems. Conclusions: From studying a large set of open source projects, our research suggests that while core contributors tend to fix design issues more often than non-core contributors, there is no difference once the relative quantity of commits is accounted for. We also show that design issues tend to build up over time.",Software Decay; Design Problems; Project History,BAD SMELLS; TAXONOMY,Software Decay;Design Problems;Project History;BAD SMELLS;TAXONOMY,ahmed@eecs.oregonstate.edu; mannanu@eecs.oregonstate.edu; gopinath@eecs.oregonstate.edu; cjensen@eecs.oregonstate.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM),"Beijing, PEOPLES R CHINA","OCT 22-23, 2015",IEEE,1938-6451,978-1-4673-7899-4,,,English,INT SYMP EMP SOFTWAR,Proceedings Paper,WoS,Computer Science,WOS:000376497300004,2-s2.0-84961635294,United States,eecs.oregonstate.edu,Oregon State Univ,"Oregon State Univ, United States","Ahmed, Iftekhar; Mannan, Umme Ayda; Gopinath, Rahul; Jensen, Carlos"
"Nasseri, E., Counsell, S., Shepperd, M.",An empirical study of evolution of inheritance in Java OSS,2008,"ASWEC 2008: 19TH AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS",,,,269,278,10,13,10.1109/ASWEC.2008.78,,"[Nasseri, E.; Counsell, S.; Shepperd, M.] Brunel Univ, Sch Informat Syst Comp & Math, Uxbridge UB8 3PH, Middx, England",,"Previous studies of Object-Oriented (00) software have reported avoidance of the inheritance mechanism and cast doubt on the wisdom of 'deep' inheritance levels. From an evolutionary perspective, the picture is unclear - we still know relatively little about how, over time, changes tend to be applied by developers. Our conjecture is that an inheritance hierarchy will tend to grow 'breadth-wise' rather than 'depth-wise'. This claim is made on the basis that developers will avoid extending depth in favour of breadth because of the inherent complexity of having to understand the functionality of superclasses. Thus the goal of our study is to investigate this empirically. We conduct an empirical study of seven Java Open-Source Systems (OSSs) over a series of releases to observe the nature and location of changes within the inheritance hierarchies. Results showed a strong tendency for classes to be added at levels one and two of the hierarchy (rather than anywhere else). Over 96% of classes added over the course of the versions of all systems were at level I or level 2. The results suggest that changes cluster in the shallow levels of a hierarchy; this is relevant for developers since it indicates where remedial activities such as refactoring should be focused.",,OBJECT-ORIENTED SOFTWARE; MAINTENANCE; SYSTEMS; METRICS,OBJECT-ORIENTED SOFTWARE;MAINTENANCE;SYSTEMS;METRICS,nasseri@brunel.ac.uk; steve.counsell@brunel.ac.uk; shepperd@brunel.ac.uk,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",19th Australian Software Engineering Conference,"Perth, AUSTRALIA","MAR 25-28, 2008",IEEE COMPUTER SOC,,978-0-7695-3100-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000255154800028,2-s2.0-50249182259,United Kingdom,brunel.ac.uk,Brunel Univ,"Brunel Univ, United Kingdom","Nasseri, E.; Counsell, S.; Shepperd, M."
"Cai, D.X., Kim, M.",An Empirical Study of Long-Lived Code Clones,2011,FUNDAMENTAL APPROACHES TO SOFTWARE ENGINEERING,6603,,,432,+,4,23,,,"[Cai, Dongxiang] Hong Kong Univ Sci & Technol, Hong Kong, Hong Kong, Peoples R China; [Kim, Miryung] Univ Texas Austin, Austin, TX 78712 USA",,"Previous research has shown that refactoring code clones as soon as they are formed or discovered is not always feasible or worthwhile to perform, since some clones never change during evolution and some disappear in a short amount of time, while some undergo repetitive similar edits over their long lifetime. Toward a long-term goal of developing a recommendation system that selectively identifies clones to refactor, as a first step, we conducted an empirical investigation into the characteristics of long-lived clones. Our study of 13558 clone genealogies from 7 large open source projects, over the history of 33.25 years in total, found surprising results. The size of a clone, the number of clones in the same group, and the method-level distribution of clones are not strongly correlated with the survival time of clones. However, the number of developers who modified clones and the time since the last addition or removal of a clone to its group are highly correlated with the survival time of clones. This result indicates that the evolutionary characteristics of clones may be a better indicator for refactoring needs than static or spatial characteristics such as LOG, the number of clones in the same group, or the dispersion of clones in a system.",Software evolution; empirical study; code clones; refactoring,SUPPORT,Software evolution;empirical study;code clones;refactoring;SUPPORT,caidx@cse.ust.hk; miryung@ece.utexas.edu,"Giannakopoulou, D; Orejas, F","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",14th European Joint Conferences on Theory and Practice of Software,"Saarbrucken, GERMANY","MAR 26-APR 03, 2011",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-19810-6,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000294649500030,2-s2.0-79953174967,China;United States,cse.ust.hk,Hong Kong Univ Sci & Technol;Univ Texas Austin,"Hong Kong Univ Sci & Technol, China;Univ Texas Austin, United States","Cai, Dongxiang; Kim, Miryung"
"Alomainy, R., Li, W.",An empirical study of messaging systems and migration to service-oriented architecture,2010,ICEME 2010: INTERNATIONAL CONFERENCE ON ENGINEERING AND META-ENGINEERING (POST-CONFERENCE EDITION),,,,157,161,5,0,,,"[Alomainy, Raouf; Li, Wei] Univ Alabama Huntsville, Dept Comp Sci, Huntsville, AL 35899 USA",,"In a heterogeneous network, messaging systems facilitate the exchange of essential information among different system modules. This paper investigates the use of traditional messaging system in conjunction with the service-oriented architecture (SOA) principles to extend the system with minimum refactoring and redesign. The paper investigates in particular the Oracle Advanced Queuing (AQ), a basic component of Enterprise Oracle database software and the use of web services to make the solution SOA-enabled that offers a cost effective solution for an integration framework that provides database features (e.g. persistence and scalability) that are independent of web-service platforms.",database messaging; integrations; web services; service oriented architecture,,database messaging;integrations;web services;service oriented architecture,ralomain@cs.uah.edu; wli@cs.uah.edu,"Baralt, J; Callaos, N; Chu, HW; Ferrer, J; Tremante, A","14269 LORD BARCLAY DR, ORLANDO, FL 32837 USA",International Conference on Engineering and Meta-Engineering,"Orlando, FL","APR 06-09, 2010",INT INST INFORMATICS & SYSTEMICS,,978-1-934272-84-8,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000391415300031,,United States,cs.uah.edu,Univ Alabama Huntsville,"Univ Alabama Huntsville, United States","Alomainy, Raouf; Li, Wei"
"Kim, M., Zimmermann, T., Nagappan, N.",An Empirical Study of RefactoringChallenges and Benefits at Microsoft,2014,IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,40,7,,633,649,17,42,10.1109/TSE.2014.2318734,,"[Kim, Miryung] Univ Texas Austin, Dept Elect & Comp Engn, Austin, TX 78712 USA; [Zimmermann, Thomas; Nagappan, Nachiappan] Microsoft Res Redmond, Res Software Engn RiSE Grp, Redmond, WA USA",,"It is widely believed that refactoring improves software quality and developer productivity. However, few empirical studies quantitatively assess refactoring benefits or investigate developers' perception towards these benefits. This paper presents a field study of refactoring benefits and challenges at Microsoft through three complementary study methods: a survey, semi-structured interviews with professional software engineers, and quantitative analysis of version history data. Our survey finds that the refactoring definition in practice is not confined to a rigorous definition of semantics-preserving code transformations and that developers perceive that refactoring involves substantial cost and risks. We also report on interviews with a designated refactoring team that has led a multiyear, centralized effort on refactoring Windows. The quantitative analysis of Windows 7 version history finds the top 5 percent of preferentially refactored modules experience higher reduction in the number of inter-module dependencies and several complexity measures but increase size more than the bottom 95 percent. This indicates that measuring the impact of refactoring requires multidimensional assessment.",Refactoring; empirical study; software evolution; component dependencies; defects; churn,,Refactoring;empirical study;software evolution;component dependencies;defects;churn,,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0098-5589,,,,English,IEEE T SOFTWARE ENG,Article,WoS,Computer Science; Engineering,WOS:000340191000001,2-s2.0-84904311708,United States,No email,Univ Texas Austin;Microsoft Res Redmond,"Univ Texas Austin, United States;Microsoft Res Redmond, United States","Kim, Miryung; Zimmermann, Thomas; Nagappan, Nachiappan"
"Dersten, S., Axelsson, J., Froberg, J.",An empirical study of refactoring decisions in embedded software and systems,2012,CONFERENCE ON SYSTEMS ENGINEERING RESEARCH,8,,,279,284,6,2,10.1016/j.procs.2012.01.058,,"[Dersten, Sara; Axelsson, Jakob; Froberg, Joakim] Malardalen Univ, SE-72123 Vasteras, Sweden",,"This paper describes an empirical study of decision-making when changing the architecture in embedded systems. A refactoring of the system architecture often gives effects on both system properties and functions in the company organization, and there is a lack of efficient analysis methods for decision support in the system architecture process. This study investigates the information needed to make a decision about a system refactoring. Scenario-based interviews have been conducted with managers and system architects from companies developing embedded systems. The results show that the companies investigate similar issues regardless of their industry sector. The most wanted information prior to a decision is also presented. (C) 2012 Published by Elsevier Ltd. Selection",System refactoring; system evolution; system architecture; software architecture; decision-making; empirical study,,System refactoring;system evolution;system architecture;software architecture;decision-making;empirical study,sara.dersten.2@volvo.com,"Dagli, CH","SARA BURGERHARTSTRAAT 25, PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",10th Annual Conference on Systems Engineering Research (CSER),"St Louis, MO","MAR 19-22, 2012",ELSEVIER SCIENCE BV,1877-0509,,,,English,PROCEDIA COMPUT SCI,Proceedings Paper,WoS,Computer Science; Engineering; Operations Research & Management Science,WOS:000306293000040,2-s2.0-84896998728,Sweden,volvo.com,Malardalen Univ,"Malardalen Univ, Sweden","Dersten, Sara; Axelsson, Jakob; Froberg, Joakim"
"Murgia A., Tonelli R., Counsell S., Concas G., Marchesi M.",An empirical study of refactoring in the context of FanIn and FanOut coupling,2011,"Proceedings - Working Conference on Reverse Engineering, WCRE",,, 6079863,372,376,,4,10.1109/WCRE.2011.52,https://www.scopus.com/inward/record.uri?eid=2-s2.0-83455213205&doi=10.1109%2fWCRE.2011.52&partnerID=40&md5=6670415bff05f7949cef1f400035329a,"Dep. of Electrical and Electronic Engineering, University of Cagliari, Italy; Dep. of Information Systems and Computing, Brunel University, London, United Kingdom","Murgia, A., Dep. of Electrical and Electronic Engineering, University of Cagliari, Italy; Tonelli, R., Dep. of Electrical and Electronic Engineering, University of Cagliari, Italy; Counsell, S., Dep. of Information Systems and Computing, Brunel University, London, United Kingdom; Concas, G., Dep. of Electrical and Electronic Engineering, University of Cagliari, Italy; Marchesi, M., Dep. of Electrical and Electronic Engineering, University of Cagliari, Italy","The aim of refactoring is to reduce software complexity and hence simplify the maintenance process. In this paper, we explore the impact of refactorings on ""FanIn"" and ""FanOut"" coupling metrics through extraction of refactoring data from multiple releases of five Java open-source systems, We first considered how a single refactoring modified these metric values, what happened when refactorings had been applied to a single class in unison and finally, what influence a set of refactorings had on the shape of Fan In and Fan Out distributions. Results indicated that, on average, refactored classes tended to have larger FanIn and Fan Out values when compared with non-refactored classes. Where evidence of multiple (different) refactorings applied to the same class was found, the net effect (in terms of FanIn and Fan Out coupling values) was negligible. © 2011 IEEE.",coupling; Refactoring; software metric distribution,Empirical studies; Fan Out; Maintenance process; Metric values; Net effect; Open source system; Refactorings; Software complexity; software metric distribution; Couplings; Reverse engineering; Computer software maintenance,coupling;Refactoring;software metric distribution;Empirical studies;Fan Out;Maintenance process;Metric values;Net effect;Open source system;Refactorings;Software complexity;Couplings;Reverse engineering;Computer software maintenance,"Murgia, A.; Dep. of Electrical and Electronic Engineering, University of CagliariItaly; email: alessandro.murgia@diee.unica.it",,,,,,,10951350,9780769545820,,,English,Proc. Working Conf. Rev. Eng. WCRE,Conference Paper,Scopus,,2-s2.0-83455213205,,Italy;United Kingdom,diee.unica.it,,,"Murgia A., Tonelli R., Counsell S., Concas G., Marchesi M."
"Alshayeb, M., Li, W., Graves, S.","An empirical study of refactoring, new design, and error-fix efforts in extreme programming",2001,"WORLD MULTICONFERENCE ON SYSTEMICS, CYBERNETICS AND INFORMATICS, VOL 1, PROCEEDINGS: INFORMATION SYSTEMS DEVELOPMENT",,,,323,325,3,1,,,"Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA",,"Extreme Programming (XP) was introduced as a new process model, which has three main activities in each XP iteration cycle: new design, error-fix, and refactoring. In an empirical study on two Java systems developed using an XP-like process, we found that new design seems to dominate the development effort throughout all iteration cycles. We also found that the evolutionary trends of all three activities agree with exceptions.",empirical study; extreme programming; software design evolution,,empirical study;extreme programming;software design evolution,,"Callaos, N; DaSilva, IN; Molero, J","14269 LORD BARCLAY DR, ORLANDO, FL 32837 USA","5th World Multi-Conference on Systemics, Cybernetics and Informatics (SCI2001)/7th International Conference on Information Systems Analysis and Synthesis (ISAS 2001)","ORLANDO, FL","JUL 22-25, 2001",INT INST INFORMATICS & SYSTEMICS,,980-07-7541-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000175785900058,,United States,No email,Dept Comp Sci,"Dept Comp Sci, United States","Alshayeb, M; Li, W; Graves, S"
"Alshayeb, M., Li, W.",An empirical study of relationships among extreme programming engineering activities,2006,INFORMATION AND SOFTWARE TECHNOLOGY,48,11,,1068,1072,5,6,10.1016/j.infsof.2006.01.005,,"King Fahd Univ Petr & Minerals, Dept Informat & Comp Sci, Dhahran 31261, Saudi Arabia; Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA",,"Extreme programming (XP) is an agile software process that promotes early and quick production of working code. In this paper, we investigated the relationship among three XP engineering activities: new design, refactoring, and error fix. We found that the more the new design performed to the system the less refactoring and error fix were performed. However, the refactoring and error fix efforts did not seem to be related. We also found that the error fix effort is related to number of days spent on each story, while new design is not. The relationship between the refactoring effort and number of days spent on each story was not conclusive. (C) 2006 Elsevier B.V. All rights reserved.",extreme programming; design evolution; extreme programming engineering activities; empirical study,,extreme programming;design evolution;extreme programming engineering activities;empirical study,mohammad@alshayeb.com; wli@cs.uah.edu,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000241716400007,2-s2.0-33749253118,Saudi Arabia;United States,alshayeb.com,Dept Informat & Comp Sci;Dept Comp Sci,"Dept Informat & Comp Sci, Saudi Arabia;Dept Comp Sci, United States","Alshayeb, Mohammad; Li, Wei"
"Mubarak, A., Counsell, S., Hierons, R.M.","An Empirical Study of ""Removed"" Classes in Java Open-Source Systems",2010,ADVANCES TECHNIQUES IN COMPUTING SCIENCES AND SOFTWARE ENGINEERING,,,,99,104,6,0,10.1007/978-90-481-3660-5_17,,"[Mubarak, Asma; Counsell, Steve; Hierons, Robert M.] Brunel Univ, Dept Informat Syst & Comp, Uxbridge UB8 3PH, Middx, England",,"Coupling is an omni-present and necessary feature of OO systems; ideally, classes with excessive coupling should be either refactored and/or removed from the system. However, a problem that immediately arises is the practical difficulty of effecting the removal of such classes due to the many coupling dependencies they have; it is often easier to leave classes where they are and 'work around' the problem. In this paper, we describe empirical coupling and size data of classes removed from multiple versions of four open-source systems. We investigated three related, research questions. First, does the amount of coupling influence the choice of removed class? Second, does class size play a role in that choice? Finally, is there a relationship between the frequency with which a class is changed and its point of removal from a system? Results showed a strong tendency for classes with low 'fan-in' and 'fan-out' to be candidates for removal. Evidence was also found of class types with high Imported package and external call functionality being removed; finally, size, in terms of methods and lines of code did not seem to be a contributing factor to class removal. The research addresses an area that is often overlooked in the study of evolving systems, notably the characteristics and features of classes that disappear from a system.",,,,asma.mubarak@brunel.ac.uk; steve.counsell@brunel.ac.uk; rob.hierons@brunel.ac.uk,"Elleithy, K","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY","International Conference on Systems, Computing Sciences and Software Engineering","Bridgeport, CT",2008,SPRINGER-VERLAG BERLIN,,978-90-481-3659-9,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000281650200017,,United Kingdom,brunel.ac.uk,Brunel Univ,"Brunel Univ, United Kingdom","Mubarak, Asma; Counsell, Steve; Hierons, Robert M."
"Concas, G., Marchesi, M., DestefanisO., G., Tonelli, R.",AN EMPIRICAL STUDY OF SOFTWARE METRICS FOR ASSESSING THE PHASES OF AN AGILE PROJECT,2012,INTERNATIONAL JOURNAL OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING,22,4,,525,548,24,15,10.1142/S0218194012500131,,"[Concas, Giulio; Marchesi, Michele; DestefanisO, Giuseppe; Tonelli, Roberto] Univ Cagliari, Dept Elect & Elect Engn, I-09123 Cagliari, Italy",,"We present an analysis of the evolution of a Web application project developed with object-oriented technology and an agile process. During the development we systematically performed measurements on the source code, using software metrics that have been proved to be correlated with software quality, such as the Chidamber and Kemerer suite and Lines of Code metrics. We also computed metrics derived from the class dependency graph, including metrics derived from Social Network Analysis. The application development evolved through phases, characterized by a different level of adoption of some key agile practices - namely pair programming, test-based development and refactoring. The evolution of the metrics of the system, and their behavior related to the agile practices adoption level, is presented and discussed. We show that, in the reported case study, a few metrics are enough to characterize with high significance the various phases of the project. Consequently, software quality, as measured using these metrics, seems directly related to agile practices adoption.","Software metrics; software evolution; agile methodologies; object-oriented metrics, SNA metrics applied to software",OBJECT-ORIENTED METRICS; TEST-DRIVEN DEVELOPMENT; VALIDATION; IMPROVE,"Software metrics;software evolution;agile methodologies;object-oriented metrics, SNA metrics applied to software;OBJECT-ORIENTED METRICS;TEST-DRIVEN DEVELOPMENT;VALIDATION;IMPROVE",concas@diee.unica.it; marchesi@diee.unica.it; giuseppe.destefanis@diee.unica.it; roberto.tonelli@diee.unica.it,,"5 TOH TUCK LINK, SINGAPORE 596224, SINGAPORE",,,,WORLD SCIENTIFIC PUBL CO PTE LTD,0218-1940,,,,English,INT J SOFTW ENG KNOW,Article,WoS,Computer Science; Engineering,WOS:000307521500003,2-s2.0-84865385132,Italy,diee.unica.it,Univ Cagliari,"Univ Cagliari, Italy","Concas, Giulio; Marchesi, Michele; DestefanisO, Giuseppe; Tonelli, Roberto"
"Park, J., Kim, M., Bae, D.H.",An empirical study of supplementary patches in open source projects,2017,EMPIRICAL SOFTWARE ENGINEERING,22,1,,436,473,38,4,10.1007/s10664-016-9432-x,,"[Park, Jihun; Bae, Doo-Hwan] Korea Adv Inst Sci & Technol, Sch Comp, Daejeon, South Korea; [Kim, Miryung] Univ Calif Los Angeles, Dept Comp Sci, Los Angeles, CA 90024 USA",,"Developers occasionally make more than one patch to fix a bug. The related patches sometimes are intentionally separated, but unintended omission errors require supplementary patches. Several change recommendation systems have been suggested based on clone analysis, structural dependency, and historical change coupling in order to reduce or prevent incomplete patches. However, very few studies have examined the reason that incomplete patches occur and how real-world omission errors could be reduced. This paper systematically studies a group of bugs that were fixed more than once in open source projects in order to understand the characteristics of incomplete patches. Our study on Eclipse JDT core, Eclipse SWT, Mozilla, and Equinox p2 showed that a significant portion of the resolved bugs require more than one attempt to fix. Compared to single-fix bugs, the multi-fix bugs did not have a lower quality of bug reports, but more attribute changes (i.e., cc'ed developers or title) were made to the multi-fix bugs than to the single-fix bugs. Multi-fix bugs are more likely to have high severity levels than single-fix bugs. Hence, more developers have participated in discussions about multi-fix bugs compared to single-fix bugs. Multi-fix bugs take more time to resolve than single-fix bugs do. Incomplete patches are longer and more scattered, and they are related to more files than regular patches are. Our manual inspection showed that the causes of incomplete patches were diverse, including missed porting updates, incorrect handling of conditional statements, and incomplete refactoring. Our investigation showed that only 7 % to 17 % of supplementary patches had content similar to their initial patches, which implies that supplementary patch locations cannot be predicted by code clone analysis alone. Furthermore, 16 % to 46 % of supplementary patches were beyond the scope of the immediate structural dependency of their initial patch locations. Historical co-change patterns also showed low precision in predicting supplementary patch locations. Code clones, structural dependencies, and historical co-change analyses predicted different supplementary patch locations, and there was little overlap between them. Combining these analyses did not cover all supplementary patch locations. The present study investigates the characteristics of incomplete patches and multi-fix bugs, which have not been systematically examined in previous research. We reveal that predicting supplementary patch is a difficult problem that existing change recommendation approaches could not cover. New type of approaches should be developed and validated on a supplementary patch data set, which developers failed to make the complete patches at once in practice.",Software evolution; Empirical study; Patches; Bug fixes,MINING VERSION HISTORIES; CLONE DETECTION; CODE,Software evolution;Empirical study;Patches;Bug fixes;MINING VERSION HISTORIES;CLONE DETECTION;CODE,jhpark@se.kaist.ac.kr; miryung@cs.ucla.edu; bae@se.kaist.ac.kr,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",,,,SPRINGER,1382-3256,,,,English,EMPIR SOFTW ENG,Article,WoS,Computer Science,WOS:000392378400012,2-s2.0-84966430205,South Korea;United States,se.kaist.ac.kr,Korea Adv Inst Sci & Technol;Univ Calif Los Angeles,"Korea Adv Inst Sci & Technol, South Korea;Univ Calif Los Angeles, United States","Park, Jihun; Kim, Miryung; Bae, Doo-Hwan"
"Li, W., Shatnawi, R.",An empirical study of the bad smells and class error probability in the post-release object-oriented system evolution,2007,JOURNAL OF SYSTEMS AND SOFTWARE,80,7,,1120,1128,9,109,10.1016/j.jss.2006.10.018,,"Univ Alabama, Dept Comp Sci, Huntsville, AL 35899 USA",,"Bad smells are used as a means to identify problematic classes in object-oriented systems for refactoring. The belief that the bad smells are linked with problematic classes is largely based on previous metric research results. Although there is a plethora of empirical studies linking software metrics to errors and error proneness of classes in object-oriented systems, the link between the bad smells and class error probability in the evolution of object-oriented systems after the systems are released has not been explored. There has been no empirical evidence linking the bad smells with class error probability so far. This paper presents the results from an empirical study that investigated the relationship between the bad smells and class error probability in three error-severity levels in an industrial-strength open source system. Our research, which was conducted in the context of the post-release system evolution process, showed that some bad smells were positively associated with the class error probability in the three error-severity levels. This finding supports the use of bad smells as a systematic method to identify and refactor problematic classes in this specific context. (C) 2006 Elsevier Inc. All rights reserved.",object-oriented design; bad smells; software metrics; design evolution; open source software; empirical study,SOFTWARE SYSTEM; METRICS; DESIGN; VALIDATION; QUALITY,object-oriented design;bad smells;software metrics;design evolution;open source software;empirical study;SOFTWARE SYSTEM;METRICS;DESIGN;VALIDATION;QUALITY,wli@cs.uah.edu; rshatnaw@cs.uah.edu,,"360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA",,,,ELSEVIER SCIENCE INC,0164-1212,,,,English,J SYST SOFTWARE,Article,WoS,Computer Science,WOS:000247453800018,2-s2.0-34248563867,United States,cs.uah.edu,Dept Comp Sci,"Dept Comp Sci, United States","Li, Wei; Shatnawi, Raed"
"Capiluppi, A., Fernandez-Ramil, J., Higman, J., Sharp, H.C., Smith, N.",An empirical study of the evolution of an agile-developed software system,2007,"ICSE 2007: 29TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, PROCEEDINGS",,,,511,+,3,23,,,"[Capiluppi, A.] Univ Lincoln, Lincoln, England; [Fernandez-Ramil, J.; Sharp, H. C.; Smith, N.] Open Univ, Chittagong, Bangladesh; [Higman, J.] Independent Agile Coach, London, England",,"We have analyzed evolution patterns over two and a half years for a system developed using eXtreme Programming. We find that the system shows a smooth Pattern of growth overall, that (McCabe) code complexity is low, and that the relative amount Of complexity control work (e.g. refactoring) is higher than in other systems we have studied. To interpret these results, we have drawn on qualitative data including the results of an observational study, records of progress and productivity, and comments on our findings from team members.",,,,acapiluppi@lincoln.ac.uk; j.f.ramil@open.ac.uk; jhigman@pobox.com; h.c.sharp@open.ac.uk; n.smith@open.ac.uk,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",29th International Conference on Software Engineering (ICSE 2007),"Minneapolis, MN","MAY 20-26, 2007",IEEE COMPUTER SOC,0270-5257,978-0-7695-2828-1,,,English,PROC INT CONF SOFTW,Proceedings Paper,WoS,Computer Science,WOS:000247063000050,2-s2.0-34548730226,United Kingdom;Bangladesh,lincoln.ac.uk,Univ Lincoln;Open Univ;Independent Agile Coach,"Univ Lincoln, United Kingdom;Open Univ, Bangladesh;Independent Agile Coach, United Kingdom","Capiluppi, A.; Fernandez-Ramil, J.; Higman, J.; Sharp, H. C.; Smith, N."
"Correa, A., Werner, C., Barros, M.",An empirical study of the impact of OCL smells and refactorings on the understandability of OCL specifications,2007,"MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS, PROCEEDINGS",4735,,,76,+,3,14,,,"[Correa, Alexandre; Werner, Claudia] Univ Fed Rio de Janeiro, Dept Comp Sci, COPPE, CP 68511, BR-21945970 Rio De Janeiro, Brazil; [Barros, Marcio] Univ Fed Rio de Janeiro, Dept Comp Sci, UNIRIOTEC, BR-22290240 Rio De Janeiro, Brazil",,"The Object Constraint Language (OCL) is a OMG standard that plays an important role in the elaboration of precise models. However, it is not hard to find models and metamodels containing overly complex OCL expressions. Refactoring is a technique that can be used in this context since its goal is to reduce complexity by incrementally improving the internal software quality. Indeed several refactorings have already been proposed to improve the quality of OCL expressions. This paper presents the results of an empirical study that investigates the impact of poor OCL constructs, also known as OCL Smells, and OCL refactorings on the understandability of OCL expressions. Current results show that most refactorings significantly improve the understandability of OCL specifications.",,,,alexcorr@cos.ufrj.br; werner@cos.ufrj.br; marcio.barros@uniriotec.br,"Engels, G; Opdyke, B; Schmidt, DC; Weil, F","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",10th International Conference on Model Driven Engineering Languages and Systems,"Nashville, TN","SEP 30-OCT 05, 2007",SPRINGER-VERLAG BERLIN,0302-9743,978-3-540-75208-0,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000250337600006,2-s2.0-38049047965,Brazil,cos.ufrj.br,Univ Fed Rio de Janeiro,"Univ Fed Rio de Janeiro, Brazil","Correa, Alexandre; Werner, Claudia; Barros, Marcio"
"Hecht, G., Moha, N., Rouvoy, R.",An Empirical Study of the Performance Impacts of Android Code Smells,2016,2016 IEEE/ACM INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT 2016),,,,59,69,11,16,10.1145/2897073.2897100,,"[Hecht, Geoffrey; Rouvoy, Romain] Univ Lille, Inria, Villeneuve Dascq, France; [Hecht, Geoffrey; Moha, Naouel] Univ Quebec, Montreal, PQ, Canada",,"Android code smells are had implementation practices within Android applications (or apps) that may lead to poor software quality, in particular in terms of performance. Yet, performance is a main software quality concern in the development of mobile apps. Correcting Android code smells is thus an important activity to increase the performance of mobile apps and to provide the best experience to mobile end-users while considering, the limited constraints of mobile. devices (e.g., CPU, memory, battery). however, no empirical study has assessed the positive performance impacts of correcting mobile code smells. In this paper, we therefore conduct ani empirical study focusing on the individual and combined performance impacts of three Android performance code smells (namely, Internal Getter/Setter, Member Ignoring Method, and IlashMap Usage) on two open source Android apps. To perform this study, we use the PAPRIKA toolkit to detect these three code smells in the analyzed apps, and we derive four versions of the apps by correcting each detected smell independently, and all of them. Then, we evaluate the performance of each version on;1 common user scenario test. hi particular, we evaluate the UI and memory performance using the following metrics: frame dine, number of delayed frames, memory usage, and number of garbage collection calls. Our results show that correcting these Android code smells effectively improve the UI and memory performance. In particular, we observe an improvement up to 12.4% on UI metrics when correcting Member Ignoring Method and up to 3.6% on memory-related metrics when correcting the three Android code smells. We believe that developers can benefit from these results to guide their refactoring, and thus improve the quality of their mobile apps.",Android; code smells; metrics; mobile computing; performance,,Android;code smells;metrics;mobile computing;performance,geoffrey.hecht@inria.fr; moha.naouel@uqam.ca; romain.rouvoy@inria.fr,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE/ACM International Conference on Mobile Software Engineering and Systems (MOBILESoft),"Austin, TX","MAY 16-17, 2016",IEEE,,978-1-4503-4178-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000398537300019,2-s2.0-84983535038,France;Canada,inria.fr,Univ Lille;Univ Quebec,"Univ Lille, France;Univ Quebec, Canada","Hecht, Geoffrey; Moha, Naouel; Rouvoy, Romain"
"Mostafa, M.J.I.",An Empirical Study on Clone Evolution by Analyzing Clone Lifetime,2019,2019 IEEE 13TH INTERNATIONAL WORKSHOP ON SOFTWARE CLONES (IWSC '19),,,,20,26,7,0,,,"[Mostafa, Md. Jubair Ibna] Univ Dhaka, Inst Informat Technol, Dhaka, Bangladesh",,"The existence of code clones has several negative impacts on software maintenance which is why vast amount of research exists in the literature to characterize clone evolution. Most of those focused on clone genealogy, and clone changeness (consistent and inconsistent changes). However, analyzing clone evolution with respect to clone location and clone lifetime requires more attention to better characterize clone evolution. In this research, an empirical study has been performed on clone evolution by considering clone location (i.e., Inter-File and Intra-File) and clone lifetime. The study has been performed on four open source software covering 12 to 66 number of versions. In the study, it has been found that, (i) Intra-File clones occurred in a repository more than Inter-File clones, which infers that developers tend to clone code in the same file than different files and (ii) Intra-File clones are more volatile than Inter-File clones, which infers that developers like to refactor or change clones of the same file more than clones spanning different files. These observations help to conclude which clones should get more attention during clone maintenance tasks like refactoring.",Code Clone Evolution; Clone Lifetime; Software Maintenance,,Code Clone Evolution;Clone Lifetime;Software Maintenance,bsse0614@iit.du.ac.bd,"Choi, E; Hou, D","345 E 47TH ST, NEW YORK, NY 10017 USA",13th IEEE International Workshop on Software Clones (IWSC),"Hangzhou, PEOPLES R CHINA","FEB 24, 2019",IEEE,2329-0595,978-1-7281-1805-5,,,English,INT WORKS SOFTW CLON,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000467274600004,2-s2.0-85063967922,Bangladesh,iit.du.ac.bd,Univ Dhaka,"Univ Dhaka, Bangladesh","Mostafa, Md. Jubair Ibna"
"Jain S., Saha A.",An empirical study on research and developmental opportunities in refactoring practices,2019,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",2019-July,,,313,318,,0,10.18293/SEKE2019-038,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071365484&doi=10.18293%2fSEKE2019-038&partnerID=40&md5=a70cd38be3bbf3cbcafce266c408c0e0,"University School of Information, Communication and Technology, GGS Indraprastha University, Sector 16 C, Dwarka, Delhi, India","Jain, S., University School of Information, Communication and Technology, GGS Indraprastha University, Sector 16 C, Dwarka, Delhi, India; Saha, A., University School of Information, Communication and Technology, GGS Indraprastha University, Sector 16 C, Dwarka, Delhi, India","Maintaining large complex software is one of the major challenges faced by today's software industry. Refactoring is one way to do so. It is the process of changing internal structure of project code or software design without altering functionality. It improves software quality and reduces software entropy. This paper presents the preliminary results of an explanatory survey targeted at investigating refactoring practices by IT professionals. 221 participants helped to reveal important facts about refactoring risks, benefits, limitations of tools, and how a team manages consistency between different artefacts while practising refactoring. Findings reveal that refactoring tools are under-used as they have availability, usability and trust issues. An automated system is the need of the hour to manage change consistencies, visualizing code structures, detecting code, and design smells, and performing refactorings. This study will enable researchers and developers to understand their role in a better way as prevailing issues with current state-of-art are exposed and challenges are reported. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.",Code smells; Em pirical study; Refactoring; Refactoring tools; Survey,Automation; Codes (symbols); Computer software selection and evaluation; Knowledge engineering; Odors; Surveying; Surveys; Code smell; Em pirical study; Empirical studies; Internal structure; Prevailing issues; Refactoring tools; Refactorings; Software entropies; Software design,Code smells;Em pirical study;Refactoring;Refactoring tools;Survey;Automation;Codes (symbols);Computer software selection and evaluation;Knowledge engineering;Odors;Surveying;Surveys;Code smell;Empirical studies;Internal structure;Prevailing issues;Refactorings;Software entropies;Software design,,,,,,,Knowledge Systems Institute Graduate School,23259000,1891706489,,,English,"Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,Scopus,,2-s2.0-85071365484,,India,No email,,,"Jain S., Saha A."
"Udagawa, Y.",An Empirical Study on Retrieving Structural Clones Using Sequence Pattern Mining Algorithms,2014,16TH INTERNATIONAL CONFERENCE ON INFORMATION INTEGRATION AND WEB-BASED APPLICATIONS & SERVICES (IIWAS 2014),,,,270,276,7,0,,,"[Udagawa, Yoshihisa] Tokyo Polytech Univ, Fac Engn, 1583 Iiyama, Atsugi, Kanagawa, Japan",,"Many clone detection techniques focus on fragments of duplicated code, i.e., simple clones. Structural clones are simple clones within a syntactic boundary that are good candidates for refactoring. In this paper, a new approach for detection of structural clones in source code is presented. The proposed approach is parse-tree-based and is enhanced by frequent subsequence mining. It comprises three stages: preprocessing, mining frequent statement sequences, and fine-matching for structural clones using a modified longest common subsequence (LCS) algorithm. The lengths of control statements in a programming language and method identifiers differ; thus, a conventional LCS algorithm does not return the expected length of matched identifiers. We propose an encoding algorithm for control statements and method identifiers. Retrieval experiments were conducted using the Java SWING source code. The results show that the proposed data mining algorithm detects clones comprising 51 extracted statements. Our modified LCS algorithm retrieves a number of structural clones with arbitrary statement gaps.",Structural clone; Java source code; Control statement; Method identifier; Frequent subsequence mining,,Structural clone;Java source code;Control statement;Method identifier;Frequent subsequence mining,udagawa@cs.t-kougei.ac.jp,"IndrawanSantiago, M; Steinbauer, M; Nguyen, HQ; Tjoa, AM; Khalil, I; AnderstKotsis, G","1515 BROADWAY, NEW YORK, NY 10036-9998 USA",16th International Conference on Information Integration and Web-Based Applications and Services (iiWAS),"Hanoi, VIETNAM","DEC 04-06, 2014",ASSOC COMPUTING MACHINERY,,978-1-4503-3001-5,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000382567000043,,Japan,cs.t-kougei.ac.jp,Tokyo Polytech Univ,"Tokyo Polytech Univ, Japan","Udagawa, Yoshihisa"
"Nguyen T.L., Fish A., Song M.",An Empirical Study on Similar Changes in Evolving Software,2018,IEEE International Conference on Electro Information Technology,2018-May,, 8500302,560,563,,0,10.1109/EIT.2018.8500302,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85057132876&doi=10.1109%2fEIT.2018.8500302&partnerID=40&md5=87e6e8c89ce0aa2738a1f6855790096b,"Department of Computer Science, University of Nebraska at Omaha, Omaha, NE, United States","Nguyen, T.L., Department of Computer Science, University of Nebraska at Omaha, Omaha, NE, United States; Fish, A., Department of Computer Science, University of Nebraska at Omaha, Omaha, NE, United States; Song, M., Department of Computer Science, University of Nebraska at Omaha, Omaha, NE, United States","Oftentimes, refactoring can eliminate problems of code clones, however, that is not always the case as refactoring does not always work due to the limitation of the Java Programming language. There have been numerous studies which focus on the evolution of code clones including their impacts on software systems, their lifetimes, and their transformations. Yet, some of code clone's properties still remain a mystery. In this study, we focus on how clone groups evolve from one version to the next by manually inspecting the similar changes from clone groups in the older version and comparing it with clone groups in the newer version. We will also be looking for any special relationship between the similar changes clone groups and projects growth. © 2018 IEEE.",Clone group; Code clone; Similar changes,Codes (symbols); Computer programming; Code clone; Empirical studies; Refactorings; Similar changes; Software systems; Cloning,Clone group;Code clone;Similar changes;Codes (symbols);Computer programming;Empirical studies;Refactorings;Software systems;Cloning,,,,,,,IEEE Computer Society,21540357,9781538653982,,,English,IEEE Int. Conf. Electro Inform. Technol.,Conference Paper,Scopus,,2-s2.0-85057132876,,United States,No email,,,"Nguyen T.L., Fish A., Song M."
"Khrishe, Y., Alshayeb, M.",An Empirical Study on the Effect of the Order of Applying Software Refactoring,2016,2016 7TH INTERNATIONAL CONFERENCE ON COMPUTER SCIENCE AND INFORMATION TECHNOLOGY (CSIT),,,,,,4,1,,,"[Khrishe, Yahya; Alshayeb, Mohammad] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia",,"Refactoring has been widely used to improve software design. Refactoring is applied when a bad smell is detected. Several bad smells might be present in the code. In this paper, we conduct an empirical study to find if the order of applying refactoring has any impact on the quality of the final code. We run six experiments by applying three refactoring methods in different orders and evaluate the quality of the code using software metrics at the end of each refactoring sequence. Our experiments results show that that applying refactoring in different order provides different impact on the final code.","refactoring; bad smells; empirical study; refactoring, code quality",,"refactoring;bad smells;empirical study;refactoring, code quality",g201306450@kfupm.edu.sa; alshayeb@kfupm.edu.sa,,"345 E 47TH ST, NEW YORK, NY 10017 USA",7th International Conference on Computer Science and Information Technology (CSIT),"Amman, JORDAN","JUL 13-14, 2016",IEEE,2381-3458,978-1-4673-8913-6,,,English,INT CONF COMP SCI,Proceedings Paper,WoS,Computer Science,WOS:000390458000024,2-s2.0-84987596934,Saudi Arabia,kfupm.edu.sa,King Fahd Univ Petr & Minerals,"King Fahd Univ Petr & Minerals, Saudi Arabia","Khrishe, Yahya; Alshayeb, Mohammad"
"Oliveira J., Viggiato M., Santos M., Figueiredo E., Marques-Neto H.",An empirical study on the impact of android code smells on resource usage,2018,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",2018-July,,,314,319,,0,10.18293/SEKE2018-157,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056839301&doi=10.18293%2fSEKE2018-157&partnerID=40&md5=8822f5556d206c977080599d910c09a5,"1Department of Computer Science, Pontifical Catholic University of Minas Gerais (PUC Minas), Brazil; Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil","Oliveira, J., 1Department of Computer Science, Pontifical Catholic University of Minas Gerais (PUC Minas), Brazil; Viggiato, M., Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Santos, M., 1Department of Computer Science, Pontifical Catholic University of Minas Gerais (PUC Minas), Brazil; Figueiredo, E., Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Marques-Neto, H., 1Department of Computer Science, Pontifical Catholic University of Minas Gerais (PUC Minas), Brazil","Code smells are symptoms that something may be wrong with the app. Aiming at removing code smells and improving the maintainability and performance of the app, we may apply the refactoring technique, which could reduce hardware resource use, such as CPU and memory. However, a few studies have evaluated the impacts of the refactoring in Android. This paper presents a study to assess the effects of smartphone resource use caused by refactoring of 3 classic code smells: God Class, God Method, and Feature Envy. To this purpose, we selected 9 apps from GitHub. The results show that refactoring used in desktop software may not be appropriate for Android apps. For example, the refactoring of God Method had increased CPU consumption by more than 47%, while the refactoring of the 3 code smells reduced memory consumption in average 6.51%, 8.4%, and 6.37%, respectively, in one app. Our results can support the community in conducting research and future implementation of new tools. Also, it guides app developers in refactoring and thus improving the quality of their apps. © 2018 Universitat zu Koln. All rights reserved.",Android Smells; Code Smells; Consumption of Smartphone Resources,Codes (symbols); Knowledge engineering; Natural resources management; Odors; Smartphones; Android Smells; Code smell; Desktop software; Empirical studies; Hardware resources; Reduced memory; Resource usage; Resource use; Android (operating system),Android Smells;Code Smells;Consumption of Smartphone Resources;Codes (symbols);Knowledge engineering;Natural resources management;Odors;Smartphones;Code smell;Desktop software;Empirical studies;Hardware resources;Reduced memory;Resource usage;Resource use;Android (operating system),,,,,,,Knowledge Systems Institute Graduate School,23259000,1891706446,,,English,"Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,Scopus,,2-s2.0-85056839301,,Brazil,No email,,,"Oliveira J., Viggiato M., Santos M., Figueiredo E., Marques-Neto H."
"Kula, R.G., Ouni, A., German, D.M., Inoue, K.",An empirical study on the impact of refactoring activities on evolving client-used APIs,2018,INFORMATION AND SOFTWARE TECHNOLOGY,93,,,186,199,14,4,10.1016/j.infsof.2017.09.007,,"[Kula, Raula Gaikovina; Inoue, Katsuro] Osaka Univ, Suita, Osaka, Japan; [Kula, Raula Gaikovina] Nara Inst Sci & Technol, Ikoma, Japan; [German, Daniel M.] Univ Victoria, Victoria, BC, Canada; [Ouni, Ali] Ecole Technol Super Montreal, Montreal, PQ, Canada",,"Context Refactoring is recognized as an effective practice to maintain evolving software systems. For software libraries, we study how library developers refactor their Application Programming Interfaces (APIs), especially when it impacts client users by breaking an API of the library. Objective: Our work aims to understand how clients that use a library API are affected by refactoring activities. We target popular libraries that potentially impact more library client users. Method: We distinguish between library APIs based on their client-usage (referred to as client-used APIs) in order to understand the extent to which API breakages relate to refactorings. Our tool-based approach allows for a large-scale study across eight libraries (i.e., totaling 183 consecutive versions) with around 900 clients projects. Results: We find that library maintainers are less likely to break client-used API classes. Quantitatively, we find that refactoring activities break less than 37% of all client-used APIs. In a more qualitative analysis, we show two documented cases of where non-refactoring API breaking changes are motivated other maintenance issues (i.e., bug fix and new features) and involve more complex refactoring operations. Conclusion Using our automated approach, we find that library developers are less likely to break APIs and tend to break client-used APIs when performing maintenance issues.",Refactoring; API Breakages; Software libraries; Software evolution,SOURCE CODE; EVOLUTION; SUPPORT,Refactoring;API Breakages;Software libraries;Software evolution;SOURCE CODE;EVOLUTION;SUPPORT,raula-k@is.naist.jp; ali@ist.osaka-u.ac.jp; dmg@uvic.ca; inoue@istosaka-u.ac.jp,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000414878200012,2-s2.0-85029810360,Japan;Canada,is.naist.jp,Osaka Univ;Nara Inst Sci & Technol;Univ Victoria;Ecole Technol Super Montreal,"Osaka Univ, Japan;Nara Inst Sci & Technol, Japan;Univ Victoria, Canada;Ecole Technol Super Montreal, Canada","Kula, Raula Gaikovina; Ouni, Ali; German, Daniel M.; Inoue, Katsuro"
"Hofer, A., Philipp, M.",An Empirical Study on the TDD Conformance of Novice and Expert Pair Programmers,2009,"AGILE PROCESSES IN SOFTWARE ENGINEERING AND EXTREME PROGRAMMING: 10TH INTERNATIONAL CONFERENCE, XP 2009",31,,,33,+,3,4,,,"[Hoefer, Andreas] Univ Karlsruhe TH, IPD Inst, Fasanengarten 5, D-76131 Karlsruhe, Germany; [Philipp, Marc] Andrena Objects Ag, Albert Nestler Strabe 11, D-76131 Karlsruhe, Germany",,"We conducted a quasi-experiment comparing the conformance to the test-driven development (TDD) process of one expert and two novice groups of programmers working in pairs. Besides an insignificant tendency of the expert group toward a higher TDD conformance and instruction coverage, we found that the expert group had refactored their code to a larger extent than the two novice groups. More surprisingly though, the pairs in the expert group were significantly slower than the pairs in one of the novice groups.",test-driven development; pair programming; experts and novices; quasi-experiment,,test-driven development;pair programming;experts and novices;quasi-experiment,ahoefer@ipd.uni-karlsruhe.de; marc.philipp@andrena.de,"Abrahamsson, P; Marchesi, M; Maurer, F","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",10th International Conference on Agile Processes in Software Engineering and Extreme Programming,"Pula, ITALY","MAY 25-29, 2009",SPRINGER-VERLAG BERLIN,1865-1348,978-3-642-01852-7,,,English,LECT NOTES BUS INF P,Proceedings Paper,WoS,Computer Science,WOS:000267057500006,,Germany,ipd.uni-karlsruhe.de,Univ Karlsruhe TH;Andrena Objects Ag,"Univ Karlsruhe TH, Germany;Andrena Objects Ag, Germany","Hoefer, Andreas; Philipp, Marc"
"Mazinanian, D., Tsantalis, N.",An empirical study on the use of CSS preprocessors,2016,"2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 1",,,,168,178,11,5,10.1109/SANER.2016.18,,"[Mazinanian, Davood; Tsantalis, Nikolaos] Concordia Univ, Dept Comp Sci & Software Engn, Montreal, PQ, Canada",,"Cascading Style Sheets (CSS) is the standard language for styling structured documents, such as HTML. However, CSS lacks most of the traditional programming constructs, including variables and functions, which enable code reuse and structured programming. Alternatively, CSS Preprocessors (e.g., LESS, SASS) have been introduced as superset languages to extend CSS by supporting those missing constructs. While these languages are being widely used by developers, we do not have sufficient knowledge about how developers take advantage of the features they provide. Gaining this knowledge is crucial for providing better tool support to the developer community by devising techniques for the automatic migration of existing CSS code to take advantage of CSS Preprocessor language features, designing refactoring recommendation systems for existing Preprocessor code, and giving insights to the Preprocessor language designers for improving language usability. In this paper, we have empirically investigated the CSS Preprocessor codebase of 150 websites regarding four preprocessor features, namely variables, nested selectors, mixins and extend constructs, and report the discovered usage patterns for each feature. We also discuss how the gained knowledge can be put into practice towards improving the development and maintenance of CSS preprocessor code.",,,,d_mazina@cse.concordia.ca; tsantalis@cse.concordia.ca,,"345 E 47TH ST, NEW YORK, NY 10017 USA","23rd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)","Osaka, JAPAN","MAR 14-18, 2016",IEEE,,978-1-5090-1855-0,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000382672700016,,Canada,cse.concordia.ca,Concordia Univ,"Concordia Univ, Canada","Mazinanian, Davood; Tsantalis, Nikolaos"
"Malhotra, R., Chug, A.",An Empirical Study to Assess the Effects of Refactoring on Software Maintainability,2016,"2016 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI)",,,,110,117,8,3,,,"[Malhotra, Ruchika] Delhi Technol Univ, Dept Software Engn, Bawana Rd, Delhi, India; [Chug, Anuradha] GGS IP Univ, Sch Informat & Commun Technol, New Delhi, India",,"Maintenance is the most expensive phase of software and during this process refactoring is performed to improve the code without affecting its external behaviour. This study examines the effects of refactoring on maintainability using five proprietary software systems. Internal quality attributes were measured using design metrics suite whereas external quality attributes such as the level of abstraction, understandability, modifiability, extensibility and reusability were measured through expert opinion. The original versions of software are compared with refactored versions and the changes in quality attributes were mapped to maintainability. The results reveal that refactoring significantly improves the software quality and enhances software life. It was also found that even though refactoring is very tedious and might introduce errors if not implemented with utmost care, it is still advisable to frequently refactor the code to increase maintainability. Results of this study are useful to project managers in identifying the opportunities of refactoring while maintaining a perfect balance between re engineering and over-engineering.",Refactoring; Software Maintainability; Empirical Validation; Internal Quality Attributes; External Quality Attributes,REUSABILITY; QUALITY,Refactoring;Software Maintainability;Empirical Validation;Internal Quality Attributes;External Quality Attributes;REUSABILITY;QUALITY,ruchikamalhotrag@dce.edu; anuradha@ipu.ac.in,"Wu, J; Perez, GM; Thampi, SM; Atiquzzaman, M; Berretti, S; Rodrigues, JJPC; Tomar, R; Gorthi, RP; Siarry, P; Pathan, AK; Li, J; Bedi, P; Mehta, S; Kammoun, MH; Jain, V","345 E 47TH ST, NEW YORK, NY 10017 USA","International Conference on Advances in Computing, Communications and Informatics (ICACCI)","Jaipur, INDIA","SEP 21-24, 2016",IEEE,,978-1-5090-2028-7,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000392503100017,2-s2.0-85007343986,India,dce.edu,Delhi Technol Univ;GGS IP Univ,"Delhi Technol Univ, India;GGS IP Univ, India","Malhotra, Ruchika; Chug, Anuradha"
"Mumtaz, H., Alshayeb, M., Mahmood, S., Niazi, M.",An empirical study to improve software security through the application of code refactoring,2018,INFORMATION AND SOFTWARE TECHNOLOGY,96,,,112,125,14,3,10.1016/j.infsof.2017.11.010,,"[Mumtaz, Haris; Alshayeb, Mohammad; Mahmood, Sajjad; Niazi, Mahmood] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia",,"Context: Code bad smells indicate design flaws that can degrade the quality of software and can potentially lead to the introduction of faults. They can be eradicated by applying refactoring techniques. Code bad smells that impact the security perspective of software should be detected and removed from their code base. However, the existing literature is insufficient to support this claim and there are few studies that empirically investigate bad smells and refactoring opportunities from a security perspective. Objective: In this paper, we investigate how refactoring can improve the security of an application by removing code bad smell. Method: We analyzed three different code bad smells in five software systems. First, the identified code bad smells are filtered against security attributes. Next, the object-oriented design and security metrics are calculated for the five investigated systems. Later, refactoring is applied to remove security-related code bad smells. The correctness of detection and refactoring of investigated code smells are then validated. Finally, both traditional object-oriented and security metrics are again calculated after removing bad smells to assess its impact on the design and security attributes of systems. Results: We found 'feature envy' to be the most abundant security bad smell in investigated projects. The 'move method' and 'move field' are commonly applied refactoring techniques because of the abundance of feature envy. Conclusion: The results of security metrics indicate that refactoring helps improve the security of an application without compromising the overall quality of software systems.",Refactoring; Secured software; Empirical study; Code bad smells,QUALITY,Refactoring;Secured software;Empirical study;Code bad smells;QUALITY,g201405820@kfupm.edu.sa; alshayeb@lcfupm.edu.sa; smahmood@kfupm.edu.sa; mkniazi@kfupm.edu.sa,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000425567200008,2-s2.0-85041469974,Saudi Arabia,kfupm.edu.sa,King Fahd Univ Petr & Minerals,"King Fahd Univ Petr & Minerals, Saudi Arabia","Mumtaz, Haris; Alshayeb, Mohammad; Mahmood, Sajjad; Niazi, Mahmood"
"Veerappa V., Harrison R.",An empirical validation of coupling metrics using automated refactoring,2013,International Symposium on Empirical Software Engineering and Measurement,,, 6681364,271,274,,4,10.1109/ESEM.2013.37,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893293391&doi=10.1109%2fESEM.2013.37&partnerID=40&md5=6f8293644a783e4415a8780bf3dd0274,"Oxford Brookes University, Oxford, United Kingdom","Veerappa, V., Oxford Brookes University, Oxford, United Kingdom; Harrison, R., Oxford Brookes University, Oxford, United Kingdom",The validation of software metrics has received much interest over the years due to a desire to promote metrics which are both well-founded theoretically and have also been shown empirically to reflect our intuition and be practically useful. In this paper we describe how we used automatic refactoring to investigate the changes which occur to a number of metrics as software evolves. We use the concept of software volatility to quantify our comparison of the metrics. © 2013 IEEE.,coupling; refactoring; software metrics,Automatic refactoring; Empirical validation; Refactorings; Software metrics; Computer software; Couplings; Measurements; Software engineering,coupling;refactoring;software metrics;Automatic refactoring;Empirical validation;Refactorings;Computer software;Couplings;Measurements;Software engineering,"Oxford Brookes University, Oxford, United Kingdom",,,,,,,19493770,,,,English,Int. Symp. Empir. Softw. Eng. Meas.,Conference Paper,Scopus,,2-s2.0-84893293391,,United Kingdom,No email,,,"Veerappa V., Harrison R."
"Santoro, C.",An Erlang Framework for Autonomous Mobile Robots,2007,ERLANG'07: PROCEEDINGS OF THE 2007 SIGPLAN ERLANG WORKSHOP,,,,85,92,8,5,,,"Univ Catania, Dept Math & Comp Sci, I-95125 Catania, Italy",,"This paper presents an Erlang-based framework, developed by the authors, for the realisation of software systems for autonomous mobile robots. On the basis of the analysis of the main problems arising in the design and implementation of such a kind of robots, a software infrastructure has been derived, organised in a set of (avers, each one composed by some modules. This layered architecture is employed to separate hardware interfacing problems from control loops and high-level strategy tasks; such an organisation allows also a developer to concentrate only on the specific problem to be dealt with, and to immediately identify the module or layer to be involved for the realisation of a specific functionality. The proposed structure also favours reuse and rapid refactoring, since the replacement of a piece of hardware or a change in a functionality requires only few changes on a specific module, leaving the remaining system untouched. The overall software architecture is described in the paper, as well as the functionality of the various modules composing it; the advantages introduced by the framework are also highlighted, while some examples and a case study are used to show its effectiveness.",Autonomous Robots; Expert Systems; Erlang,,Autonomous Robots;Expert Systems;Erlang,csanto@diit.unict.it,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",6th ACM SIGPLAN Erlang Workshop,"Freiburg, GERMANY","OCT 05, 2007",ASSOC COMPUTING MACHINERY,,978-1-59593-675-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000265915800010,2-s2.0-38849099568,Italy,diit.unict.it,Dept Math & Comp Sci,"Dept Math & Comp Sci, Italy","Santoro, Corrado"
"Bruntink, M., van Deursen, A., Tourwe, T., van Engelen, R.",An evaluation of clone detection techniques for identifying crosscutting concerns,2004,"20TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS",,,,200,209,10,48,10.1109/ICSM.2004.1357804,,"Cent Wiskunde Informat, NL-1090 GB Amsterdam, Netherlands",,"Code implementing a crosscutting concern is often spread over many different parts of an application. Identifying such code automatically greatly improves both the maintainability and the evolvability of the application. First of all, it allows a developer to more easily find the places in the code that must be changed when the concern changes, and thus makes such changes less time consuming and less prone to errors. Second, it allows a developer to refactor the code, so that it uses modern and more advanced abstraction mechanisms, thereby restoring its modularity. In this paper we evaluate the suitability of clone detection as a technique for the identification of crosscutting concerns. To that end, we manually identify four specific concerns in an industrial C application, and analyze to what extent clone detection is capable of finding these concerns. We consider our results as a stepping stone toward an automated ""concern miner"" based on clone detection.",,,,Magiel.Bruntink@cwi.nl; Arie.van.Deursen@cwi.nl; Tom.Tourwe@cwi.nl; Remco.van.Engelen@asml.com,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",20th IEEE International Conference on Software Maintenance (ICSM 2004),"Chicago, IL","SEP 11-14, 2004",IEEE COMPUTER SOC,1063-6773,0-7695-2213-0,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000224491800019,,Netherlands,cwi.nl,NL-1090 GB Amsterdam,"NL-1090 GB Amsterdam, Netherlands","Bruntink, M; van Deursen, A; Tourwe, T; van Engelen, R"
"Khanam, Z., Rizvi, S.A.M.",An Evaluative Study of Software Refactoring in Procedural Programming,2013,"WORLD CONGRESS ON ENGINEERING AND COMPUTER SCIENCE, WCECS 2013, VOL I",I,,,102,107,6,0,,,"[Khanam, Zeba] Jamia Millia Islamia, New Delhi 110025, India",,"Too many organizations suffer from superfluous, disproportionate, difficult-to-extend software because of the lack in maintenance effort and ignoring the fact that continuous refactoring provides a competitive advantage. Several refactoring have been proposed for object-oriented languages, but there are few related works focusing on procedural programming. In this paper, an assessment is provided of selected literatures which relate to refactoring of procedural languages, and it also contributes to highlighting new concepts and requirements for developing new refactoring techniques for C that may eventually benefit other procedural languages also. We have studied the refactorings performed on 3 procedural languages that are Fortran, Cobol and C to analyze the pattern of refactorings followed in these languages and assess their cumulative effect in different applications. We offer a few refactoring capabilities that may improve the existing refactorings for these languages by our contribution to refactoring that characterizes of a new aspect oriented programming style.",Reengineering; Refactoring; C; Cobol; Fortran; Procedural languages; Aspect oriented Programming,,Reengineering;Refactoring;C;Cobol;Fortran;Procedural languages;Aspect oriented Programming,zebs_khan@yahoo.co.in; samsam_rizvi@yahoo.com,"Ao, SI; Douglas, C; Grundfest, WS; Burgstone, J","UNIT1, 1-F, 37-39 HUNG TO ROAD, KWUN TONG, HONG KONG, 00000, PEOPLES R CHINA",World Congress on Engineering and Computer Science,"San Francisco, CA","OCT 23-25, 2013",INT ASSOC ENGINEERS-IAENG,2078-0958,978-988-19252-3-7,,,English,LECT NOTES ENG COMP,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000335870200020,2-s2.0-84903468476,India,yahoo.co.in,Jamia Millia Islamia,"Jamia Millia Islamia, India","Khanam, Zeba; Rizvi, S. A. M."
"Oancea, C.E., Mycroft, A., Watt, S.M.",A New Approach to Parallelising Tracing Algorithms,2009,ISMM'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT,,,,10,19,10,2,,,"[Oancea, Cosmin E.; Mycroft, Alan] Univ Cambridge, Comp Lab, Cambridge CB2 3QG, England",,"Tracing algorithms visit reachable nodes in a graph and are central to activities such as garbage collection, marshalling etc. Traditional sequential algorithms use a worklist, replacing a nodes with their unvisited children. Previous work on parallel tracing is processor-oriented in associating one worklist per processor: worklist insertion and removal requires no locking, and load balancing requires only occasional locking. However, since multiple queues may contain the same node, significant locking is necessary to avoid concurrent visits by competing processors. This paper presents a memory-oriented solution: memory is partitioned into segments and each segment has its own worklist containing only nodes in that segment. At a given time at most one processor owns a given worklist. By arranging separate single-readersingle-writer forwarding queues to pass nodes from processor i to processor j we can process objects in an order that gives lock-free mainline code and improved locality of reference. This refactoring is analogous to the way in which a compiler changes an iteration space to eliminate data dependencies. While it is clear that our solution can be more effective on NUMA systems, and even necessary when processor-local memory may not be addressed from other processors, slightly surprisingly, it often gives significantly better speed-up on modem multi-cores architectures too. Using caches to hide memory latency loses much of its effectiveness when there is significant cross-processor memory contention or when locking is necessary.",,GARBAGE COLLECTOR,GARBAGE COLLECTOR,Cosmin.Oancea@cl.cam.ac.uk; Alan.Mycroft@cl.cam.ac.uk; Stephen.Watt@uwo.ca,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",International Conference on Memory Management,"Dublin, IRELAND","JUN 19-20, 2009",ASSOC COMPUTING MACHINERY,,978-1-60558-347-1,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000268051400002,,United Kingdom,cl.cam.ac.uk,Univ Cambridge,"Univ Cambridge, United Kingdom","Oancea, Cosmin E.; Mycroft, Alan; Watt, Stephen M."
"Ci, M., Su, X.H., Wang, T.T., Ma, P.J.",A New Clone Group Mapping Algorithm for Extracting Clone Genealogy on Multi-Version Software,2013,"2013 THIRD INTERNATIONAL CONFERENCE ON INSTRUMENTATION & MEASUREMENT, COMPUTER, COMMUNICATION AND CONTROL (IMCCC)",,,,848,853,6,3,10.1109/IMCCC.2013.189,,"[Ci Meng; Su Xiao-hong; Wang Tian-tian; Ma Pei-jun] Harbin Inst Technol, Sch Comp Sci & Technol, Harbin 150006, Peoples R China",,"Research on code clone evolution is very hot, and it can contribute to the investigation of the characteristics, the maintenance, the refactoring, and the harmfulness evaluation of code clones. In clone evolution research, extracting clone genealogies is the key technique, and mapping clone groups between neighboring software versions is a thorny issue for extracting clone genealogies. The efficiency and robustness of the current method are not satisfactory. To address this problem, this paper presents a new clone group mapping algorithm in order to extract the clone genealogy. The algorithm takes NICAD's results as input, and describes the information of code clones with CRD, and maps the clone groups as well as the clone fragments according to the CRD matching level, the location overlapping rate and if necessary the text similarity rate. We evaluate our method on three software systems of different size and written in different languages. The results show that our method works well in clone group mapping under various circumstances, and it also can as a reliable foundation for constructing clone genealogies.",Clone Evolution; Clone Genealogy; Clone Group Mapping; CRD,,Clone Evolution;Clone Genealogy;Clone Group Mapping;CRD,sxh@hit.edu.cn,,"345 E 47TH ST, NEW YORK, NY 10017 USA","3rd International Conference on Instrumentation & Measurement, Computer, Communication and Control (IMCCC)","Harbin Inst Technol, Shenyang, PEOPLES R CHINA","SEP 21-23, 2013",IEEE,2373-6844,978-0-7695-5122-7,,,English,INT CONF INSTR MEAS,Proceedings Paper,WoS,Automation & Control Systems; Computer Science; Instruments & Instrumentation; Telecommunications,WOS:000359802100168,2-s2.0-84904572424,China,hit.edu.cn,Harbin Inst Technol,"Harbin Inst Technol, China",Ci Meng; Su Xiao-hong; Wang Tian-tian; Ma Pei-jun
"Serban G., Czibula I.G.",A new clustering approach for systems design improvement,2007,"International Conference on Software Engineering Theory and Practice 2007, SETP 2007",,,,47,54,,1,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-47749093759&partnerID=40&md5=c4fb0346bb5b54767266ce4f70018623,"Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Şerban, G., Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania; Czibula, I.G., Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Clustering is a division of data into groups of similar objects. It is a data mining activity that aims to differentiate groups inside a given set of objects, with respect to a set of relevant attributes of the analyzed objects. Refactoring is the process of improving the design of software systems. Its goal is to change a software system in such a way that it does not alter the external behavior of the code, but improves its internal structure ([10]). This paper aims at presenting a new clustering algorithm that can be used for improving systems design. Clustering is used in order to recondition the class structure of a software system. The proposed approach can be useful for assisting software engineers in their daily works of refactoring software systems. We evaluate our approach using the open source case study JHotDraw ([19]), providing a comparison with previous approaches.",,Clustering approach; Design improvements; Design of softwares; External behavior; Improving systems; Internal structure; New clustering algorithms; Software engineers; Computer software; Systems analysis; Clustering algorithms,Clustering approach;Design improvements;Design of softwares;External behavior;Improving systems;Internal structure;New clustering algorithms;Software engineers;Computer software;Systems analysis;Clustering algorithms,"Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania",,,,,,,,9781615677221,,,English,"Int. Conf. Softw. Eng. Theory Pract., SETP",Conference Paper,Scopus,,2-s2.0-47749093759,,Romania,No email,,,"Serban G., Czibula I.G."
"Mahouachi, R., Kessentini, M., Ghedira, K.",A New Design Defects Classification: Marrying Detection and Correction,2012,"FUNDAMENTAL APPROACHES TO SOFTWARE ENGINEERING, FASE 2012",7212,,,455,470,16,5,,,"[Mahouachi, Rim; Ghedira, Khaled] Univ Tunis, SOIE, Tunis, Tunisia; [Kessentini, Marouane] Missouri Univ Sci & Technol, CS, Rolla, MO USA",,"Previous work classify design defects based on symptoms (long methods, large classes, long parameter lists, etc.), and treat separately detection and correction steps. This paper introduces a new classification of defects using correction possibilities. Thus, correcting different code fragments appending to specific defect category need, approximately, the same refactoring operations to apply. To this end, we use genetic programming to generate new form of classification rules combining detection and correction steps. We report the results of our validation using different open-source systems. Our proposal achieved high precision and recall correction scores.",Software maintenance; refactoring; search-based software engineering; genetic programming; design defects,PROGRAM,Software maintenance;refactoring;search-based software engineering;genetic programming;design defects;PROGRAM,rim.mahouachi@gmail.com; marouanek@mst.edu; khaled.ghedira@isg.rnu.tn,"DeLara, J; Zisman, A","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",15th International Conference on Fundamental Approaches to Software Engineering (FASE),"Tallinn, ESTONIA","MAR 24-APR 01, 2012",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-28872-2,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000343044000031,2-s2.0-84859139094,Tunisia;United States,gmail.com,Univ Tunis;Missouri Univ Sci & Technol,"Univ Tunis, Tunisia;Missouri Univ Sci & Technol, United States","Mahouachi, Rim; Kessentini, Marouane; Ghedira, Khaled"
"Serban, G., Moldovan, G.S.",A new k-means based clustering algorithm in aspect mining,2007,"SYNASC 2006: EIGHTH INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND NUMERIC ALGORITHMS FOR SCIENTIFIC COMPUTING, PROCEEDINGS",,,,69,+,2,0,,,"[Serban, Gabriela] Univ Babes Bolyai, Dept Comp Sci, R-3400 Cluj Napoca, Romania; [Moldovan, Grigoreta Sofia] Univ Babes Bolyai, Dept Comp Sci, Cluj Napoca, Romania",,"Clustering is a division of data into groups of similar objects. Aspect mining is a process that tries to identify crosscutting concerns in existing software systems. The goal is to refactor the existing systems to use aspect oriented programming, in order to make them easier to maintain and to evolve. This paper aims at presenting a new k-means based clustering algorithm used in Aspect Mining. Clustering is used in order to identify crosscutting concerns. We propose some quality measures in order to evaluate the results both from the clustering point of view and the aspect mining point of view, and we also report two case studies.",clustering; aspect mining,,clustering;aspect mining,gabis@cs.ubbcluj.ro; grigo@cs.ubbcluj.ro,"Negru, V; Petcu, D; Zaharie, D; Abraham, A; Buchberger, B; Cicortas, A; Gorgan, D; Quinqueton, J","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",8th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing,"W Univ Timisoara, Timisoara, ROMANIA","SEP 26-29, 2006",IEEE COMPUTER SOC,,978-0-7695-2740-6,,,English,,Proceedings Paper,WoS,Computer Science; Mathematics,WOS:000245460500014,,Romania,cs.ubbcluj.ro,Univ Babes Bolyai,"Univ Babes Bolyai, Romania","Serban, Gabriela; Moldovan, Grigoreta Sofia"
"Malhotra R., Khanna M.",A new metric for predicting software change using gene expression programming,2014,"5th International Workshop on Emerging Trends in Software Metrics, WETSoM 2014 - Proceedings",,,,8,14,,10,10.1145/2593868.2593870,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84974528118&doi=10.1145%2f2593868.2593870&partnerID=40&md5=7c5ca159ddbaa1f3001138c93873b79e,"Department of Software Engineering, Delhi Technological University, Shahbad Daulatpur, Main Bawana Road, Delhi, 110042, India; Acharya Narendra Dev College, University of Delhi, Delhi Technological University, Delhi, India","Malhotra, R., Department of Software Engineering, Delhi Technological University, Shahbad Daulatpur, Main Bawana Road, Delhi, 110042, India; Khanna, M., Acharya Narendra Dev College, University of Delhi, Delhi Technological University, Delhi, India","Software metrics help in determining the quality of a software product. They can be used for continuous inspection of a software to assist software developers in improving its quality. We can also use metrics to develop quality models which predict important quality attributes like change proneness. Determination of change prone classes in an Object-Oriented software will help software developers to focus their time and resources on the weak portions of the software. In this paper, we validate the Chidamber and Kemerer metric suite for building an efficient software quality model which predict change prone classes with the help of Gene Expression Programming. The model is developed using an open source software. We further propose a new metric which can be used for identifying change prone classes in the early phases of software development life cycle. The proposed metric is validated on another open source software and the results show that it can be effectively used by the software industry to classify change prone classes. Identification of change prone classes may help in efficient refactoring and rigorous testing of these classes in the forthcoming releases of the software product. Copyright 2014 ACM.",Change Proneness; Empirical Validation; Gene Expression Programming; Object-Oriented Metrics; Software Quality,Computer software; Computer software selection and evaluation; Forecasting; Gene expression; Genes; Life cycle; Open source software; Open systems; Software design; Software engineering; Software testing; Change proneness; Empirical validation; Gene expression programming; Object oriented metrics; Software Quality; Object oriented programming,Change Proneness;Empirical Validation;Gene Expression Programming;Object-Oriented Metrics;Software Quality;Computer software;Computer software selection and evaluation;Forecasting;Gene expression;Genes;Life cycle;Open source software;Open systems;Software design;Software engineering;Software testing;Object oriented metrics;Object oriented programming,,,,,,,"Association for Computing Machinery, Inc",,9781450328548,,,English,"Int. Workshop Emerg. Trends Softw. Metrics, WETSoM - Proc.",Conference Paper,Scopus,,2-s2.0-84974528118,,India,No email,,,"Malhotra R., Khanna M."
"Villavicencio, G.",A New Software Maintenance Scenario Based on Refactoring Techniques,2012,2012 16TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING (CSMR),,,,341,346,6,2,10.1109/CSMR.2012.41,,"Univ Catolica Santiago del Estero, Fac Matemat Aplicada, RA-4200 Santiago Del Estero, Argentina",,"This research line proposes the classification of refactoring techniques according to two opposite program properties: understanding and efficiency, being the former useful for maintenance while the latter for executing. Understanding-oriented refactoring and efficiency-oriented refactoring are considered the inverses of each other. Thus, through the application of the first sort of refactoring, understanding can be improved but efficiency can be affected. On the other hand, by applying the second sort of refactoring, efficiency can be improved but understanding can be damaged. So, the challenge to be faced here is to transform a software artifact through the application of a sequence of understanding-oriented refactoring, and to execute maintenance with the most appropriate version obtained. After that, we plan to restore its original efficiency by the application of the opposite sequence of refactorings, i.e. efficiency-oriented refactoring. In this way, a new maintenance scenario is outlined. Up to now, this ongoing research is being carried out in the functional setting.",Program transformation; reverse and forward refactorings; program comprehension and maintenance,,Program transformation;reverse and forward refactorings;program comprehension and maintenance,gustavov@ucse.edu.ar,"Mens, T; Cleve, A; Ferenc, R","345 E 47TH ST, NEW YORK, NY 10017 USA",16th European Conference on Software Maintenance and Reengineering (CSMR),"Univ Szeged, Szeged, HUNGARY","MAR 27-30, 2012",IEEE,1944-2793,978-0-7695-4666-7,,,English,EUR CON SFTWR MTNCE,Proceedings Paper,WoS,Computer Science,WOS:000309348900035,2-s2.0-84860528159,Argentina,ucse.edu.ar,Fac Matemat Aplicada,"Fac Matemat Aplicada, Argentina","Villavicencio, Gustavo"
"Gupta, A., Cruzes, D., Shull, F., Conradi, R., Ronneberg, H., Landre, E.",An examination of change profiles in reusable and non-reusable software systems,2010,JOURNAL OF SOFTWARE MAINTENANCE AND EVOLUTION-RESEARCH AND PRACTICE,22,5,,359,380,22,5,10.1002/smr.459,,"[Gupta, Anita; Conradi, Reidar] Norwegian Univ Sci & Technol, Dept Comp & Informat Sci IDI, N-7034 Trondheim, Norway; [Cruzes, Daniela; Shull, Forrest] Fraunhofer Ctr Maryland, College Pk, MD USA; [Ronneberg, Harald; Landre, Einar] StatoilHydro ASA KTJ IT, Stavanger, Norway",,"This paper reports on an industrial case study in a large Norwegian Oil and Gas company (Statoil-Hydro ASA) involving a reusable Java-class framework and two applications that use that framework. We analyzed software changes from three releases of the reusable framework, called Java Enterprise Framework (JEF), and two applications reusing the framework, called Digital Cargo File (DCF) and Shipment and Allocation (S&A). On the basis of our analysis, we found the following: (1) Profiles of change types for the reused framework and the applications are similar, specifically, perfective changes dominate significantly. (2) Although on observing the mean value adaptive changes are more frequent and are active longer in JEF and S&A, these systems went through less refactoring than DCF. For DCF, we saw that preventive changes were more frequent and were active longer. (3) Finally, we found that designing for reuse seems to lead to a long-term payoff in relation to non-reusable software systems. Copyright (C) 2010 John Wiley & Sons, Ltd.",software reuse; software quality; software changes; case study,REUSE; MAINTENANCE,software reuse;software quality;software changes;case study;REUSE;MAINTENANCE,anitaash@idi.ntnu.no,,"THE ATRIUM, SOUTHERN GATE, CHICHESTER PO19 8SQ, W SUSSEX, ENGLAND",,,,JOHN WILEY & SONS LTD,1532-060X,,,,English,J SOFTW MAINT EVOL-R,Article,WoS,Computer Science,WOS:000281740000003,2-s2.0-77955445992,Norway;United States,idi.ntnu.no,Norwegian Univ Sci & Technol;Fraunhofer Ctr Maryland;StatoilHydro ASA KTJ IT,"Norwegian Univ Sci & Technol, Norway;Fraunhofer Ctr Maryland, United States;StatoilHydro ASA KTJ IT, Norway","Gupta, Anita; Cruzes, Daniela; Shull, Forrest; Conradi, Reidar; Ronneberg, Harald; Landre, Einar"
"Fontana F.A., Mariani E., Morniroli A., Sormani R., Tonello A.",An experience report on using code smells detection tools,2011,"Proceedings - 4th IEEE International Conference on Software Testing, Verification, and Validation Workshops, ICSTW 2011",,, 5954446,450,457,,35,10.1109/ICSTW.2011.12,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80051650792&doi=10.1109%2fICSTW.2011.12&partnerID=40&md5=962e4cd5ba6537a1ea22b0429ed96e70,"Department of Computer Science, Università of Milano Bicocca, Milano, Italy","Fontana, F.A., Department of Computer Science, Università of Milano Bicocca, Milano, Italy; Mariani, E., Department of Computer Science, Università of Milano Bicocca, Milano, Italy; Morniroli, A., Department of Computer Science, Università of Milano Bicocca, Milano, Italy; Sormani, R., Department of Computer Science, Università of Milano Bicocca, Milano, Italy; Tonello, A., Department of Computer Science, Università of Milano Bicocca, Milano, Italy","Detecting code smells in the code and consequently applying the right refactoring steps when necessary is very important to improve the quality of the code. Different tools have been proposed for code smell detection, each one characterized by particular features. The aim of this paper is to describe our experience on using different tools for code smell detection. We outline the main differences among them and the different results we obtained. © 2011 IEEE.",Code smell detection tools; Code smells; Quality code evaluation; Refactoring,Code smell; Detection tools; Experience report; Quality code evaluation; Refactorings; Computer software selection and evaluation; Inspection equipment; Software testing; Verification; Odors,Code smell detection tools;Code smells;Quality code evaluation;Refactoring;Code smell;Detection tools;Experience report;Refactorings;Computer software selection and evaluation;Inspection equipment;Software testing;Verification;Odors,"Fontana, F.A.; Department of Computer Science, Università of Milano Bicocca, Milano, Italy; email: arcelli@disco.unimib.it",,,,,,,,9780769543451,,,English,"Proc. - IEEE Int. Conf. Softw. Test., Verif., Validation Workshops, ICSTW",Conference Paper,Scopus,,2-s2.0-80051650792,,Italy,disco.unimib.it,,,"Fontana F.A., Mariani E., Morniroli A., Sormani R., Tonello A."
"Bavota, G., De Lucia, A., Di Penta, M., Oliveto, R., Palomba, F.",An experimental investigation on the innate relationship between quality and refactoring,2015,JOURNAL OF SYSTEMS AND SOFTWARE,107,,,1,14,14,58,10.1016/j.jss.2015.05.024,,"[Bavota, Gabriele] Free Univ Bozen Bolzano, Bolzano, Italy; [De Lucia, Andrea; Palomba, Fabio] Univ Salerno, Fisciano, SA, Italy; [Di Penta, Massimiliano] Univ Sannio, Benevento, Italy; [Oliveto, Rocco] Univ Molise, Pesche, IS, Italy",,"Previous studies have investigated the reasons behind refactoring operations performed by developers, and proposed methods and tools to recommend refactorings based on quality metric profiles, or on the presence of poor design and implementation choices, i.e., code smells. Nevertheless, the existing literature lacks observations about the relations between metrics/code smells and refactoring activities performed by developers. In other words, the characteristics of code components increasing/decreasing their chances of being object of refactoring operations are still unknown. This paper aims at bridging this gap. Specifically, we mined the evolution history of three Java open source projects to investigate whether refactoring activities occur on code components for which certain indicators such as quality metrics or the presence of smells as detected by tools suggest there might be need for refactoring operations. Results indicate that, more often than not, quality metrics do not show a clear relationship with refactoring. In other words, refactoring operations are generally focused on code components for which quality metrics do not suggest there might be need for refactoring operations. Finally, 42% of refactoring operations are performed on code entities affected by code smells. However, only 7% of the performed operations actually remove the code smells from the affected class. (C) 2015 Elsevier Inc. All rights reserved.",Refactoring; Code smells; Empirical study,METRICS; SOFTWARE; VALIDATION; COHESION; IMPACT,Refactoring;Code smells;Empirical study;METRICS;SOFTWARE;VALIDATION;COHESION;IMPACT,gabriele.bavota@unibz.it,,"STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA",,,,ELSEVIER SCIENCE INC,0164-1212,,,,English,J SYST SOFTWARE,Article,WoS,Computer Science,WOS:000358699700001,2-s2.0-84937433135,Italy,unibz.it,Free Univ Bozen Bolzano;Univ Salerno;Univ Sannio;Univ Molise,"Free Univ Bozen Bolzano, Italy;Univ Salerno, Italy;Univ Sannio, Italy;Univ Molise, Italy","Bavota, Gabriele; De Lucia, Andrea; Di Penta, Massimiliano; Oliveto, Rocco; Palomba, Fabio"
"Cinneide, M.O., Moghadam, I.H., Harman, M., Counsell, S., Tratt, L.",An experimental search-based approach to cohesion metric evaluation,2017,EMPIRICAL SOFTWARE ENGINEERING,22,1,,292,329,38,6,10.1007/s10664-016-9427-7,,"[Cinneide, Mel O.] Univ Coll Dublin, Sch Comp Sci, Dublin, Ireland; [Moghadam, Iman Hemati; Harman, Mark] UCL, Dept Comp Sci, London, England; [Counsell, Steve] Brunel Univ, Dept Comp Sci, London, England; [Tratt, Laurence] Kings Coll London, Dept Informat, London, England",,"In spite of several decades of software metrics research and practice, there is little understanding of how software metrics relate to one another, nor is there any established methodology for comparing them. We propose a novel experimental technique, based on search-based refactoring, to 'animate' metrics and observe their behaviour in a practical setting. Our aim is to promote metrics to the level of active, opinionated objects that can be compared experimentally to uncover where they conflict, and to understand better the underlying cause of the conflict. Our experimental approaches include semi-random refactoring, refactoring for increased metric agreement/disagreement, refactoring to increase/decrease the gap between a pair of metrics, and targeted hypothesis testing. We apply our approach to five popular cohesion metrics using ten real-world Java systems, involving 330,000 lines of code and the application of over 78,000 refactorings. Our results demonstrate that cohesion metrics disagree with each other in a remarkable 55 % of cases, that Low-level Similarity-based Class Cohesion (LSCC) is the best representative of the set of metrics we investigate while Sensitive Class Cohesion (SCOM) is the least representative, and we discover several hitherto unknown differences between the examined metrics. We also use our approach to investigate the impact of including inheritance in a cohesion metric definition and find that doing so dramatically changes the metric.",Refactoring; Software metrics; Empirical studies,,Refactoring;Software metrics;Empirical studies,mel.ocinneide@ucd.ie; i.moghadam@ucl.ac.uk; mark.harman@ucl.ac.uk; Steve.Counsell@brunel.ac.uk; laurie@tratt.net,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",,,,SPRINGER,1382-3256,,,,English,EMPIR SOFTW ENG,Article,WoS,Computer Science,WOS:000392378400008,2-s2.0-84963705438,Ireland;United Kingdom,ucd.ie,Univ Coll Dublin;UCL;Brunel Univ;Kings Coll London,"Univ Coll Dublin, Ireland;UCL, United Kingdom;Brunel Univ, United Kingdom;Kings Coll London, United Kingdom","Cinneide, Mel O.; Moghadam, Iman Hemati; Harman, Mark; Counsell, Steve; Tratt, Laurence"
"Mantyla, M.V.",An experiment on subjective evolvability evaluation of object-oriented software: Explaining factors and interrater agreement,2005,"2005 International Symposium on Empirical Software Engineering (ISESE), Proceedings",,,,277,286,10,8,10.1109/ISESE.2005.1541837,,"Helsinki Univ Technol, Software Business & Engn Inst, FIN-02015 Helsinki, Finland",,"Recent trends in software development have emphasized the importance of refactoring in preserving software evolvability. We performed two experiments on software evolvability evaluation, i.e. evaluating the existence of certain code problems called code smells and the refactoring decision. We studied the agreement of the evaluators. Interrater agreement was high for simple code smells and low for the refactoring decision. Furthermore, we analyzed evaluators' demographics and source code metrics as factors explaining the evaluations. The code metrics explained over 70% of the variation regarding the simple code smell evaluations, but only about 30% of the refactoring decision. Surprisingly, the demographics were not useful predictors neither for evaluating code smells nor the refactoring decision. The low agreement for the refactoring decisions may indicate difficulty in building tool support Simulating real-life subjective refactoring decisions. However, code metrics tools should be effective in highlighting straightforward problems, e.g. simple code smells.",,MAINTAINABILITY,MAINTAINABILITY,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",4th International Symposium on Empirical Software Engineering,"Noosa Heads, AUSTRALIA","NOV 17-18, 2005",IEEE,,0-7803-9507-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000236352200029,,Finland,No email,Software Business & Engn Inst,"Software Business & Engn Inst, Finland","Mantyla, MV"
"Kosker, Y., Turhan, B., Bener, A.",An expert system for determining candidate software classes for refactoring,2009,EXPERT SYSTEMS WITH APPLICATIONS,36,6,,10000,10003,4,15,10.1016/j.eswa.2008.12.066,,"[Kosker, Yasemin; Turhan, Burak; Bener, Ayse] Bogazici Univ, Dept Comp Engn, TR-34342 Istanbul, Turkey",,"in the lifetime of a software product, development costs are only the tip of the iceberg. Nearly 90% of the cost is maintenance due to error correction, adaptation and mainly enhancements. As Lehman and Belady [Lehman, M. M., & Belady, L. A. (1985). Program evolution: Processes of software change. Academic Press Professional.] state that software will become increasingly unstructured as it is changed. One way to overcome this problem is refactoring. Refactoring is an approach which reduces the software complexity by incrementally improving internal software quality. Our motivation in this research is to detect the classes that need to be rafactored by analyzing the code complexity. We propose a machine learning based model to predict classes to be refactored. We use Weighted Naive Bayes with InfoGain heuristic as the learner and we conducted experiments with metric data that we collected from the largest GSM operator in Turkey. Our results showed that we can predict 82% of the classes that need refactoring with 13% of manual inspection effort on the average. (C) 2008 Elsevier Ltd. All rights reserved.",Refactoring; Software metrics; Naive Bayes; Refactor prediction,,Refactoring;Software metrics;Naive Bayes;Refactor prediction,yasemin.kosker@boun.edu.tr,,"THE BOULEVARD, LANGFORD LANE, KIDLINGTON, OXFORD OX5 1GB, ENGLAND",,,,PERGAMON-ELSEVIER SCIENCE LTD,0957-4174,,,,English,EXPERT SYST APPL,Article,WoS,Computer Science; Engineering; Operations Research & Management Science,WOS:000266086600049,2-s2.0-64049101721,Turkey,boun.edu.tr,Bogazici Univ,"Bogazici Univ, Turkey","Kosker, Yasemin; Turhan, Burak; Bener, Ayse"
Hafiz M.,An 'explicit type enforcement' program transformation tool for preventing integer vulnerabilities,2011,"SPLASH'11 Compilation - Proceedings of OOPSLA'11, Onward! 2011, GPCE'11, DLS'11, and SPLASH'11 Companion",,,,21,22,,1,10.1145/2048147.2048158,https://www.scopus.com/inward/record.uri?eid=2-s2.0-81355139727&doi=10.1145%2f2048147.2048158&partnerID=40&md5=9b013f9bf72540b6dcb55715d9b49a51,"Department of Computer Science and Software Engineering, Auburn University, United States","Hafiz, M., Department of Computer Science and Software Engineering, Auburn University, United States","A security-oriented program transformation is similar to a refactoring, but it is not intended to preserve behavior. Instead, it improves the security of systems, which means it preserves the expected behavior, but changes a system's response to security attacks. This demo is about a tool for Explicit Type Enforcement transformation, which adds proper typecast to integer variables. The tool is built using Eclipse CDT and applies on C programs. Preliminary results show that it is very effective in fixing integer-related vulnerabilities. Power tools such as these can improve developer productivity and produce vulnerability-free software.",Integer overflow; Program transformation,C programs; Integer overflow; Integer variables; Power tools; Program transformation; Program transformations; Refactorings; Security attacks; Type enforcement; Behavioral research; C (programming language); Integer programming,Integer overflow;Program transformation;C programs;Integer variables;Power tools;Program transformations;Refactorings;Security attacks;Type enforcement;Behavioral research;C (programming language);Integer programming,"Hafiz, M.; Department of Computer Science and Software Engineering, Auburn UniversityUnited States; email: munawar@auburn.edu",,,,,,,,9781450309424,,,English,"SPLASH Compil. - Proc. OOPSLA, Onward!, GPCE, DLS, SPLASH Companion",Conference Paper,Scopus,,2-s2.0-81355139727,,United States,auburn.edu,,,Hafiz M.
"Counsell S., Liu X., Swift S., Buckley J., English M., Herold S., Eldh S., Ermedahl A.",An exploration of the 'introduce explaining variable' refactoring,2015,ACM International Conference Proceeding Series,25-29-May-2015,, a9,,,,0,10.1145/2764979.2764988,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961238755&doi=10.1145%2f2764979.2764988&partnerID=40&md5=dd408edb27b344ef5aaada75859195b5,"Department of Computer Science, Brunel University, Uxbridge, Middlesex, United Kingdom; University of Limerick, LERO, Ireland; Ericsson Kista, Stockholm, Sweden","Counsell, S., Department of Computer Science, Brunel University, Uxbridge, Middlesex, United Kingdom; Liu, X., Department of Computer Science, Brunel University, Uxbridge, Middlesex, United Kingdom; Swift, S., Department of Computer Science, Brunel University, Uxbridge, Middlesex, United Kingdom; Buckley, J., University of Limerick, LERO, Ireland; English, M., University of Limerick, LERO, Ireland; Herold, S., University of Limerick, LERO, Ireland; Eldh, S., Ericsson Kista, Stockholm, Sweden; Ermedahl, A., Ericsson Kista, Stockholm, Sweden","While we know much about refactoring trends and their occurrence in open-source and proprietary systems, we still know little about their association with defects or the nature of classes where refactoring is applied. In this paper, we explore one such refactoring, ""Introduce explaining variable"" (IEV), a low-level code based refactoring which simplifies a complex expression through the introduction of added variables. We explore the possibility that this type of refactoring, requiring manipulation of variables and constructs will have a greater association with defects than other types of refactoring. Classes where they are applied will have lower coupling levels. Five releases from two projects of Eclipse were used to support this analysis and tools to extract both the set of class refactorings and class coupling and size metrics supported the analysis. Results showed that for four out of the five releases studied, classes where the IEV refactoring had been applied were more defect-prone than other classes. Coupling in the same set of classes was higher in all five releases. Size, on the other hand, may be a confounding factor but tentative results suggest that areas of code where this refactoring had been applied are indicative of defect-prone code. © 2015 ACM.",Coupling; Defects; Refactoring; Variable,Codes (symbols); Couplings; Defects; Open source software; Software design; Software engineering; Added variable; Open sources; Proprietary systems; Refactorings; Size metrics; Variable; Open systems,Coupling;Defects;Refactoring;Variable;Codes (symbols);Couplings;Open source software;Software design;Software engineering;Added variable;Open sources;Proprietary systems;Refactorings;Size metrics;Open systems,,,,,,,Association for Computing Machinery,,9781450334099,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-84961238755,,United Kingdom;Ireland;Sweden,No email,,,"Counsell S., Liu X., Swift S., Buckley J., English M., Herold S., Eldh S., Ermedahl A."
"Wang, Y.",An Exploratory Investigation on Refactoring in Industrial Context,2009,"PRODUCT-FOCUSED SOFTWARE PROCESS IMPROVEMENT, PROCEEDINGS",32,,,185,198,14,1,,,"City Univ Hong Kong, Dept Informat Syst, Kowloon, Hong Kong, Peoples R China",,"Refactoring, which is an efficient method to improve the quality of the existing code, has been widely used in practical software development and maintenance activities. The current refactoring researches are more focus on the technical aspect of refactoring but pay little attention to its use in real software development environment. However, software development and maintenance, in their nature, are human-centric activities. The lack of systematic empirical studies has resulted in the gap between current refactoring researches and industrial practices. To bridge this research gap, we conduct this exploratory study to learn more about the actual use of refactoring in the industrial context. Using a series of semi-controlled interviews as our major research method, we gathered first-hand information on how the refactoring is used by practitioners. We built a three-stage framework to describe the overall refactoring process. 19 basic factors are identified and categorized. We also identify the most important ones and the factors that may trigger potential conflicts between developers and the managers. Some related issues such as this study's implications are also discussed.",Refactoring; Industrial context; Human factors,SOFTWARE REUSE,Refactoring;Industrial context;Human factors;SOFTWARE REUSE,ywang1@acm.org,"Bomarius, F; Oivo, M; Jaring, P; Abrahamsson, P","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",10th International Conference on Product-Focused Software Process Improvement,"Oulu, FINLAND","JUN 15-17, 2009",SPRINGER-VERLAG BERLIN,1865-1348,978-3-642-02151-0,,,English,LECT NOTES BUS INF,Proceedings Paper,WoS,Computer Science,WOS:000267795400015,2-s2.0-70149113445,China,acm.org,Dept Informat Syst,"Dept Informat Syst, China","Wang, Yi"
"Nino, N., Metzner, C., Crema, A., Correa, E.",An Exploratory Study for Identifying and Implementing Concerns in Integer Programming,2009,TRANSACTIONS ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT V,5490,,,45,71,27,0,,,"[Nino, Norelva; Metzner, Christiane; Crema, Alejandro; Correa, Eliezer] Cent Univ Venezuela, Fac Ciencias, Escuela Computac, Caracas 1041A, Venezuela",,"In this paper, we analyze the suitability of refactoring the integer programming algorithms Branch and Bound and Branch and Cut with aspects implemented in Computational Infrastructure for Operations Research (COIN-OR), an open source library for Operations Research. For identifying the concerns in the code, we propose a classification of concerns in terms of requirements. We transformed the rules of an existing Aspect-Oriented Programming (AOP) refactoring catalog for Java to a corresponding catalog for AspectC++ and developed a refactored version of the implemented algorithms using our transformed rules. The execution time of Branch and Bound and Branch and Cat was measured and the impact of using AOP was analyzed. The results are very encouraging and we assess that besides a customizable code, the execution time did not degrade with AOP.",Aspect-Oriented Programming; Integer Programming; Refactoring; AspectC plus,,Aspect-Oriented Programming;Integer Programming;Refactoring;AspectC plus,norelva.nino@ciens.ucv.ve; christiane.metzner@ciens.ucv.ve; alejandro.crema@ciens.ucv.ve; elcorrea@gmail.com,"Rashid, A; Ossher, H","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",,,,SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-02058-2,,,English,LECT NOTES COMPUT SC,Article; Book Chapter,WoS,Computer Science,WOS:000268396800002,,Venezuela,ciens.ucv.ve,Cent Univ Venezuela,"Cent Univ Venezuela, Venezuela","Nino, Norelva; Metzner, Christiane; Crema, Alejandro; Correa, Eliezer"
"Canfora G., Cerulo L., Di Penta M., Pacilio F.",An exploratory study of factors influencing change entropy,2010,IEEE International Conference on Program Comprehension,,, 5521755,134,143,,6,10.1109/ICPC.2010.32,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77956165766&doi=10.1109%2fICPC.2010.32&partnerID=40&md5=1f74dfc938ad07e2c15190e670246627,"Dept. of Engineering-RCOST, University of Sannio, Italy; Dept. of Biological and Environmental Studies, University of Sannio, Italy; Sytel Reply Srl, Italy","Canfora, G., Dept. of Engineering-RCOST, University of Sannio, Italy; Cerulo, L., Dept. of Biological and Environmental Studies, University of Sannio, Italy; Di Penta, M., Dept. of Engineering-RCOST, University of Sannio, Italy; Pacilio, F., Sytel Reply Srl, Italy","Software systems continuously change for various reasons, such as adding new features, performing bug fixing, or doing some refactoring activities. Such changes may either increase the source code complexity and disorganization, or help to reduce it. Developers apply adequate design principles and assets, including design patterns, to make software resilient to changes and control complexity. This paper empirically investigates the relationship of source code complexity and disorganization - measured using source code entropy - with three factors: different kinds of changes occurring to software systems, the presence of design patterns in the source code, and the number of contributors that modified the source code file. Results of an exploratory study carried out on an interval of the life-time span of two open source systems, ArgoUML and Eclipse-JDT, suggest that (i) different kinds of changes - namely refactorings and other kinds of changes - may contribute either negatively or positively to the entropy, (ii) the use of design patterns does not necessarily help to mitigate code degradation - thus confirming previous findings on the role played by design patterns - and (iii) entropy tends to increase with the number of file committers. © 2010 IEEE.",Design patterns; Empirical study; Software entropy; Software evolution,Bug-fixing; Control complexity; Design Patterns; Design Principles; Empirical studies; Exploratory studies; Life-times; Open source system; Refactorings; Software entropy; Software Evolution; Software systems; Source codes; Computer programming; Computer software; Entropy; Open systems; Design,Design patterns;Empirical study;Software entropy;Software evolution;Bug-fixing;Control complexity;Design Principles;Empirical studies;Exploratory studies;Life-times;Open source system;Refactorings;Software systems;Source codes;Computer programming;Computer software;Entropy;Open systems;Design,"Canfora, G.; Dept. of Engineering-RCOST, University of SannioItaly; email: canfora@unisannio.it",,,,,,,,9780769541136,,,English,IEEE Int. Conf. Program Comprehension,Conference Paper,Scopus,,2-s2.0-77956165766,,Italy,unisannio.it,,,"Canfora G., Cerulo L., Di Penta M., Pacilio F."
"Sousa, B.L., Bigonha, M.A.S., Ferreira, K.A.M.",An exploratory study on cooccurrence of design patterns and bad smells using software metrics,2019,SOFTWARE-PRACTICE & EXPERIENCE,49,7,,1079,1113,35,0,10.1002/spe.2697,,"[Sousa, Bruno L.; Bigonha, Mariza A. S.] Univ Fed Minas Gerais, Dept Comp Sci, BR-31270901 Belo Horizonte, MG, Brazil; [Ferreira, Kecia A. M.] Fed Ctr Technol Educ Minas Gerais CEFET MG, Dept Comp, Belo Horizonte, MG, Brazil",,"A design pattern is a general reusable solution to commonly recurring problems in software projects. Bad smells are symptoms existing in the source code that possibly indicate the presence of a structural problem that requires code refactoring. Although design pattern and bad smells be different concepts, literature has shown that they may be related and cooccur during the evolution of a software system. This paper presents an empirical study that investigates cooccurrences of design patterns and bad smells as well as identifies the main factors that contribute to the emergence of the relationship between them. We carried out a case study with five Java systems to: (1) investigate if the use of design pattern reduces bad smell occurrence, (2) identify cooccurrences of design patterns and bad smells, and (3) identify situations that contribute for the cooccurrence emergence. As the main result, we found that the application of design pattern not necessarily avoid bad smell occurrences. The results also show that some design patterns such as composite, factory method, and singleton, are intrinsically modular and might be useful in creating high-quality systems. However, other design patterns such as adapter-command, proxy, and state-strategy, have presented high cooccurrence frequency with bad smells; therefore, they require attention in their implementation. Finally, via manual inspection in the components with cooccurrence, we found that the identified cooccurrences appeared due to poor planning and inadequate application of design patterns.",bad smell; cooccurrence; design pattern; software metrics,CODE SMELLS,bad smell;cooccurrence;design pattern;software metrics;CODE SMELLS,bruno.luan.sousa@dcc.ufmg.br,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY,0038-0644,,,,English,SOFTWARE PRACT EXPER,Article,WoS,Computer Science,WOS:000471053400002,2-s2.0-85065452299,Brazil,dcc.ufmg.br,Univ Fed Minas Gerais;Fed Ctr Technol Educ Minas Gerais CEFET MG,"Univ Fed Minas Gerais, Brazil;Fed Ctr Technol Educ Minas Gerais CEFET MG, Brazil","Sousa, Bruno L.; Bigonha, Mariza A. S.; Ferreira, Kecia A. M."
"Palomba, F., Zaidman, A., Oliveto, R., De Lucia, A.",An Exploratory Study on the Relationship between Changes and Refactoring,2017,2017 IEEE/ACM 25TH INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC),,,,176,185,10,11,10.1109/ICPC.2017.38,,"[Palomba, Fabio; Zaidman, Andy] Delft Univ Technol, Delft, Netherlands; [De Lucia, Andrea] Univ Salerno, Fisciano, Italy; [Oliveto, Rocco] Univ Molise, Campobasso, Italy",,"Refactoring aims at improving the internal structure of a software system without changing its external behavior. Previous studies empirically assessed, on the one hand, the benefits of refactoring in terms of code quality and developers' productivity, and on the other hand, the underlying reasons that push programmers to apply refactoring. Results achieved in the latter investigations indicate that besides personal motivation such as the responsibility concerned with code authorship, refactoring is mainly performed as a consequence of changes in the requirements rather than driven by software quality. However, these findings have been derived by surveying developers, and therefore no software repository study has been carried out to corroborate the achieved findings. To bridge this gap, we provide a quantitative investigation on the relationship between different types of code changes (i.e., Fault Repairing Modification, Feature Introduction Modification, and General Maintenance Modification) and 28 different refactoring types coming from 3 open source projects. Results showed that developers tend to apply a higher number of refactoring operations aimed at improving maintainability and comprehensibility of the source code when fixing bugs. Instead, when new features are implemented, more complex refactoring operations are performed to improve code cohesion. Most of the times, the underlying reasons behind the application of such refactoring operations are represented by the presence of duplicate code or previously introduced self-admitted technical debts.",Refactoring; Code Changes; Empirical Studies,SOFTWARE; OPPORTUNITIES,Refactoring;Code Changes;Empirical Studies;SOFTWARE;OPPORTUNITIES,f.palomba@tudelft.nl; a.e.zaidman@tudelft.nl; rocco.oliveto@unimol.it; adelucia@unisa.it,,"345 E 47TH ST, NEW YORK, NY 10017 USA",25th IEEE/ACM International Conference on Program Comprehension (ICPC),"Buenos Aires, ARGENTINA","MAY 22-23, 2017",IEEE,1092-8138,978-1-5386-0535-6,,,English,INT C PROGRAM COMPRE,Proceedings Paper,WoS,Computer Science,WOS:000414246900017,2-s2.0-85025172556,Netherlands;Italy,tudelft.nl,Delft Univ Technol;Univ Salerno;Univ Molise,"Delft Univ Technol, Netherlands;Univ Salerno, Italy;Univ Molise, Italy","Palomba, Fabio; Zaidman, Andy; Oliveto, Rocco; De Lucia, Andrea"
"Brown, C., Li, H.Q., Thompson, S.",An Expression Processor: A Case Study in Refactoring Haskell Programs,2011,TRENDS IN FUNCTIONAL PROGRAMMING,6546,,,31,+,3,1,,,"[Brown, Christopher] Univ St Andrews, Sch Comp Sci, St Andrews KY16 9AJ, Fife, Scotland; [Li, Huiqing; Thompson, Simon] Univ Kent, Sch Comput, Canterbury CT2 7NZ, Kent, England",,"Refactoring is the process of changing the structure of a program while preserving its behaviour in order to increase code quality, programming productivity and code reuse. With the advent of refactoring tools, refactoring can be performed semi-automatically, allowing refactorings to be performed (and undone) easily. In this paper, we briefly describe a number of new refactorings for Haskell 98 programs implemented in the Haskell Refactorer, HaRe. In particular, a number of new structural and data-type refactorings are presented. We also implement a simple expression processor, clearly demonstrating how the refactorings and the HaRe tool can aid programmers in developing Haskell software. We conclude the paper with a discussion of the benefits of refactoring Haskell programs, together with their implementation and design limitations.",,,,chrisb@cs.st-andrews.ac.uk; H.Li@kent.ac.uk; S.J.Thompson@kent.ac.uk,"Page, R; Horvath, Z; Zsok, V","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",11th Symposium on Trends in Functional Programming,"Univ Oklahoma, Norman, OK","MAY 17-19, 2010",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-22940-4,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000306674800003,2-s2.0-80052809268,United Kingdom,cs.st-andrews.ac.uk,Univ St Andrews;Univ Kent,"Univ St Andrews, United Kingdom;Univ Kent, United Kingdom","Brown, Christopher; Li, Huiqing; Thompson, Simon"
"Tiarks, R., Koschke, R., Falke, R.",An extended assessment of type-3 clones as detected by state-of-the-art tools,2011,SOFTWARE QUALITY JOURNAL,19,2,,295,331,37,12,10.1007/s11219-010-9115-6,,"[Tiarks, Rebecca; Koschke, Rainer; Falke, Raimar] Univ Bremen, D-28359 Bremen, Germany",,"Code reuse through copying and pasting leads to so-called software clones. These clones can be roughly categorized into identical fragments (type-1 clones), fragments with parameter substitution (type-2 clones), and similar fragments that differ through modified, deleted, or added statements (type-3 clones). Although there has been extensive research on detecting clones, detection of type-3 clones is still an open research issue due to the inherent vagueness in their definition. In this paper, we analyze type-3 clones detected by state-of-the-art tools and investigate type-3 clones in terms of their syntactic differences. Then, we derive their underlying semantic abstractions from their syntactic differences. Finally, we investigate whether there are code characteristics that indicate that a tool-suggested clone candidate is a real type-3 clone from a human's perspective. Our findings can help developers of clone detectors and clone refactoring tools to improve their tools.",Software clones; Clone categorization; Type-3 clones,EDITING DISTANCE; TREES; CODE; ALGORITHMS; SYSTEM,Software clones;Clone categorization;Type-3 clones;EDITING DISTANCE;TREES;CODE;ALGORITHMS;SYSTEM,beccs@informatik.uni-bremen.de; koschke@informatik.uni-bremen.de; rfalke@informatik.uni-bremen.de,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",9th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM 2009),"Edmonton, CANADA","SEP 20-22, 2009",SPRINGER,0963-9314,,,,English,SOFTWARE QUAL J,Article; Proceedings Paper,WoS,Computer Science,WOS:000288552500003,2-s2.0-79952814906,Germany,informatik.uni-bremen.de,Univ Bremen,"Univ Bremen, Germany","Tiarks, Rebecca; Koschke, Rainer; Falke, Raimar"
"Kummer, O., Wienberg, F., Duvigneau, M., Schumacher, J., Kohler, M., Moldt, D., Rolke, H., Valk, R.",An extensible editor and simulation engine for Petri nets: RENEW,2004,"APPLICATIONS AND THEORY OF PETRI NETS 2004, PROCEEDINGS",3099,,,484,493,10,51,,,"Univ Hamburg, Dept Comp Sci, D-22527 Hamburg, Germany",,"Renew is a computer tool that supports the development and execution of object-oriented Petri nets, which include net instances, synchronous channels, and seamless Java integration for easy modelling. Renew is available free of charge including the Java source code. Due to the growing application area more and more requirements had to be fulfilled by the tool set. Therefore, the architecture of the tool has been refactored to gain more flexibility. Now new features allow for plug-ins on the level of concepts (net formalisms) and on the level of applications (e.g. workflow or agents).",reference nets; RENEW; plug-in; architecture; high-level Petri nets; nets-within; nets; tool; integrated development environment,,reference nets;RENEW;plug-in;architecture;high-level Petri nets;nets-within;nets;tool;integrated development environment,kummer@informatik.uni-hamburg.de; wienburg@informatik.uni-hamburg.de; duvigneau@informatik.uni-hamburg.de; 6schumac@informatik.uni-hamburg.de; koehler@informatik.uni-hamburg.de; moldt@informatik.uni-hamburg.de; roelke@informatik.uni-hamburg.de; valk@informatik.uni-hamburg.de,"Cortadella, J; Reisig, W","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",25th International Conference on Applications and Theory of Petri Nets,"Bologna, ITALY","JUN 21-25, 2004",SPRINGER-VERLAG BERLIN,0302-9743,3-540-22236-7,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000222626100029,,Germany,informatik.uni-hamburg.de,Dept Comp Sci,"Dept Comp Sci, Germany","Kummer, O; Wienberg, F; Duvigneau, M; Schumacher, J; Kohler, M; Moldt, D; Rolke, H; Valk, R"
"Strein, D., Lincke, R., Lundberg, J., Lowe, W.",An extensible metamodel for program analysis,2007,IEEE TRANSACTIONS ON SOFTWARE ENGINEERING,33,9,,592,607,16,8,10.1109/tse.2007.70710,,"Omnicore Software, D-76137 Karlsruhe, Germany; Vaxjo Univ, Software Technol Grp, SE-35195 Vaxjo, Sweden",,"Software maintenance tools for program analysis and refactoring rely on a metamodel capturing the relevant properties of programs. However, what is considered relevant may change when the tools are extended with new analyses, refactorings, and new programming languages. This paper proposes a language independent metamodel and an architecture to construct instances thereof, which is extensible for new analyses, refactorings, and new front-ends of programming languages. Due to the loose coupling between analysis, refactoring, and front-end components, new components can be added independently and reuse existing ones. Two maintenance tools implementing the metamodel and the architecture, VIZZANALYZER and X-DEVELOP, serve as proof of concept.",programming environments; program analysis; metamodels,SOFTWARE,programming environments;program analysis;metamodels;SOFTWARE,strein@omnicore.com; trudiger.lincke@vxu.se; jonasll@msi.vxu.se; Welf.Lowe@vxu.se,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA",,,,IEEE COMPUTER SOC,0098-5589,,,,English,IEEE T SOFTWARE ENG,Article,WoS,Computer Science; Engineering,WOS:000248885000002,WOS:000241728200052;2-s2.0-34548216260;2-s2.0-34547251110,Germany;Sweden,omnicore.com,D-76137 Karlsruhe;Software Technol Grp,"D-76137 Karlsruhe, Germany;Software Technol Grp, Sweden","Strein, Dennis; Lincke, Rudiger; Lundberg, Jonas; Lowe, Welf"
"Piccioni, M., Oriol, M., Meyer, B., Schneider, T.","An IDE-based, integrated solution to Schema Evolution of Object-Oriented Software",2009,"2009 IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS",,,,650,654,5,3,10.1109/ASE.2009.100,,"[Piccioni, Marco; Meyer, Bertrand; Schneider, Teseo] ETH, Chair Software Engn, Zurich, Switzerland; [Oriol, Manuel] Univ York, York YO10 5DD, N Yorkshire, England",,"With the wide support for serialization in object-oriented programming languages, persistent objects have become common place. Retrieving previously ""persisted"" objects from classes whose schema changed is however difficult, and may lead to invalidating the consistency of the application. The ESCHER framework addresses this issues through an IDE-based approach that handles schema evolution by managing versions of the code and generating transformation functions automatically. The infrastructure also enforces class invariants to prevent the introduction of any corrupt objects. This article describes the principles behind invariant-safe schema evolution, and the design and implementation of the ESCHER system.",versioning; refactoring; persistence; serialization; object-oriented schema evolution; IDE integration,,versioning;refactoring;persistence;serialization;object-oriented schema evolution;IDE integration,marco.piccioni@inf.ethz.ch; manuel@cs.york.ac.uk; bertrand.meyer@inf.ethz.ch; teseos@student.ethz.ch,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",24th IEEE/ACM International Conference on Automated Software Engineering,"Auckland, NEW ZEALAND","NOV 16-20, 2009",IEEE COMPUTER SOC,1527-1366,978-0-7695-3891-4,,,English,IEEE INT CONF AUTOM,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000278137400071,2-s2.0-77952173360,Switzerland;United Kingdom,inf.ethz.ch,ETH;Univ York,"ETH, Switzerland;Univ York, United Kingdom","Piccioni, Marco; Oriol, Manuel; Meyer, Bertrand; Schneider, Teseo"
"Monteiro, M.P., Fernandes, J.M.",An illustrative example of refactoring object-oriented source code with aspect-oriented mechanisms,2008,SOFTWARE-PRACTICE & EXPERIENCE,38,4,,361,396,36,10,10.1002/spe.835,,"[Fernandes, Joao M.] Univ Minho, Dept Informat, P-4710057 Braga, Portugal; [Fernandes, Joao M.] Univ Minho, CCTC, P-4710057 Braga, Portugal; [Monteiro, Miguel P.] Univ Nova Lisboa, Fac Ciencias & Tecnol, Dept Informat, P-28298516 Caparica, Portugal",,"This paper describes a refactoring process that transforms a Java source code base into a functionally equivalent AspectJ source code base. The process illustrates the use of a collection of refactorings for aspect-oriented source code, covering the extraction of scattered implementation elements to aspects, the internal reorganization of the extracted aspects and the extraction of commonalities to super-aspects. Copyright (c) 2007 John Wiley & Sons, Ltd.",refactoring; aspect-oriented programming; design patterns,,refactoring;aspect-oriented programming;design patterns,jmf@di.uminho.pt,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY,0038-0644,,,,English,SOFTWARE PRACT EXPER,Article,WoS,Computer Science,WOS:000254854300002,2-s2.0-41049100868,Portugal,di.uminho.pt,Univ Minho;Univ Nova Lisboa,"Univ Minho, Portugal;Univ Nova Lisboa, Portugal","Monteiro, Miguel P.; Fernandes, Joao M."
"Medina, N.M., Burella, J., Rossi, G., Grigera, J., Luna, E.R.",An Incremental Approach for Building Accessible and Usable Web Applications,2010,WEB INFORMATION SYSTEM ENGINEERING-WISE 2010,6488,,,564,+,3,7,,,"[Medina Medina, Nuria] Univ Granada, Dept Lenguajes & Sistemas Informat, E-18071 Granada, Spain; [Burella, Juan] Univ Buenos Aires, Dept Comp, RA-1053 Buenos Aires, DF, Argentina; [Rossi, Gustavo; Grigera, Julian; Robles Luna, Esteban] UNLP, Fac Informat, LIFIA, La Plata, Buenos Aires, Argentina; [Burella, Juan; Rossi, Gustavo] Consejo Nacl Invest Cient & Tecn, Buenos Aires, DF, Argentina",,"Building accessible Web applications is difficult, moreover considering the fact that they are constantly evolving. To make matters more critical, an application which conforms to the well-known W3C accessibility standards is not necessarily usable for handicapped persons. In fact, the user experience, when accessing a complex Web application, using for example screen readers, tends to be far from friendly. In this paper we present an approach to safely transform Web applications into usable and accessible ones. The approach is based on an adaptation of the well-known software refactoring technique. We show how to apply accessibility refactorings to improve usability in accessible applications, and how to make the process of obtaining this ""new"" application cost-effective, by adapting an agile development process.",Accessibility Visually Impaired; Web engineering; TDD; Web requirements,DESIGN,Accessibility Visually Impaired;Web engineering;TDD;Web requirements;DESIGN,nmedina@ugr.es; jburella@dc.uba.ar; gustavo@lifia.info.unlp.edu.ar; julian.grigera@lifia.info.unlp.edu.ar; esteban.robles@lifia.info.unlp.edu.ar,"Chen, L; Triantafillou, P; Suel, T","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",11th International Conference on Web Information Systems Engineering,"Hong Kong, PEOPLES R CHINA","DEC 12-14, 2010",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-17615-9,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000286484400049,2-s2.0-78751503966,Spain;Argentina,ugr.es,Univ Granada;Univ Buenos Aires;UNLP;Consejo Nacl Invest Cient & Tecn,"Univ Granada, Spain;Univ Buenos Aires, Argentina;UNLP, Argentina;Consejo Nacl Invest Cient & Tecn, Argentina","Medina Medina, Nuria; Burella, Juan; Rossi, Gustavo; Grigera, Julian; Robles Luna, Esteban"
"Kelsen, P.",An information-based view of representational coupling in object-oriented systems,2003,"FUNDAMENTAL APPROACHES TO SOFTWARE ENGINEERING, PROCEEDINGS",2621,,,216,230,15,0,,,"Luxembourg Univ Appl Sci, Dept Appl Comp Sci, L-1359 Luxembourg, Luxembourg",,"In this paper we investigate a special type of coupling in object-oriented systems. When a method of a class C invokes a method of a class D, the method of C becomes dependent on the representational details of D: the more low-level the service provided by D is the higher the dependency of C on D. This dependency is known as representational coupling. Coupling in general, and representational coupling in particular, are important because they influence the extensibility of a system, that is, the ease with which software can be adapted to changing requirements: the higher the coupling the harder it is to make changes since any changes local to one module are likely to affect many other modules. We propose a qualitative measure of representational coupling (as opposed to quantitative measures provided by metrics) that is based on partial orders over equivalence relations on the state space. We also introduce the notion of intrinsic representational coupling that expresses the amount of representational coupling that is inherent to the system. Finally, we show that despite its non-quantitative nature our measure can be useful in identifying candidate methods for refactoring. We demonstrate this by applying our measure to several examples in the literature, showing in each case how an implementation with non-minimal representational coupling can be transformed using a few simple refactorings into a solution with minimal representational coupling (equal to the intrinsic representational coupling).",coupling; object-oriented; extensibility; refactoring; metrics,METRICS SUITE; DESIGN,coupling;object-oriented;extensibility;refactoring;metrics;METRICS SUITE;DESIGN,,"Pezze, M","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",Joint European Conference on Theory and Practice of Software (ETAPS 2003),"WARSAW, POLAND","APR 05-13, 2003",SPRINGER-VERLAG BERLIN,0302-9743,3-540-00899-3,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000183068000016,2-s2.0-35248848813,Luxembourg,No email,Dept Appl Comp Sci,"Dept Appl Comp Sci, Luxembourg","Kelsen, P"
"Fleming, S.D., Scaffidi, C., Piorkowski, D., Burnett, M., Bellamy, R., Lawrance, J., Kwan, I.","An Information Foraging Theory Perspective on Tools for Debugging, Refactoring, and Reuse Tasks",2013,ACM TRANSACTIONS ON SOFTWARE ENGINEERING AND METHODOLOGY,22,2,14,,,41,29,10.1145/2430545.2430551,,"[Fleming, Scott D.; Scaffidi, Chris; Piorkowski, David; Burnett, Margaret; Kwan, Irwin] Oregon State Univ, Corvallis, OR 97331 USA; [Fleming, Scott D.] Univ Memphis, Memphis, TN 38152 USA; [Lawrance, Joseph] MIT, Cambridge, MA 02139 USA",,"Theories of human behavior are an important but largely untapped resource for software engineering research. They facilitate understanding of human developers' needs and activities, and thus can serve as a valuable resource to researchers designing software engineering tools. Furthermore, theories abstract beyond specific methods and tools to fundamental principles that can be applied to new situations. Toward filling this gap, we investigate the applicability and utility of Information Foraging Theory (IFT) for understanding information-intensive software engineering tasks, drawing upon literature in three areas: debugging, refactoring, and reuse. In particular, we focus on software engineering tools that aim to support information-intensive activities, that is, activities in which developers spend time seeking information. Regarding applicability, we consider whether and how the mathematical equations within IFT can be used to explain why certain existing tools have proven empirically successful at helping software engineers. Regarding utility, we applied an IFT perspective to identify recurring design patterns in these successful tools, and consider what opportunities for future research are revealed by our IFT perspective.",Design; Human Factors; Information foraging; software maintenance,SOFTWARE MAINTENANCE; CODE CLONES; SNIF-ACT; CONTEXT; MODEL,Design;Human Factors;Information foraging;software maintenance;CODE CLONES;SNIF-ACT;CONTEXT;MODEL,sdfleming@memphis.edu; cscaffid@eecs.oregonstate.edu; piorkoda@onid.orst.edu; burnett@eecs.oregonstate.edu; rachel@us.ibm.com; lawrance@mit.edu; kwan@eecs.oregonstate.edu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,1049-331X,,,,English,ACM T SOFTW ENG METH,Article,WoS,Computer Science,WOS:000322480600005,2-s2.0-84876106539,United States,memphis.edu,Oregon State Univ;Univ Memphis;MIT,"Oregon State Univ, United States;Univ Memphis, United States;MIT, United States","Fleming, Scott D.; Scaffidi, Chris; Piorkowski, David; Burnett, Margaret; Bellamy, Rachel; Lawrance, Joseph; Kwan, Irwin"
"Collard, M.L.",An infrastructure to support meta-differencing and refactoring of source code,2003,"18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS",,,,377,380,4,1,10.1109/ASE.2003.1240342,,"Kent State Univ, Dept Comp Sci, Kent, OH 44242 USA",,,,,,collard@cs.kent.edu,"Werner, B","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",18th IEEE International Conference on Automated Software Engineering,"MONTREAL, CANADA","OCT 06-10, 2003",IEEE COMPUTER SOC,,0-7695-2035-9,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000186519300054,,United States,cs.kent.edu,Dept Comp Sci,"Dept Comp Sci, United States","Collard, ML"
"Soetens, Q.D., Perez, J., Demeyer, S.",An Initial Investigation into Change-Based Reconstruction of Floss-Refactorings,2013,2013 29TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM),,,,384,387,4,8,10.1109/ICSM.2013.53,,"[Soetens, Quinten David; Perez, Javier; Demeyer, Serge] Univ Antwerp, B-2020 Antwerp, Belgium",,"Today, it is widely accepted that if refactoring is applied in practice, it is mainly interweaved with normal software development - so called ""floss refactoring"". Unfortunately, the current state-of-the-art is poorly equipped to mine floss refactoring from version histories, mainly because they infer refactorings by comparing two snapshots of a system and making educated guesses about the precise edit operations applied in between. In this paper we propose a solution that reconstructs refactorings not on snapshots of a system but using the actual changes as they are performed in an integrated development environment. We compare our solution against RefFinder and demonstrate that on a small yet representative program (the well-known ""VideoRental system"") our approach is more accurate in identifying occurrences of the ""MOVEMETHOD"" and ""RENAMEMETHOD"" refactorings.",,,,,,"345 E 47TH ST, NEW YORK, NY 10017 USA",29th IEEE International Conference on Software Maintenance (ICSM),"Eindhoven, NETHERLANDS","SEP 22-28, 2013",IEEE,1063-6773,,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000332836100043,2-s2.0-84891667152,Belgium,No email,Univ Antwerp,"Univ Antwerp, Belgium","Soetens, Quinten David; Perez, Javier; Demeyer, Serge"
"Liu, H., Gao, Y., Niu, Z.D.",An Initial Study on Refactoring Tactics,2012,2012 IEEE 36TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE (COMPSAC),,,,213,218,6,6,10.1109/COMPSAC.2012.31,,"[Liu, Hui; Gao, Yuan; Niu, Zhendong] Beijing Inst Technol, Sch Comp Sci & Technol, Beijing 100081, Peoples R China",,"Software refactoring might be done in two different tactics. The first one is XP-style small-step refactoring, also called floss refactoring. The other tactic, called root canal refactoring, is to set aside an extended period specially for refactoring. Floss refactoring, as one of the corner stones of XP, is well acknowledged. In contrast, root canal refactoring is doubted, especially by XP advocators. Despite the doubts, however, no large scale empirical study on refactoring tactics has been reported. In contrast to the doubts, cases of root canal refactoring have been reported from industry, e. g., Microsoft. Researchers from academe have also proposed various approaches to facilitating root canal refactoring. To this end, this paper would investigate the following questions. (1) How often are the two different tactics employed, respectively? (2) Is there any correlation between refactoring tactics and categories of refactorings? In other words, are some kinds of refactorings more likely than others to be done as floss refactorings or root canal refactorings? To answer these questions, we analyze refactoring histories collected by Eclipse Usage Data Collector (UDC). The data are collected from 753,367 engineers worldwide. Analysis results suggest that about 11.5 percent of refactorings collected by UDC are root canal refactorings, whereas others (88.5 percent) are floss refactorings. We also find that some kinds of refactorings, e. g., Introduce Parameter, are more likely than others to be performed as root canal refactorings.",Software Refactoring; Tactic; XP; Refactoring History; Empirical Study,,Software Refactoring;Tactic;XP;Refactoring History;Empirical Study,liuhui08@bit.edu.cn; yuangao@bit.edu.cn; zniu@bit.edu.cn,"Bai, X; Belli, F; Bertino, E; Chang, CK; Elci, A; Seceleanu, C; Xie, H; Zulkernine, M","345 E 47TH ST, NEW YORK, NY 10017 USA",36th Annual IEEE International Computer Software and Applications Conference (COMPSAC),"Izmir Inst Technol (IZTECH), Izmir, TURKEY","JUL 16-20, 2012",IEEE,0730-3157,978-0-7695-4736-7,,,English,P INT COMP SOFTW APP,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000312376000029,2-s2.0-84870771297,China,bit.edu.cn,Beijing Inst Technol,"Beijing Inst Technol, China","Liu, Hui; Gao, Yuan; Niu, Zhendong"
"Smith S., Stoecklin S., Serino C.",An innovative approach to teaching refactoring,2007,Proceedings of the Thirty-Seventh SIGCSE Technical Symposium on Computer Science Education,,,,349,353,,7,10.1145/1121341.1121451,https://www.scopus.com/inward/record.uri?eid=2-s2.0-37849038698&doi=10.1145%2f1121341.1121451&partnerID=40&md5=21b3c2295d7fc1536fb21b6da2a05aa3,"Computer and Information Sciences Department, East Tennessee State University, Johnson City, TN, United States; Computer Science Department, Florida State University, Panama City, FL, United States; School of Business, North Carolina Central University, Durham, NC, United States","Smith, S., Computer and Information Sciences Department, East Tennessee State University, Johnson City, TN, United States; Stoecklin, S., Computer Science Department, Florida State University, Panama City, FL, United States; Serino, C., School of Business, North Carolina Central University, Durham, NC, United States","Refactoring is the process of transforming the internal structure of existing code while keeping the integrity of the code's functional requirements. Refactoring is proven to increase program maintainability, flexibility, and understandability and is recognized as a best practice in the software development community. However, with the exception of courses or lectures on extreme programming, refactoring is overlooked in the computer science curriculum. This paper helps demystify refactoring by introducing an incremental approach for teaching refactoring on the college level. Through this hands-on approach, refactoring can become an integral component in the computer science curriculum and an innovative means of reinforcing software engineering principles and good development practices. The approach and three introductory lessons are presented in this paper. Copyright 2006 ACM.",Computer science curriculum; Extreme programming; Object-oriented design; Refactoring; Software engineering,Codes (symbols); Curricula; Object oriented programming; Software engineering; Systems analysis; Extreme programming; Refactoring; Teaching,Computer science curriculum;Extreme programming;Object-oriented design;Refactoring;Software engineering;Codes (symbols);Curricula;Object oriented programming;Systems analysis;Teaching,"Smith, S.; Computer and Information Sciences Department, East Tennessee State University, Johnson City, TN, United States; email: smits01@etsu.edu",,,,,,,,9781595932594,,,English,Proc. Thirty-Seventh SIGCSE Tech. Symp. Comput. Sci. Educ.,Conference Paper,Scopus,,2-s2.0-37849038698,,United States,etsu.edu,,,"Smith S., Stoecklin S., Serino C."
"Mehani, O., Jourjon, G., Rakotoarivelo, T., Ott, M.",An instrumentation framework for the critical task of measurement collection in the future Internet,2014,COMPUTER NETWORKS,63,,,68,83,16,12,10.1016/j.bjp.2014.01.007,,"[Mehani, Olivier; Jourjon, Guillaume; Rakotoarivelo, Thierry; Ott, Max] NICTA, Eveleigh, NSW 2015, Australia",,"Experimental research on future Internet technologies involves observing multiple metrics at various distributed points of the networks under study. Collecting these measurements is often a tedious, repetitive and error prone task, be it in a testbed or in an uncontrolled field experiment. The relevant experimental data is usually scattered across multiple hosts in potentially different formats, and sometimes buried amongst a trove of other measurements, irrelevant to the current study. Collecting, selecting and formatting the useful measurements is a time-consuming and error-prone manual operation. In this paper, we present a conceptual Software-Defined Measurement (SDM) framework to facilitate this task. It includes a common representation for any type of experimental data, as well as the elements to process and collect the measurement samples and their associated metadata. We then present an implementation of this concept, which we built as a major extension and refactoring of the existing Orbit Measurement Library (OML). We outline its API, and how it can be used to instrument an experiment in only a few lines of code. We also evaluate the current implementation, and demonstrate that it efficiently allows measurement collection without interfering with the systems under observation. (C) 2014 Elsevier B.V. All rights reserved.",Network measurements; Instrumentation system; Software-Defined Measurement; Performance evaluation; OML,ARCHITECTURE; SYSTEMS,Network measurements;Instrumentation system;Software-Defined Measurement;Performance evaluation;OML;ARCHITECTURE;SYSTEMS,olivier.mehani@nicta.com.au; guillaume.jourjon@nicta.com.au; thierry.rakotoarivelo@nicta.com.au; max.ott@nicta.com.au,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,1389-1286,,,,English,COMPUT NETW,Article,WoS,Computer Science; Engineering; Telecommunications,WOS:000335610600006,2-s2.0-84899457274,Australia,nicta.com.au,NICTA,"NICTA, Australia","Mehani, Olivier; Jourjon, Guillaume; Rakotoarivelo, Thierry; Ott, Max"
"Marin, M., van Deursen, A., Moonen, L., van der Rijst, R.",An integrated crosscutting concern migration strategy and its semi-automated application to JHotDraw,2009,AUTOMATED SOFTWARE ENGINEERING,16,2,,323,356,34,10,10.1007/s10515-009-0051-2,,"[Marin, Marius] Accenture, Technol Architecture, NL-1082 MA Amsterdam, Netherlands; [van Deursen, Arie; van der Rijst, Robin] Delft Univ Technol, Delft, Netherlands; [Moonen, Leon] Simula Res Lab, Lysaker, Norway",,"In this paper we propose a systematic strategy for migrating crosscutting concerns in existing object-oriented systems to aspect-oriented programming solutions. The proposed strategy consists of four steps: mining, exploration, documentation and refactoring of crosscutting concerns. We discuss in detail a new approach to refactoring to aspect-oriented programming that is fully integrated with our strategy, and apply the whole strategy to an object-oriented system, namely the JHotDraw framework. Moreover, we present a method to semi-automatically perform the aspect-introducing refactorings based on identified crosscutting concern sorts which is supported by a prototype tool called sair. We perform an exploratory case study in which we apply this tool on the same object-oriented system and compare its results with the results of manual migration in order to assess the feasibility of automated aspect refactoring. Both the refactoring tool sair and the results of the manual migration are made available as open-source, the latter providing the largest aspect-introducing refactoring available to date. We report on our experiences with conducting both case studies and reflect on the success and challenges of the migration process.",Program analysis; Code refactoring; Cross cutting concerns; Concern modeling; Aspect-oriented programming; Reverse engineering; Software engineering,SOURCE-CODE,Program analysis;Code refactoring;Cross cutting concerns;Concern modeling;Aspect-oriented programming;Reverse engineering;Software engineering;SOURCE-CODE,marius.marin@accenture.com; arie.vandeursen@tudelft.nl; leon.moonen@computer.org; rvdrijst@gmail.com,,"233 SPRING ST, NEW YORK, NY 10013 USA",7th IEEE International Working Conference on Source Code Analysis and Manipulation,"Paris, FRANCE","SEP 30-OCT 01, 2007",SPRINGER,0928-8910,,,,English,AUTOMAT SOFTW ENG,Article; Proceedings Paper,WoS,Computer Science,WOS:000265084000006,2-s2.0-65049086601,Netherlands;Norway,accenture.com,Accenture;Delft Univ Technol;Simula Res Lab,"Accenture, Netherlands;Delft Univ Technol, Netherlands;Simula Res Lab, Norway","Marin, Marius; van Deursen, Arie; Moonen, Leon; van der Rijst, Robin"
"Sugumaran V., Dehondt G.",An integrated framework for code reuse and refactoring in extreme programming,2007,"Association for Information Systems - 13th Americas Conference on Information Systems, AMCIS 2007: Reaching New Heights",2,,,889,899,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84870188558&partnerID=40&md5=7acefd7a2ee7abe7c1a9c57227734264,"Department of Decision and Information Sciences, Oakland University, United States; Department of Management and Information Systems, Kent State University, United States","Sugumaran, V., Department of Decision and Information Sciences, Oakland University, United States; Dehondt, G., Department of Decision and Information Sciences, Oakland University, United States, Department of Management and Information Systems, Kent State University, United States",ode reuse has been an area of study in the academic literature for the past three decades and is widely seen as one of the major areas for improving software productivity. Agile development techniques were first developed in the mid-1990s as a code-oriented method of software development that seeks to improve upon the traditional plan-based methodologies. Both approaches bring value to the software development process. The purpose of this paper is to propose a framework that will integrate the strengths of code reuse into the Extreme Programming methodology. It is believed that this approach will lead to a more effective method of software development.,Agile development; Extreme programming; Software development methodologies,Academic literature; Agile development; Code reuse; EXtreme Programming; Integrated frameworks; Plan-based; Refactorings; Software development methodologies; Software development process; Software productivity; Information systems; Software design,Agile development;Extreme programming;Software development methodologies;Academic literature;Code reuse;Integrated frameworks;Plan-based;Refactorings;Software development process;Software productivity;Information systems;Software design,"Sugumaran, V.; Department of Decision and Information Sciences, Oakland UniversityUnited States; email: sugumara@oakland.edu",,,,,,,,9781604233810,,,English,"Assoc. Inf. Sys. - Amer. Conf. Inf. Sys., AMCIS: Reaching New Heights",Conference Paper,Scopus,,2-s2.0-84870188558,,United States,oakland.edu,,,"Sugumaran V., Dehondt G."
"Misbhauddin, M., Alshayeb, M.",An integrated metamodel-based approach to software model refactoring,2019,SOFTWARE AND SYSTEMS MODELING,18,3,,2013,2050,38,2,10.1007/s10270-017-0628-3,,"[Misbhauddin, Mohammed] King Faisal Univ, Informat Syst Dept, Al Hasa 31982, Saudi Arabia; [Alshayeb, Mohammad] King Fahd Univ Petr & Minerals, Informat & Comp Sci Dept, Dhahran 31261, Saudi Arabia",,"Software refactoring is the process of changing a software system in a manner that does not alter its external behavior and yet improving its internal structure. Model-driven architecture and the popularity of the UML enabled the application of refactoring at model level, which was earlier applied to software code. In this paper, we propose a multi-view integrated approach to model-driven refactoring using UML models. We selected a single model from each UML view at metamodel level to construct an integrated metamodel. We selected class diagram to represent the structural view, sequence diagram to represent the behavioral view and use case diagram to represent the functional view. We validated the proposed approach by comparing integrated refactoring approach with refactoring applied to models individually in terms of quality improvement through UML model metrics. Our results indicate that more bad smell instances can be detected using the integrated approach rather than the individual refactoring approach.",Refactoring; Metamodel; UML; Model refactoring,UML; METRICS; IMPROVEMENT; FRAMEWORK,Refactoring;Metamodel;UML;Model refactoring;METRICS;IMPROVEMENT;FRAMEWORK,mmisbhauddin@kfu.edu.sa; alshayeb@kfupm.edu.sa,,"TIERGARTENSTRASSE 17, D-69121 HEIDELBERG, GERMANY",,,,SPRINGER HEIDELBERG,1619-1366,,,,English,SOFTW SYST MODEL,Article,WoS,Computer Science,WOS:000468996100023,2-s2.0-85032370679,Saudi Arabia,kfu.edu.sa,King Faisal Univ;King Fahd Univ Petr & Minerals,"King Faisal Univ, Saudi Arabia;King Fahd Univ Petr & Minerals, Saudi Arabia","Misbhauddin, Mohammed; Alshayeb, Mohammad"
"Murphy-Hill, E., Black, A.P.",An Interactive Ambient Visualization for Code Smells,2010,SOFTVIS 2010: PROCEEDINGS OF THE 2010 INTERNATIONAL SYMPOSIUM ON SOFTWARE VISUALIZATION,,,,5,14,10,57,,,"[Murphy-Hill, Emerson] N Carolina State Univ, Dept Comp Sci, Raleigh, NC 27695 USA",,"Code smells are characteristics of software that indicate that code may have a design problem. Code smells have been proposed as a way for programmers to recognize the need for restructuring their software. Because code smells can go unnoticed while programmers are working, tools called smell detectors have been developed to alert programmers to the presence of smells in their code, and to help them understand the cause of those smells. In this paper, we propose a novel smell detector called Stench Blossom that provides an interactive ambient visualization designed to first give programmers a quick, high-level overview of the smells in their code, and then, if they wish, to help in understanding the sources of those code smells. We also describe a laboratory experiment with 12 programmers that tests several hypotheses about our tool. Our findings suggest that programmers can use our tool effectively to identify smells and to make refactoring judgements. This is partly because the tool serves as a memory aid, and partly because it is more reliable and easier to use than heuristics for analyzing smells.",Software; refactoring; usability; code smells,DESIGN,Software;refactoring;usability;code smells;DESIGN,emerson@csc.ncsu.edu; black@cs.pdx.edu,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",5th ACM Symposium on Software Visualization (SOFTVIS),"Salt Lake City, UT","OCT 25-26, 2010",ASSOC COMPUTING MACHINERY,,978-1-4503-0494-8,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000286919500003,2-s2.0-78650855103,United States,csc.ncsu.edu,N Carolina State Univ,"N Carolina State Univ, United States","Murphy-Hill, Emerson; Black, Andrew P."
"Alizadeh V., Kessentini M., Mkaouer W., Ocinneide M., Ouni A., Cai Y.",An Interactive and Dynamic Search-Based Approach to Software Refactoring Recommendations,2018,IEEE Transactions on Software Engineering,,,,,,,2,10.1109/TSE.2018.2872711,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85054369196&doi=10.1109%2fTSE.2018.2872711&partnerID=40&md5=d339f30935dfd2f6bd4d53f434289fed,"CIS Department, University of Michigan, Dearborn, Michigan United States (e-mail: alizadeh@umich.edu); CIS Department, University of Michigan, Dearborn, Michigan United States (e-mail: marouane@umich.edu); Department of Computer and Information Science, University of Michigan-Dearborn, Dearborn, Michigan United States (e-mail: mmkaouer@umich.edu); School of Computer Science and Informatics, University College Dublin, Dublin, Dublin Ireland 4 (e-mail: mel.ocinneide@ucd.ie); Computer Science, Osaka University, Osaka, Osaka Japan 565-0871 (e-mail: ouniaali@gmail.com); Computer Science, Drexel University, philadelphia, Pennsylvania United States 19104 (e-mail: yfcai@cs.drexel.edu)","Alizadeh, V., CIS Department, University of Michigan, Dearborn, Michigan United States (e-mail: alizadeh@umich.edu); Kessentini, M., CIS Department, University of Michigan, Dearborn, Michigan United States (e-mail: marouane@umich.edu); Mkaouer, W., Department of Computer and Information Science, University of Michigan-Dearborn, Dearborn, Michigan United States (e-mail: mmkaouer@umich.edu); Ocinneide, M., School of Computer Science and Informatics, University College Dublin, Dublin, Dublin Ireland 4 (e-mail: mel.ocinneide@ucd.ie); Ouni, A., Computer Science, Osaka University, Osaka, Osaka Japan 565-0871 (e-mail: ouniaali@gmail.com); Cai, Y., Computer Science, Drexel University, philadelphia, Pennsylvania United States 19104 (e-mail: yfcai@cs.drexel.edu)","Successful software products evolve through a process of continual change. However, this process may weaken the design of the software and make it unnecessarily complex, leading to significantly reduced productivity and increased fault-proneness. Refactoring improves the software design while preserving overall functionality and behavior, and is an important technique in managing the growing complexity of software systems. Most of the existing work on software refactoring uses either an entirely manual or a fully automated approach. Manual refactoring is time-consuming, error-prone and unsuitable for large-scale, radical refactoring. On the other hand, fully automated refactoring yields a static list of refactorings which, when applied, leads to a new and often hard to comprehend design. Furthermore, it is difficult to merge these refactorings with other changes performed in parallel by developers. In this paper, we propose a refactoring recommendation approach that dynamically adapts and interactively suggests refactorings to developers and takes their feedback into consideration. Our approach uses NSGA-II to find a set of good refactoring solutions that improve software quality while minimizing the deviation from the initial design. These refactoring solutions are then analyzed to extract interesting common features between them such as the frequently occurring refactorings in the best non-dominated solutions. Based on this analysis, the refactorings are ranked and suggested to the developer in an interactive fashion as a sequence of transformations. The developer can approve, modify or reject each of the recommended refactorings, and this feedback is then used to update the proposed rankings of recommended refactorings. After a number of introduced code changes and interactions with the developer, the interactive NSGA-II algorithm is executed again on the new modified system to repair the set of refactoring solutions based on the new changes and the feedback received from the developer. We evaluated our approach on a set of eight open source systems and two industrial projects provided by an industrial partner. Statistical analysis of our experiments shows that our dynamic interactive refactoring approach performed significantly better than four existing search-based refactoring techniques and one fully-automated refactoring tool not based on heuristic search. IEEE",Electronic mail; interactive optimization; Maintenance engineering; Manuals; Optimization; Refactoring; Search-based software engineering; Software quality; software quality; Tools,Automation; Electronic mail; Heuristic algorithms; Maintainability; Open source software; Open systems; Optimization; Software design; Tools; Interactive optimization; Manuals; Refactorings; Search-based software engineering; Software Quality; Computer software selection and evaluation,Electronic mail;interactive optimization;Maintenance engineering;Manuals;Optimization;Refactoring;Search-based software engineering;Software quality;Tools;Automation;Heuristic algorithms;Maintainability;Open source software;Open systems;Software design;Refactorings;Computer software selection and evaluation,,,,,,,Institute of Electrical and Electronics Engineers Inc.,00985589,,IESED,,English,IEEE Trans Software Eng,Article in Press,Scopus,,2-s2.0-85054369196,,Michigan United States (e-mail: alizadeh@umichedu);Michigan United States (e-mail: marouane@umichedu);Michigan United States (e-mail: mmkaouer@umichedu);Dublin Ireland 4 (e-mail: melocinneide@ucdie);Osaka Japan 565-0871 (e-mail: ouniaali@gmailcom);Pennsylvania United States 19104 (e-mail: yfcai@csdrexeledu),No email,,,"Alizadeh V., Kessentini M., Mkaouer W., Ocinneide M., Ouni A., Cai Y."
"Haendler T., Neumann G., Smirnov F.",An interactive tutoring system for training software refactoring,2019,CSEDU 2019 - Proceedings of the 11th International Conference on Computer Supported Education,2,,,177,188,,3,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067112894&partnerID=40&md5=182151e66bf4805ff292ab4a967c2f17,"Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","Haendler, T., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria; Neumann, G., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria; Smirnov, F., Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria","Although considered useful and important, software refactoring is often neglected in practice because of the perceived risks and difficulties of performing it. A way to address these challenges can be seen in promoting developers’ practical competences. In this paper, we propose an approach for an interactive training environment for addressing practical competences in software refactoring. In particular, we present a tutoring system that provides interactive feedback to the users (e.g., university students or software developers) regarding the software-design quality and the functional correctness of the (modified) source code. After each code modification (refactoring step), the user can review the results of run-time regression tests and compare the actual software design (as-is) with the targeted design (to-be) in order to check quality improvement. For this purpose, structural and behavioral diagrams of the Unified Modeling Language (UML2) representing the as-is software design are automatically reverse-engineered from source code. The to-be design diagrams (also in UML) can be pre-specified by the instructor. We illustrate the usability of the approach for training competences in refactoring via short application scenarios and describe exemplary learning paths. Moreover, we provide a web-based software-technical implementation in Java (called refacTutor) to demonstrate the technical feasibility of the approach. Finally, limitations and further potential of the approach are discussed. Copyright © 2019 by SCITEPRESS – Science and Technology Publications, Lda. All rights reserved.",Code visualization; Intelligent tutoring system; Interactive training environment; Software design; Software refactoring; Software-engineering education and training; Unified Modeling Language (UML2),Codes (symbols); Computer aided instruction; E-learning; Education computing; Software engineering; Software testing; Unified Modeling Language; Application scenario; Code visualization; Functional correctness; Intelligent tutoring system; Interactive training; Software design quality; Software refactoring; Technical implementation; Software design,Code visualization;Intelligent tutoring system;Interactive training environment;Software design;Software refactoring;Software-engineering education and training;Unified Modeling Language (UML2);Codes (symbols);Computer aided instruction;E-learning;Education computing;Software engineering;Software testing;Unified Modeling Language;Application scenario;Functional correctness;Interactive training;Software design quality;Technical implementation,,Uhomoibhi J.Zvacek S.Lane H.,,,,,SciTePress,,9789897583674,,,English,CSEDU - Proc. Int. Conf. Comput. Support. Educ.,Conference Paper,Scopus,,2-s2.0-85067112894,,Austria,No email,,,"Haendler T., Neumann G., Smirnov F."
"Craciun, F., Chin, W.N., He, G.H., Qin, S.C.",An Interval-Based Inference of Variant Parametric Types,2009,"PROGRAMMING LANGUAGES AND SYSTEMS, PROCEEDINGS",5502,,,112,+,2,3,,,"[Craciun, Florin; He, Guanhua; Qin, Shengchao] Univ Durham, Dept Comp Sci, Durham DH1 3HP, England; [Chin, Wei-Ngan] Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore",,"Variant parametric types represent the successful integration of subtype and parametric polymorphism to support a more flexible subtyping for Java-like languages. A key feature that helps strengthen this integration is the use-site variance. Depending on how the fields are used, each variance denotes a covariant, a contravariant, an invariant or a bivariant subtyping. By annotating variance properties on each type argument to a parametric class, programmers can choose various desirable variance properties for each use of the parametric class. Although Java library classes have been successfully refactored to use variant parametric types, these mechanisms are often criticized, due to the difficulty of choosing appropriate variance annotations. Several algorithms have been proposed for automatically refactoring legacy Java code to use generic libraries, but none can support the full flexibility of the use-site variance-based subtyping. This paper addresses this difficulty by proposing a novel interval-based approach to inferring both the variance annotations and the type arguments. Each variant parametric type is regarded as an interval type with two type bounds, a lower bound for writing and an upper bound for reading. We propose a constraint-based inference algorithm that works on a per method basis, as a summary-based analysis.",,,,florin.craciun@durham.ac.uk; chinwn@comp.nus.edu.sg; guanhua.he@durham.ac.uk; shengchao.qin@durham.ac.uk,"Castagna, G","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",15th International Conference on Tools and Algorithms for the Construction and Analysis of Systems held at Joint European Conferences on Theory and Practice of Software,"Univ York, York, ENGLAND","MAR 22-29, 2009",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-00589-3,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000265244700009,,United Kingdom;Singapore,durham.ac.uk,Univ Durham;Natl Univ Singapore,"Univ Durham, United Kingdom;Natl Univ Singapore, Singapore","Craciun, Florin; Chin, Wei-Ngan; He, Guanhua; Qin, Shengchao"
"Borba, P.",An Introduction to Software Product Line Refactoring,2011,GENERATIVE AND TRANSFORMATIONAL TECHNIQUES IN SOFTWARE ENGINEERING III,6491,,,1,26,26,8,,,"Univ Fed Pernambuco, Informat Ctr, Recife, PE, Brazil",,"Although software product lines (PLs) can bring significant productivity and quality improvements through strategic reuse, boot-strapping existing products into a PL, and extending a PL with more products, is often risky and expensive. These kinds of PL derivation and evolution might require substantial effort and can easily affect the behavior of existing products. To reduce these problems, we propose a notion of product line refactoring and associated transformation templates that should be part of a PL refactoring catalogue. We discuss how the notion guides and improves safety of the PL derivation and evolution processes; the transformation templates, particularly when automated, reduce the effort needed to perform these processes.",,LAWS,LAWS,phmb@cin.ufpe.br,"Fernandes, JM; Lammel, R; Visser, J; Saraiva, J","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",3rd International Summer School on Generative and Transformational Techniques in Software Engineering,"Univ Minho, Dept Informat, Braga, PORTUGAL","JUL 06-11, 2009",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-18022-4,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000293607600001,2-s2.0-79251546072,Brazil,cin.ufpe.br,Informat Ctr,"Informat Ctr, Brazil","Borba, Paulo"
"Choi, E., Yoshida, N., Inoue, K.",An Investigation into the Characteristics of Merged Code Clones during Software Evolution,2014,IEICE TRANSACTIONS ON INFORMATION AND SYSTEMS,E97D,5,,1244,1253,10,5,10.1587/transinf.E97.D.1244,,"[Choi, Eunjong; Inoue, Katsuro] Osaka Univ, Suita, Osaka 5650871, Japan; [Yoshida, Norihiro] Nara Inst Sci & Technol, Ikoma 6300192, Japan",,"Although code clones (i.e. code fragments that have similar or identical code fragments in the source code) are regarded as a factor that increases the complexity of software maintenance, tools for supporting clone refactoring (i.e. merging a set of code clones into a single method or function) are not commonly used. To promote the development of refactoring tools that can be more widely utilized, we present an investigation of clone refactoring carried out in the development of open source software systems. In the investigation, we identified the most frequently used refactoring patterns and discovered how merged code clone token sequences and differences in token sequence lengths vary for each refactoring pattern.",code clone; refactoring; open source software,REFACTORING DETECTION; SUPPORT,code clone;refactoring;open source software;REFACTORING DETECTION;SUPPORT,,,"KIKAI-SHINKO-KAIKAN BLDG, 3-5-8, SHIBA-KOEN, MINATO-KU, TOKYO, 105-0011, JAPAN",,,,IEICE-INST ELECTRONICS INFORMATION COMMUNICATIONS ENG,1745-1361,,,,English,IEICE T INF SYST,Article,WoS,Computer Science,WOS:000342784200024,2-s2.0-84900008626,Japan,No email,Osaka Univ;Nara Inst Sci & Technol,"Osaka Univ, Japan;Nara Inst Sci & Technol, Japan","Choi, Eunjong; Yoshida, Norihiro; Inoue, Katsuro"
"Goto A., Choi E., Inoue K., Yoshida N., Fujiwara K.",An investigation into the characteristics of methods for extract method refactoring,2014,Computer Software,31,3,,318,324,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84907152774&partnerID=40&md5=433849b7872955ae14845a509911a5ad,"School of Information Science and Technology, Osaka University, Japan; School of Information Science, Nara Institute of Science and Technology, Japan","Goto, A., School of Information Science and Technology, Osaka University, Japan; Choi, E., School of Information Science and Technology, Osaka University, Japan; Inoue, K., School of Information Science and Technology, Osaka University, Japan; Yoshida, N., School of Information Science, Nara Institute of Science and Technology, Japan; Fujiwara, K., School of Information Science, Nara Institute of Science and Technology, Japan","""Extract Method"" is a refactoring pattern that extracts a part of an existing method as a new method. Although extract method refactoring is an effective way to decompose long and non-cohesive methods in general, how developers choose methods for ""Extract Method"" refactoring is still unexamined. For supporting this refactoring, the investigation of it is necessary. In this study, we investigated the differences of the size and cohesion of methods between refactored methods and not-refactored methods in open source software. The result shows significant deliverances in the most cases.",,Open source software; Open systems; Software engineering; Refactorings; Programming theory,Open source software;Open systems;Software engineering;Refactorings;Programming theory,,,,,,,Japan Society for Software Science and Technology,02896540,,,,Japanese,Comput. Softw.,Article,Scopus,,2-s2.0-84907152774,,Japan,No email,,,"Goto A., Choi E., Inoue K., Yoshida N., Fujiwara K."
"Al-Rubaye, S.R.A., Selcuk, Y.E.",An Investigation of Code Cycles and Poltergeist Anti-pattern,2017,PROCEEDINGS OF 2017 8TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND SERVICE SCIENCE (ICSESS 2017),,,,139,140,2,0,,,"[Al-Rubaye, Samer Raad Azzawi; Selcuk, Yunus Emre] Yildiz Tech Univ, Dept Comp Engn, TR-34220 Istanbul, Turkey",,"The aim of this paper is to propose a method for detecting the Poltergeist anti-pattern. Anti-patterns are poor designs that lower software quality, especially by increasing complexity and decreasing maintainability. As maintenance of software projects costs as much as their development, it is necessary to detect poorly designed code and refactor it.",anti-patterns; poltergeist; cycle detection,,anti-patterns;poltergeist;cycle detection,softieng@gmail.com; yselcuk@yildiz.edu.tr,"Wenzheng, L; Babu, MSP; Xiaohui, L","345 E 47TH ST, NEW YORK, NY 10017 USA",8th IEEE International Conference on Software Engineering and Service Science (ICSESS),"Beijing, PEOPLES R CHINA","NOV 24-26, 2017",IEEE,2327-0594,978-1-5386-0497-7,,,English,INT CONF SOFTW ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000434977800032,,Turkey,gmail.com,Yildiz Tech Univ,"Yildiz Tech Univ, Turkey","Al-Rubaye, Samer Raad Azzawi; Selcuk, Yunus Emre"
"Choi, E., Tanaka, D., Yoshida, N., Fujiwara, K., Port, D., Iida, H.",An Investigation of the Relationship Between Extract Method and Change Metrics: A Case Study of JEdit,2018,2018 25TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC 2018),,,,653,657,5,0,10.1109/APSEC.2018.00084,,"[Choi, Eunjong; Tanaka, Daiki; Iida, Hajimu] Nara Inst Sci & Technol, Nara, Japan; [Yoshida, Norihiro] Nagoya Univ, Nagoya, Aichi, Japan; [Fujiwara, Kenji] Toyota Coll, Natl Inst Technol, Toyota, Japan; [Port, Daniel] Univ Hawaii Manoa, Honolulu, HI 96822 USA",,"Extract Method is one of the most widely used refactoring patterns. So far, low quality of source code has been regarded as an indicator for Extract Method opportunities. However, recent studies showed that there is no clear relationship between source code quality and Extract Method. Change metrics can be indicators for Extract Method because the characteristics of software evolution strongly affect software quality. However, there has been no study that investigated the relationship between change metrics and Extract Method. In this study, we conducted two studies investigating the relationship between Extract Method and change metrics. As a result, we found that (1) change metrics have a clear relationship with Extract Method and (2) both product and change metrics are necessary to recommend candidates for Extract Method with high accuracy.",Extract Method; Change Metrics; Refactoring Recommendation,,Extract Method;Change Metrics;Refactoring Recommendation,choi@is.naist.jp; tanaka.daiki.sx4@is.naist.jp; yoshida@ertl.jp; fujiwara@toyota-ct.ac.jp; dport@hawaii.edu; iida@itc.naist.jp,,"345 E 47TH ST, NEW YORK, NY 10017 USA",25th Asia-Pacific Software Engineering Conference (APSEC),"Nara, JAPAN","DEC 04-07, 2018",IEEE,1530-1362,978-1-7281-1970-0,,,English,ASIA PAC SOFWR ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000474770300071,2-s2.0-85066815221,Japan;United States,is.naist.jp,Nara Inst Sci & Technol;Nagoya Univ;Toyota Coll;Univ Hawaii Manoa,"Nara Inst Sci & Technol, Japan;Nagoya Univ, Japan;Toyota Coll, Japan;Univ Hawaii Manoa, United States","Choi, Eunjong; Tanaka, Daiki; Yoshida, Norihiro; Fujiwara, Kenji; Port, Daniel; Iida, Hajimu"
Hinkel G.,An NMF solution to the Java Refactoring Case at the TTC 2015,2015,CEUR Workshop Proceedings,1524,,,95,99,,1,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84962621718&partnerID=40&md5=26551a03bd4504f09ee61b523ab16464,"Forschungszentrum Informatik (FZI), Haid-und-Neu-Straße 10-14, Karlsruhe, Germany","Hinkel, G., Forschungszentrum Informatik (FZI), Haid-und-Neu-Straße 10-14, Karlsruhe, Germany","Lehman's laws state that dedicated efforts must be spent for any software artifact to prevent a loss of quality. For code, such efforts are called refactoring operations and are an important aspect of many software engineers day-to-day business. Many of these refactoring operations are specified on a much higher abstraction level than the actual source code of a given language like Java. To be able to specify these refactoring operations on a higher abstraction level as proposed in the Java Refactoring Case at the Transformation Tool Contest (TTC) 2015, we propose a solution using an incremental synchronization with NMF Synchronizations of the source code regarded as a model on the one side and a simplified program graph model on the other side. © 2015 G. Szárnyas et al.",,Abstracting; Application programs; Codes (symbols); Java programming language; Abstraction level; Graph model; Refactorings; Software artifacts; Source codes; Transformation tools; Computer software,Abstracting;Application programs;Codes (symbols);Java programming language;Abstraction level;Graph model;Refactorings;Software artifacts;Source codes;Transformation tools;Computer software,"Hinkel, G.; Forschungszentrum Informatik (FZI), Haid-und-Neu-Straße 10-14, Germany; email: hinkel@fzi.de",Krikava F.Horn T.Rose L.M.,,,,,CEUR-WS,16130073,,,,English,CEUR Workshop Proc.,Conference Paper,Scopus,,2-s2.0-84962621718,,Germany,fzi.de,,,Hinkel G.
"Tansey, W., Tilevich, E.",Annotation Refactoring: Inferring Upgrade Transformations for Legacy Applications,2008,ACM SIGPLAN NOTICES,43,10,,295,311,17,7,10.1145/1449955.1449788,,"[Tansey, Wesley; Tilevich, Eli] Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA",,"Since annotations were added to the Java language, many frameworks have moved to using annotated Plain Old Java Objects (POJOs) in their newest releases. Legacy applications are thus forced to undergo extensive restructuring in order to migrate from old framework versions to new versions based on annotations (Version Lock-in). Additionally, because annotations are embedded in the application code, changing between framework vendors may also entail large-scale manual changes (Vendor Lock-in). This paper presents a novel refactoring approach that effectively solves these two problems. Our approach infers a concise set of semantics-preserving transformation rules from two versions of a single class. Unlike prior approaches that detect only simple structural refactorings, our algorithm can infer general composite refactorings and is more than 97% accurate on average. We demonstrate the effectiveness of our approach by automatically upgrading more than 80K lines of the unit testing code of four open-source Java applications to use the latest version of the popular JUnit testing framework.",Languages; Experimentation; Refactoring; Upgrading; Frameworks; Meta-data; Java; Annotations; Eclipse; JUnit,MODELS; TOOL,Languages;Experimentation;Refactoring;Upgrading;Frameworks;Meta-data;Java;Annotations;Eclipse;JUnit;MODELS;TOOL,tansey@cs.vt.edu; tilevich@cs.vt.edu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article,WoS,Computer Science,WOS:000262035900018,WOS:000266036500018,United States,cs.vt.edu,Virginia Tech,"Virginia Tech, United States","Tansey, Wesley; Tilevich, Eli"
"Dotzler G., Veldema R., Philippsen M.",Annotation support for generic patches,2012,"2012 3rd International Workshop on Recommendation Systems for Software Engineering, RSSE 2012 - Proceedings",,, 6233400,6,10,,2,10.1109/RSSE.2012.6233400,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864682962&doi=10.1109%2fRSSE.2012.6233400&partnerID=40&md5=6b12a61e2f7a1ad915eef83ffe41fcae,"University of Erlangen-Nuremberg, Computer Science Department, Programming Systems Group, Erlangen, Germany","Dotzler, G., University of Erlangen-Nuremberg, Computer Science Department, Programming Systems Group, Erlangen, Germany; Veldema, R., University of Erlangen-Nuremberg, Computer Science Department, Programming Systems Group, Erlangen, Germany; Philippsen, M., University of Erlangen-Nuremberg, Computer Science Department, Programming Systems Group, Erlangen, Germany","In large projects parallelization of existing programs or refactoring of source code is time consuming as well as error-prone and would benefit from tool support. However, existing automatic transformation systems are not extensively used because they either require tedious definitions of source code transformations or they lack general adaptability. In our approach, a programmer changes code inside a project, resulting in before and after source code versions. The difference (the generated transformation) is stored in a database. When presented with some arbitrary code, our tool mines the database to determine which of the generalized transformations possibly apply. Our system is different from a pure compiler based (semantics preserving) approach as we only suggest code modifications. Our contribution is a set of generalizing annotations that we have found by analyzing recurring patterns in open source projects. We show the usability of our system and the annotations by finding matches and applying generated transformations in real-world applications. © 2012 IEEE.",code-refactoring; optimizations; patches; programming tools,Annotation support; Automatic transformations; Code modifications; code-refactoring; Error prones; Generalized transformation; Large project; Open source projects; Parallelizations; patches; Programming tools; Real-world application; Refactorings; Source code transformation; Source codes; Tool support; Cosine transforms; Optimization; Program compilers; Recommender systems; Semantics; Software engineering; Computer programming languages,code-refactoring;optimizations;patches;programming tools;Annotation support;Automatic transformations;Code modifications;Error prones;Generalized transformation;Large project;Open source projects;Parallelizations;Real-world application;Refactorings;Source code transformation;Source codes;Tool support;Cosine transforms;Optimization;Program compilers;Recommender systems;Semantics;Software engineering;Computer programming languages,"Dotzler, G.; University of Erlangen-Nuremberg, Computer Science Department, Programming Systems Group, Erlangen, Germany; email: georg.dotzler@cs.fau.de",,,,,,,,9781467317597,,,English,"Int. Workshop Recomm. Syst. Softw. Eng., RSSE - Proc.",Conference Paper,Scopus,,2-s2.0-84864682962,,Germany,cs.fau.de,,,"Dotzler G., Veldema R., Philippsen M."
"Cheng Y.P., Liao J.R.",An ontology-based taxonomy of bad code smells,2007,"Proceedings of the 3rd IASTED International Conference on Advances in Computer Science and Technology, ACST 2007",,,,437,442,,4,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-56149105523&partnerID=40&md5=40ed8d5df7be59d83eabdd143b79cfea,"Department of Computer Science and Information Engineering, National Taiwan Normal University, Taipei City, Taiwan; Department of Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan","Cheng, Y.-P., Department of Computer Science and Information Engineering, National Taiwan Normal University, Taipei City, Taiwan; Liao, J.-R., Department of Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan","""Bad code smell"" or ""spaghetti code"" is a jargon used among programmers to refer to source code that is diffi-cult to maintain, evolve, and change. We consider them as symptoms of poor software engineering practice. This paper presents an application of concept of ontology to develop a bad code smell taxonomy. We develop a taxonomy hierarchy which categorizes bad code smells from the viewpoints of refactoring. A more formal format is introduced to define the bad code smells more concretely. Besides, the relations among bad code smells, called semantic relations in ontology terms, are explored and established. The ontology can be used for reasoning in other applications.",Bad code smells; Ontology; Refactoring; Taxonomy,Codes (symbols); Computer science; Computers; Information theory; Odors; Software engineering; Taxonomies; Bad code smells; Other applications; Refactoring; Semantic relations; Software engineering practices; Source codes; Spaghetti codes; Ontology,Bad code smells;Ontology;Refactoring;Taxonomy;Codes (symbols);Computer science;Computers;Information theory;Odors;Software engineering;Taxonomies;Other applications;Semantic relations;Software engineering practices;Source codes;Spaghetti codes,"Cheng, Y.-P.; Department of Computer Science and Information Engineering, National Taiwan Normal University, Taipei City, Taiwan; email: ypc@csie.ntnu.edu.tw",,,,,,,,9780889866560,,,English,"Proc. IASTED Int. Conf. Adv. Comp. Sci. Technol., ACST",Conference Paper,Scopus,,2-s2.0-56149105523,,Taiwan,csie.ntnu.edu.tw,,,"Cheng Y.-P., Liao J.-R."
"Garzas, J., Piattini, M.",An ontology for understanding and applying object-oriented design knowledge,2007,INTERNATIONAL JOURNAL OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING,17,3,,407,421,15,1,10.1142/S0218194007003318,,"Univ Castilla La Mancha, Escuela Super Informat, Ciudad Real 13071, Spain",,"After years of experience in object-oriented design, software engineers have accumulated a great deal of knowledge in the design and construction of object-oriented systems: important contribution to this field including principles, heuristics, lessons learned, bad smells, refactorings, and so on, with the resultant major improvements in software development. However, this large body of knowledge is still not well organized, its terminology is ambiguous, and it is very difficult to make practical use of the contributions made. In this regard, we believe it is important to define an ontology in order to structure and unify design knowledge, since a good understanding of the experience derived from practical work is critical for software engineers. This ontology could be used to improve communication between software engineers, inter-operability among designs, design re-usability, design knowledge searching and specification, software maintenance, knowledge acquistion, etc. In the ontology we incorporate knowledge specific to both domain and technology. such an organized body of knowledge could also be used for registering and documenting design rationale issues.",ontology; design knowledge; patterns; principles; heuristic; refactoring,,ontology;design knowledge;patterns;principles;heuristic;refactoring,javier.garzas@kybeleconsulting.com; Mario.Piattini@uclm.es,,"5 TOH TUCK LINK, SINGAPORE 596224, SINGAPORE",,,,WORLD SCIENTIFIC PUBL CO PTE LTD,0218-1940,,,,English,INT J SOFTW ENG KNOW,Article,WoS,Computer Science; Engineering,WOS:000251175700006,2-s2.0-34547420138,Spain,kybeleconsulting.com,Escuela Super Informat,"Escuela Super Informat, Spain","Garzas, Javier; Piattini, Mario"
"Heder M., Laszlo Z., Sulyan T.",Another neat tool for refactoring Erlang programs,2007,"Proceedings of the 11th IASTED International Conference on Software Engineering and Applications, SEA 2007",,,,336,341,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959040849&partnerID=40&md5=b250dc213d3d0d5971d84b267e687b7f,"Budapest University of Technology and Economics, Magyar tudósok krt. 2, Budapest, H-1117, Hungary","Héder, M., Budapest University of Technology and Economics, Magyar tudósok krt. 2, Budapest, H-1117, Hungary; László, Z., Budapest University of Technology and Economics, Magyar tudósok krt. 2, Budapest, H-1117, Hungary; Sulyán, T., Budapest University of Technology and Economics, Magyar tudósok krt. 2, Budapest, H-1117, Hungary","Refactoring is a program transformation aiming to improve the quality characteristics of the code (such as consistency, maintainability, transparency, execution time) while strictly preserving its functionality. Since functional programming languages, such as Erlang, are gaining more and more territory in this field of technology it is a highly significant and current task to develop a refactoring tool for this language. The present paper describes the elaboration of an Erlang refactoring tool where developers were striving to employ already existing (off-the-shelf) components and technologies. Refactoring cannot be performed without creating the model of the source code. Authors modeled the source code with an extended syntax tree represented in XML. Using XML as representation offers various tools available for transforming and visualizing the model. In the present article authors introduce the prototype version of the proposed refactoring tool and describe it in more details while solving a specific refactoring problem.",Erlang; Functional programming; Program transformation; Refactoring,Application programs; Codes (symbols); Computational linguistics; Computer programming; Software engineering; Trees (mathematics); XML; Erlang; Erlang programs; Program transformations; Prototype versions; Quality characteristic; Refactoring tools; Refactorings; Source codes; Functional programming,Erlang;Functional programming;Program transformation;Refactoring;Application programs;Codes (symbols);Computational linguistics;Computer programming;Software engineering;Trees (mathematics);XML;Erlang programs;Program transformations;Prototype versions;Quality characteristic;Refactoring tools;Refactorings;Source codes,,,,,,,ACTA Press,,9780889867055,,,English,"Proc. IASTED Int. Conf. Softw. Eng. Appl., SEA",Conference Paper,Scopus,,2-s2.0-84959040849,,Hungary,No email,,,"Heder M., Laszlo Z., Sulyan T."
"Abdelaziz T.M., Elghadhafi H.A., Maatuk A.M.",A novel approach for improving the quality of software code using reverse engineering,2018,ACM International Conference Proceeding Series,,, 31,,,,0,10.1145/3234698.3234729,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85052522941&doi=10.1145%2f3234698.3234729&partnerID=40&md5=50038b7f5f7606eecf913864a78b8677,"Faculty of Information Technology, Benghazi University, Libyan Arab Jamahiriya","Abdelaziz, T.M., Faculty of Information Technology, Benghazi University, Libyan Arab Jamahiriya; Elghadhafi, H.A., Faculty of Information Technology, Benghazi University, Libyan Arab Jamahiriya; Maatuk, A.M., Faculty of Information Technology, Benghazi University, Libyan Arab Jamahiriya","Copying and pasting program code fragments with minor changes is a common practice in software development. Software systems often have similar segments of code, called code clones. Due to many reasons, unintentional smells may also appear in the source code without awareness of program developers. Code smell may violate the principles of software design and negatively impact program design quality, thus making software development and maintenance very costly. This paper presents an enhanced approach to facilitate the process of identification and elimination of code smells. The proposed solution allows the detection and removal of code smells for refinement and improvement of the quality of software system. Code smells are analyzed, restructured and eliminated from the source code using reverse engineering techniques. The solution maintains the external behaviour of software system and judges the efficiency of systems code. An experiment has been conducted using a real software system, which is evaluated before and after using the approach. The results have been encouraging and help in detecting code smells. © 2018 Association for Computing Machinery.",Code clone; Code refactoring; Code smells; Smells detection,Cloning; Codes (symbols); Computer software; Odors; Reverse engineering; Code clone; Code re-factoring; Code smell; Common practices; Program developers; Quality of softwares; Reverse engineering techniques; Software development and maintenances; Software design,Code clone;Code refactoring;Code smells;Smells detection;Cloning;Codes (symbols);Computer software;Odors;Reverse engineering;Code re-factoring;Code smell;Common practices;Program developers;Quality of softwares;Reverse engineering techniques;Software development and maintenances;Software design,,,,,,,Association for Computing Machinery,,9781450363921,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85052522941,,Libyan Arab Jamahiriya,No email,,,"Abdelaziz T.M., Elghadhafi H.A., Maatuk A.M."
"Bouktif, S., Antoniol, G., Merlo, E., Neteler, M.",A novel approach to optimize clone refactoring activity,2006,"GECCO 2006: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2",,,,1885,1892,8,22,,,"Ecole Polytech, Dept Genie Informat, Montreal, PQ H3C 3A7, Canada",,"Achieving a high quality and cost-effective tests is a major concern for software buyers and sellers. Using tools and integrating techniques to carry out low cost testing are challenging topics for the testing community. In this work we contribute to alleviate the burden by proposing an architecture support for mutation and coverage criteria based testing. This architecture integrates metaheuristics to derivate effective test sets and uses automated tools to speed up testing activities. In this paper, we describe different components of the testing architecture. We focus on the developed tools performing mutation testing for JAVA code at method-level and the coverage-based testing for C code at function-level. The integration of metaheuristics in these tools is illustrated by using ant colony and tabu search to derive optimal and pruned test sets. By using our testing architecture two cases study to carry out tests respectively for JAVA methods and C-functions are presented and discussed.",genetic algorithms; multi-objective optimization; software quality improvement; refactoring effort; evolution modeling; effort prediction,SOFTWARE; PROJECT,genetic algorithms;multi-objective optimization;software quality improvement;refactoring effort;evolution modeling;effort prediction;SOFTWARE;PROJECT,salah.bouktif@polymtl.ca; ettore.merlo@polymtl.ca; neteler@itc.it,"Keijzer, M","1515 BROADWAY, NEW YORK, NY 10036-9998 USA",8th Annual Genetic and Evolutionary Computation Conference,"Seattle, WA","JUL 08-12, 2006",ASSOC COMPUTING MACHINERY,,978-1-59593-186-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000249917300286,,Canada,polymtl.ca,Dept Genie Informat,"Dept Genie Informat, Canada","Bouktif, Salah; Antoniol, Giuliano; Merlo, Ettore; Neteler, Markus"
"Adnan, M., Afzal, M.",A Novel Approach to Super Quality Software Development using Workflows,2016,"2016 IEEE 7TH ANNUAL UBIQUITOUS COMPUTING, ELECTRONICS MOBILE COMMUNICATION CONFERENCE (UEMCON)",,,,,,3,0,,,"[Adnan, Muhammad; Afzal, Muhammad] UET Lahore, Dept Comp Sci & Engn, Lahore, Pakistan",,"This paper proposes a novel approach to develop super quality software(s) using workflows that improves the software code quality by reducing occurrence of software maintenance problems to minimum. It motivates the software development companies to use a static code analysis tool with our proposed modifications. Therefore, the static code analysis (SCA) exposes critical areas at early stages to be comprehensively tracked and fixed in less time and effort to improve the software quality significantly. The improved SCA presents quantitative listing of detected code smells of implemented workflows with activities, suggested refactoring methods to eliminate the identified code smells and their criticality ratios.",Workflow Foundation; Static Code Analysis; Software Quality; Code Refactoring,,Workflow Foundation;Static Code Analysis;Software Quality;Code Refactoring,adnan4any@hotmail.com; shmafzal@yahoo.com,"Chakrabarti, S; Saha, HN","345 E 47TH ST, NEW YORK, NY 10017 USA","7th IEEE Annual Ubiquitous Computing, Electronics and Mobile Communication Conference (IEEE UEMCON)","New York, NY","OCT 20-22, 2016",IEEE,,978-1-5090-1496-5,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000390536700057,2-s2.0-85010369887,Pakistan,hotmail.com,UET Lahore,"UET Lahore, Pakistan","Adnan, Muhammad; Afzal, Muhammad"
"Pirzadeh, H., Shanian, S., Davari, F.",A Novel Framework for Creating User Interface Level Tests Resistant to Refactoring of Web Applications,2014,2014 9th International Conference on the Quality of Information and Communications Technology (QUATIC),,,,268,273,6,0,10.1109/QUATIC.2014.43,,"[Pirzadeh, Heidar; Davari, Farzin] Hybris Canada, SAP SE, Montreal, PQ, Canada; [Shanian, Sara] Univ Laval, Dept Informat, Quebec City, PQ, Canada",,"Developing user interfaces is an important part of software development process for web-applications. Frequent and small changes are inevitable in the process of developing and refactoring a user interface (UI) to improve user experience while preserving the functionality. Those changes however have been shown to easily break a majority of automated UI-level tests. Maintaining and fixing those test cases then increases the overall cost of development and decreases the benefit of test automation. In this paper, we propose a new test framework for identifying and locating the elements of the UI in a way that cannot be impacted by small UI changes. Our approach is inspired by the way human interact with the UIs of web applications and how such interactions are described and communicated in natural language to others. Our framework could significantly reduce the cost of test maintenance by enabling software engineers create UI-level tests that are naturally resistant to UI changes.",Automation; User Interface Level Test; Web Application; Quality,INFORMATION-SEEKING; SEARCH; CONTEXT,Automation;User Interface Level Test;Web Application;Quality;INFORMATION-SEEKING;SEARCH;CONTEXT,pirzadeh@acm.org; sara.shanian@ift.ulaval.ca; farzin.davari@sap.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",9th International Conference on the Quality of Information and Communications Technology (QUATIC),"Univ Minho, Guimaraes, PORTUGAL","SEP 23-26, 2014",IEEE,,978-1-4799-6133-7,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000364237700038,2-s2.0-84921025462,Canada,acm.org,Hybris Canada;Univ Laval,"Hybris Canada, Canada;Univ Laval, Canada","Pirzadeh, Heidar; Shanian, Sara; Davari, Farzin"
"De Ruvo, G., Santone, A.",A Novel Methodology Based on Formal Methods for Analysis and Verification of Wikis,2014,2014 IEEE 23RD INTERNATIONAL WETICE CONFERENCE (WETICE),,,,411,416,6,3,10.1109/WETICE.2014.25,,"[De Ruvo, Giuseppe; Santone, Antonella] Univ Sannio, Dept Engn, Benevento, Italy",,"A wiki is a collaborative Web site whose content can be edited by anyone who has access to it. Wikis are becoming a new work tool in enterprises and are widely spreading everywhere. In fact, they are often used as internal documentation for various in-house systems and applications. Understanding and maintaining the structure of a wiki may be a crucial aspect. As well as software grows, decays and needs refactoring, the organic growth of a wiki inevitably leads to its degradation. We propose a novel methodology based on formal methods to analyse and verify the architecture of wikis. Formal verification helps to perform refactoring. Each wiki category, a set of wiki pages, is modelled using the Calculus of Communicating Systems (CCS) process algebra in order to verify specific properties. First experiments conducted on a adequate number of categories of Wikipedia, assess the validity of our methodology revealing new",Wiki; Temporal Logic; CCS Process Algebra; Refactoring,,Wiki;Temporal Logic;CCS Process Algebra;Refactoring,gderuvo@unisannio.it; santone@unisannio.it,"Reddy, SM","345 E 47TH ST, NEW YORK, NY 10017 USA","23rd IEEE International Conference on Enabling Technologies, Infrastructure for Collaborative Enterprises (WETICE)","Parma, ITALY","JUN 23-25, 2014",IEEE,,978-1-4799-4249-7,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000352498700080,2-s2.0-84908433135,Italy,unisannio.it,Univ Sannio,"Univ Sannio, Italy","De Ruvo, Giuseppe; Santone, Antonella"
"Caspersen M.E., Kolling M.",A novice's process of object-oriented programming,2006,"Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA",2006,, 1176741,892,900,,6,10.1145/1176617.1176741,https://www.scopus.com/inward/record.uri?eid=2-s2.0-34248395963&doi=10.1145%2f1176617.1176741&partnerID=40&md5=1e34b761966e1209056bc5114e6680f0,"Department of Computer Science, University of Aarhus, Aabogade 34, DK-8200 Aarhus N, Denmark; Computing Laboratory, University of Kent, Canterbury, Kent CT2 7NF, United Kingdom","Caspersen, M.E., Department of Computer Science, University of Aarhus, Aabogade 34, DK-8200 Aarhus N, Denmark; Kölling, M., Computing Laboratory, University of Kent, Canterbury, Kent CT2 7NF, United Kingdom","Exposing students to the process of programming is merely implied but not explicitly addressed in texts on programming which appear to deal with 'program' as a noun rather than as a verb.We present a set of principles and techniques as well as an informal but systematic process of decomposing a programming problem. Two examples are used to demonstrate the application of process and techniques.The process is a carefully down-scaled version of a full and rich software engineering process particularly suited for novices learning object-oriented programming. In using it, we hope to achieve two things: to help novice programmers learn faster and better while at the same time laying the foundation for a more thorough treatment of the aspects of software engineering.",CS1; Design by contract; Incremental development; Objects-first; Pedagogy; Programming education; Programming process; Refactoring; Representation invariant; Stepwise refinement; Systematic programming; Testing; Top-down design; UML,Problem solving; Process design; Software design; Software testing; Students; Incremental development; Programming education; Programming processes; Representation invariants; Systematic programming; Object oriented programming,CS1;Design by contract;Incremental development;Objects-first;Pedagogy;Programming education;Programming process;Refactoring;Representation invariant;Stepwise refinement;Systematic programming;Testing;Top-down design;UML;Problem solving;Process design;Software design;Software testing;Students;Programming processes;Representation invariants;Object oriented programming,"Caspersen, M.E.; Department of Computer Science, University of Aarhus, Aabogade 34, DK-8200 Aarhus N, Denmark; email: mec@daimi.au.dk",,,,,,,,159593491X; 9781595934918,,,English,Proc Conf Object Orient Program Syst Lang Appl OOPSLA,Conference Paper,Scopus,,2-s2.0-34248395963,,Denmark;United Kingdom,daimi.au.dk,,,"Caspersen M.E., Kolling M."
"Hardt, R., Munson, E.V.",Ant Build Maintenance with Formiga,2013,2013 1ST INTERNATIONAL WORKSHOP ON RELEASE ENGINEERING (RELENG),,,,13,16,4,5,,,"[Hardt, Ryan; Munson, Ethan V.] Univ Wisconsin, Dept EECS, Milwaukee, WI 53201 USA",,"Build maintenance refers to the changes made to the build system as a software project evolves over time and has been shown to impose a significant overhead on overall development costs, in part because changes to source code often require parallel changes in the build system. However, little tool support exists to assist developers with build maintenance, particularly for those changes that must accompany changes to the source code. Formiga is a build maintenance and dependency discovery tool for the Ant build system. Formiga's primary uses are to automate build changes as the source code is updated, to assist in build refactoring, to identify the build dependencies within a software project, and to clarify the dependency differences between different versions of build files. Formiga is implemented as an IDE plugin, which allows it to recognize when project resources are updated and automatically update the build system accordingly. This implementation also allows it to leverage existing metaphors used by developers to maintain source code, thus making it easier to use.",build maintenance; release engineering; Ant,,build maintenance;release engineering;Ant,rrhardt@uwm.edu; munson@uwm.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",1st International Workshop on Release Engineering (RELENG),"San Francisco, CA","MAY 20, 2013",IEEE,,978-1-4673-6441-6,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000333246300004,2-s2.0-84885969121,United States,uwm.edu,Univ Wisconsin,"Univ Wisconsin, United States","Hardt, Ryan; Munson, Ethan V."
"Arcelli D., Cortellessa V., Trubiani C.",Antipattern-based model refactoring for software performance improvement,2012,QoSA'12 - Proceedings of the 8th International ACM SIGSOFT Conference on the Quality of Software Architectures,,,,33,42,,31,10.1145/2304696.2304704,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84864066029&doi=10.1145%2f2304696.2304704&partnerID=40&md5=eb7b4a9db365bde4e5d6279cb8036581,"Università degli Studi dell'Aquila, 67100 L'Aquila, Italy","Arcelli, D., Università degli Studi dell'Aquila, 67100 L'Aquila, Italy; Cortellessa, V., Università degli Studi dell'Aquila, 67100 L'Aquila, Italy; Trubiani, C., Università degli Studi dell'Aquila, 67100 L'Aquila, Italy","Identifying and removing the causes of poor performance in software systems are complex problems due to a variety of factors to take into account. Nowadays these problems are usually tackled after the software deployment only with human-based means, which frequently boil down to developer skills and previous experiences. Performance antipatterns can be used to cope with these problems since they capture typical design patterns that are known leading to performance problems, as well as refactoring actions that can be taken to remove them. The goal of this paper is to introduce an approach that allows the refactoring of architectural models, based on antipatterns, that aims at providing performance improvement. To this end, we use a Role-Based Modeling Language to represent: (i) antipattern problems as Source Role Models (SRMs), and (ii) antipattern solutions as Target Role Models (TRMs). Hence, SRM-TRM pairs represent new instruments in the hands of developers to achieve architectural model refactorings aimed at removing sources of performance problems. Model refactoring for antipattern removal can be in fact obtained by replacing an SRM with the corresponding TRM. This approach has been applied to a case study in the e-commerce domain, whose experimental results demonstrate its effectiveness. Copyright © 2012 ACM.",Model refactoring; Performance antipatterns; Roles; Software performance,Anti-patterns; Architectural models; Complex problems; E-commerce domains; New instrument; Performance improvements; Performance problems; Poor performance; Refactorings; Role model; Role-based modeling; Roles; Software deployment; Software performance; Software systems; Typical design,Model refactoring;Performance antipatterns;Roles;Software performance;Anti-patterns;Architectural models;Complex problems;E-commerce domains;New instrument;Performance improvements;Performance problems;Poor performance;Refactorings;Role model;Role-based modeling;Software deployment;Software systems;Typical design,"Arcelli, D.; Università degli Studi dell'Aquila, 67100 L'Aquila, Italy; email: davide.arcelli@univaq.it",,,,,,,,9781450313469,,,English,QoSA - Proc. Int. ACM SIGSOFT Conf. Qual. Softw. Archit.,Conference Paper,Scopus,,2-s2.0-84864066029,,Italy,univaq.it,,,"Arcelli D., Cortellessa V., Trubiani C."
"Ujhelyi, Z., Horvath, A., Varro, D., Csiszar, N.I., Szoke, G., Vidacs, L., Ferenc, R.",Anti-pattern Detection with Model Queries: A Comparison of Approaches,2014,"2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE)",,,,293,+,2,4,,,"[Ujhelyi, Zoltan; Horvath, Akos; Varro, Daniel] Budapest Univ Technol & Econ, Dept Measurement & Informat Syst, Budapest, Hungary; [Csiszar, Norbert Istvan; Ferenc, Rudolf] Univ Szeged, Szeged, Hungary; [Vidacs, Laszlo] Hungarian Acad Sci, SZTE Res Grp Artificial Intelligence, H-2011 Budapest, Hungary",,"Program queries play an important role in several software evolution tasks like program comprehension, impact analysis, or the automated identification of anti-patterns for complex refactoring operations. A central artifact of these tasks is the reverse engineered program model built up from the source code (usually an Abstract Semantic Graph, ASG), which is traditionally post-processed by dedicated, hand-coded queries. Our paper investigates the use of the popular industrial Eclipse Modeling Framework (EMF) as an underlying representation of program models processed by three general-purpose model query techniques based on native Java code, local-search and incremental evaluation. We provide in-depth comparison of these techniques on the source code of 17 Java projects using queries taken from refactoring operations in different usage profiles. Our results show that general purpose model queries outperform hand-coded queries by 2-3 orders of magnitude, while there is a 5-10 times increase in memory consumption and model load time. In addition, measurement results of usage profiles can be used as guidelines for selecting the appropriate query technologies in concrete scenarios.",,TRANSFORMATION; TOOL,TRANSFORMATION;TOOL,ujhelyiz@mit.bme.hu; ahorvath@mit.bme.hu; varro@mit.bme.hu; csiszar.norbert.istvan@stud.u-szeged.hu; kancsuki@inf.u-szeged.hu; lac@inf.u-szeged.hu; ferenc@inf.u-szeged.hu,"Demeyer, S; Binkley, D; Ricca, F","345 E 47TH ST, NEW YORK, NY 10017 USA","Software Evolution Week / IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)","Antwerp, BELGIUM","FEB 03-06, 2014",IEEE,,978-1-4799-3752-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000349240500030,2-s2.0-84898475693,Hungary,mit.bme.hu,Budapest Univ Technol & Econ;Univ Szeged;Hungarian Acad Sci,"Budapest Univ Technol & Econ, Hungary;Univ Szeged, Hungary;Hungarian Acad Sci, Hungary","Ujhelyi, Zoltan; Horvath, Akos; Varro, Daniel; Csiszar, Norbert Istvan; Szoke, Gabor; Vidacs, Laszlo; Ferenc, Rudolf"
"Erwig, M., Ren, D.L.",An update calculus for expressing type-safe program updates,2007,SCIENCE OF COMPUTER PROGRAMMING,67,2-3,,199,222,24,7,10.1016/j.scico.2007.01.003,,"Oregon State Univ, Sch EECS, Corvallis, OR 97331 USA",,"The dominant share of software development costs is spent on software maintenance, particularly the process of updating programs in response to changing requirements. Currently, such program changes tend to be performed using text editors, an unreliable method that often causes many errors. In addition to syntax and type errors, logical errors can be easily introduced since text editors cannot guarantee that changes are performed consistently over the whole program. All these errors can cause a correct and perfectly running program to become instantly unusable. It is not surprising that this situation exists because the ""text-editor method"" reveals a low-level view of programs that fails to reflect the structure of programs. We address this problem by pursuing a programming-language-based approach to program updates. To this end we discuss in this paper the design and requirements of an update language for expressing update programs. We identify as the essential part of any update language a scope update that performs coordinated update of the definition and all uses of a symbol. As the underlying basis for update languages, we define an update calculus for updating lambda calculus programs. We develop a type system for the update calculus that infers the possible type changes that can be caused by an update program. We demonstrate that type-safe update programs that fulfill certain structural constraints preserve the type correctness of lambda terms. The update calculus can serve as a basis for higher-level update languages, such as for Haskell or Java. (c) 2007 Elsevier B.V. All rights reserved.",program transformation; meta programming; type safety; refactoring; software evolution,EXTENSION,program transformation;meta programming;type safety;refactoring;software evolution;EXTENSION,erwig@eecs.oregonstate.edu,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0167-6423,,,,English,SCI COMPUT PROGRAM,Article,WoS,Computer Science,WOS:000248174100003,2-s2.0-34250776589,United States,eecs.oregonstate.edu,Sch EECS,"Sch EECS, United States","Erwig, Martin; Ren, Deling"
"Giunta R., Pappalardo G., Tramontana E.",AODP: Refactoring code to provide advanced aspect-oriented modularization of design patterns,2012,Proceedings of the ACM Symposium on Applied Computing,,,,1243,1250,,21,10.1145/2245276.2231971,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84863602689&doi=10.1145%2f2245276.2231971&partnerID=40&md5=7cfc7d2b2669ea2476d12abe0f993927,"Dipartimento di Matematica e Informatica, University of Catania, Italy","Giunta, R., Dipartimento di Matematica e Informatica, University of Catania, Italy; Pappalardo, G., Dipartimento di Matematica e Informatica, University of Catania, Italy; Tramontana, E., Dipartimento di Matematica e Informatica, University of Catania, Italy","Although solutions provided by design patterns are an invaluable resource for developers, some design patterns lead to placing code addressing design pattern concerns into the same class as application code. This weakens the modularity of an application because it makes classes more complex, more prone to changes and less reusable. In order to avoid the tangling of design pattern- and application-related code within classes, this paper proposes an approach for assisting the refactoring of an application that uses design patterns into an aspect-based version. This allows application classes, and aspects implementing design patterns, to stay independent of each other, thus greatly enhancing modularity. Developers intending to change the role of an application class need only update the code connecting it to the design pattern involved. © 2012 ACM.",,Application codes; Aspect-oriented; Design Patterns; Modularizations; Refactorings; Computer software reusability; Modular construction; Design,Application codes;Aspect-oriented;Design Patterns;Modularizations;Refactorings;Computer software reusability;Modular construction;Design,"Giunta, R.; Dipartimento di Matematica e Informatica, University of CataniaItaly; email: giunta@dmi.unict.it",,,,,,,,9781450308571,,,English,Proc ACM Symp Appl Computing,Conference Paper,Scopus,,2-s2.0-84863602689,,Italy,dmi.unict.it,,,"Giunta R., Pappalardo G., Tramontana E."
"Costa, R.S., Costa, H., Parreira, P.A.",AOLink - Automatic Gerenation of Refactoring Suggestions for Aspect-Oriented Anomalies,2016,PROCEEDINGS OF THE 2016 35TH INTERNATIONAL CONFERENCE OF THE CHILEAN COMPUTER SCIENCE SOCIETY (SCCC),,,,,,11,0,,,"[Costa, Renato Silva] Univ Fed Sao Carlos, Dept Comp, Sao Carlos, SP, Brazil; [Costa, Heitor; Parreira Junior, Paulo A.] Univ Fed Lavras, Dept Ciencia Comp, Lavras, MG, Brazil",,"Aspect-Orientation (AO) is a strategy to improve the internal structure of the software. However, using AO abstractions in an inappropriate way may also introduce bad smells in the software. To handle it, the developer needs to read catalogs of bad smells and refactorings. The problem is these catalogs are written in a non-standardized way, what make hard the understanding on them. Furthermore, the existing tools for AO bad smells detection do not present to the user the necessary refactoring to deal with them. This paper aims to present: (i) a standardized catalog of AO bad smells; and (ii) an extension, called AOLink, for a tool that detect AO bad smells. It is able to suggest the refactorings to deal with AO bad smells. The preliminary assessment performed on the proposed catalog showed that the recall and precision with respect to the bad smells detection may be improved.",Bad Smells; Refactoring; Aspect-Orientation,,Bad Smells;Refactoring;Aspect-Orientation,renato.costa@dc.ufscar.br; heitor@dcc.ufla.br; pauloa.junior@dcc.ufla.br,,"345 E 47TH ST, NEW YORK, NY 10017 USA",35th International Conference of the Chilean-Computer-Science-Society (SCCC),"Valparaiso, CHILE","OCT 10-14, 2016",IEEE,1522-4902,978-1-5090-3339-3,,,English,P INT C CHIL COMPUT,Proceedings Paper,WoS,Computer Science,WOS:000401662600065,2-s2.0-85017586793,Brazil,dc.ufscar.br,Univ Fed Sao Carlos;Univ Fed Lavras,"Univ Fed Sao Carlos, Brazil;Univ Fed Lavras, Brazil","Costa, Renato Silva; Costa, Heitor; Parreira Junior, Paulo A."
"Czibula, G., Cojocar, G.S., Czibula, I.G.",A Partitional Clustering Algorithm for Crosscutting Concerns Identification,2009,"SEPADS'09: PROCEEDINGS OF THE 8TH WSEAS INTERNATIONAL CONFERENCE ON RECENT ADVANCES IN SOFTWARE ENGINEERING, PARALLEL AND DISTRIBUTED SYSTEMS",,,,111,116,6,3,,,"[Czibula, Gabriela; Cojocar, Grigoreta Sofia; Czibula, Istvan Gergely] Univ Babes Bolyai, Dept Comp Sci, R-3400 Cluj Napoca, Romania",,"Identifying crosscutting concerns is an important issue in the maintenance of software systems. It aims at refactoring the existing systems to use aspect oriented programming, in order to make them easier to maintain and to evolve. In this paper we present a new partitional clustering algorithm for identifying crosscutting concerns in existing software systems. We experimentally evaluate our algorithm using the open source case study JHotDraw, providing a comparison of the proposed approach with similar existing approaches.",Aspect mining; crosscutting concerns; clustering,,Aspect mining;crosscutting concerns;clustering,gabis@cs.ubbcluj.ro; grigo@cs.ubbcluj.ro; istvanc@cs.ubbcluj.ro,"Trilling, L; Perkins, D; Dionysios, D; Perlovsky, L; Davey, K; Landgrebe, D","AG LOANNOU THEOLOGOU 17-23, 15773 ZOGRAPHOU, ATHENS, GREECE","8th WSEAS International Conference on Software Engineering, Parallel and Distributed Systems","Cambridge, MA","FEB 21-23, 2009",WORLD SCIENTIFIC AND ENGINEERING ACAD AND SOC,,978-960-474-052-9,,,English,ELE COM ENG,Proceedings Paper,WoS,Computer Science,WOS:000265023300017,,Romania,cs.ubbcluj.ro,Univ Babes Bolyai,"Univ Babes Bolyai, Romania","Czibula, Gabriela; Cojocar, Grigoreta Sofia; Czibula, Istvan Gergely"
"Hsueh N.L., Chu P.H., Hsiung P.A., Chuang M.J., Chu W., Chang C.H., Koong C.S., Shih C., Yang C.T.",A pattern-based refactoring approach for multi-core system design,2011,International Journal of Advancements in Computing Technology,3,9,,196,209,,5,10.4156/ijact.vol3.issue9.25,https://www.scopus.com/inward/record.uri?eid=2-s2.0-80555146561&doi=10.4156%2fijact.vol3.issue9.25&partnerID=40&md5=db5a51fd1b4424d34a0909c1c9323255,"Department of Information Engineering and Computer Science, Feng Chia University, Taiwan; Department of Computer Science and Information Engineering, National Chung Cheng University, Taiwan; Department of Computer Science, Tunghai University, Taiwan; Department of Information Management, Hsiuping University of Science and Technology, Taiwan; Department of Computer and Information Science, National Taichung University, Taiwan","Hsueh, N.-L., Department of Information Engineering and Computer Science, Feng Chia University, Taiwan; Chu, P.-H., Department of Information Engineering and Computer Science, Feng Chia University, Taiwan; Hsiung, P.-A., Department of Computer Science and Information Engineering, National Chung Cheng University, Taiwan; Chuang, M.-J., Department of Information Engineering and Computer Science, Feng Chia University, Taiwan; Chu, W., Department of Computer Science, Tunghai University, Taiwan; Chang, C.-H., Department of Information Management, Hsiuping University of Science and Technology, Taiwan; Koong, C.-S., Department of Computer and Information Science, National Taichung University, Taiwan; Shih, C., Department of Computer Science, Tunghai University, Taiwan; Yang, C.-T., Department of Computer Science, Tunghai University, Taiwan","Until recently, the most software development tools and techniques were concentrated on views from the sequential model of program execution. Software developers who only familiarize with the sequential model will face unusual challenges of software projects that require multi-core or parallel programming. In this paper, we addresses the challenges that developers face as their projects requiring multi-core or parallel programming by applying design patterns. In general, design patterns are usually regarded as the role of quality-improver for improving software quality, but they could be the role of design-facilitator for facilitating design activities. To address this issue, we propose an approach for specifying the applicable contexts and refactoring steps of patterns systematically, as well as automating the refactoring process for lightening the burden of developers. We also extract a multi-core pattern ParallelWhile which is derived from the template class parallel_while of Intel® TBB library to introduce our approach. Furthermore, we demonstrate our approach by a real-world multi-core embedded system PVE (Parallel Video Encoder), where Command Pipeline pattern is designed for the design enhancement and platform migration. It aids developers identifying operations which could be parallel processing, and revising a sequential design as an Intel® TBB parallel structure. In addition, our approach can promote the extensibility of parallel operations.",Design pattern; Model transformation; Multi-core embedded system; Pattern application,Design activity; Design enhancement; Design Patterns; Model transformation; Multi core; Multi-core systems; Parallel operations; Parallel processing; Parallel structures; Pattern application; Pipeline patterns; Program execution; Refactorings; Sequential design; Sequential model; Software developer; Software development tools; Software project; Software Quality; Video encoder; Computer software selection and evaluation; Design; Embedded systems; Microprocessor chips; Multicore programming; Parallel programming; Systems analysis; Software design,Design pattern;Model transformation;Multi-core embedded system;Pattern application;Design activity;Design enhancement;Design Patterns;Multi core;Multi-core systems;Parallel operations;Parallel processing;Parallel structures;Pipeline patterns;Program execution;Refactorings;Sequential design;Sequential model;Software developer;Software development tools;Software project;Software Quality;Video encoder;Computer software selection and evaluation;Design;Embedded systems;Microprocessor chips;Multicore programming;Parallel programming;Systems analysis;Software design,"Chu, P.-H.; Department of Information Engineering and Computer Science, Feng Chia UniversityTaiwan; email: phchu@mail.fcu.edu.tw",,,,,,,20058039,,,,English,Intl. J. Adv. Comput. Technolog.,Article,Scopus,,2-s2.0-80555146561,,Taiwan,mail.fcu.edu.tw,,,"Hsueh N.-L., Chu P.-H., Hsiung P.-A., Chuang M.-J., Chu W., Chang C.-H., Koong C.-S., Shih C., Yang C.-T."
"Cleland-Huang J., Czauderna A., Keenan E.",A persona-based approach for exploring architecturally significant requirements in agile projects,2013,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),7830 LNCS,,,18,33,,15,10.1007/978-3-642-37422-7_2,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84875849709&doi=10.1007%2f978-3-642-37422-7_2&partnerID=40&md5=a40647d984fb19b5c6fc7a25434d0f88,"DePaul University, Chicago, IL 60422, United States","Cleland-Huang, J., DePaul University, Chicago, IL 60422, United States; Czauderna, A., DePaul University, Chicago, IL 60422, United States; Keenan, E., DePaul University, Chicago, IL 60422, United States","[Context and motivation] Architecturally significant requirements (ASRs) drive and constrain many aspects of the architecture. It is therefore beneficial to elicit and analyze these requirements in early phases of a project so that they can be taken into consideration during the architectural design of the system. Unfortunately failure to invest upfront effort in exploring stakeholders quality concerns, can lead to the need for significant refactoring efforts to accommodate emerging requirements. This problem is particularly evident in agile projects which are inherently incremental. [Question/Problem] Existing techniques for early discovery of ASRs, such as Win-Win and i*, are typically rejected by agile development teams as being somewhat heavy-weight. A light-weight approach is therefore needed to help developers identify and explore critical architectural concerns early in the project. [Principal ideas/results] In this paper we present the use of Architecturally-Savvy Personas (ASP-Lite). The personas are used to emerge and analyze stakeholders' quality concerns and to drive and validate the architectural design. ASP-Lite emerged from our experiences working with the requirements and architectural design of the TraceLab project. The approach proved effective for discovering, analyzing, and managing architecturally significant requirements, and then for designing a high-level architectural solution which was designed to satisfy requirements despite significant interdependencies and tradeoffs. [Contributions] This paper presents the ASP-Lite approach and describes its support for architectural design in the US$2 Million TraceLab project. © 2013 Springer-Verlag.",architecturally significant requirements; architecture; personas; requirements; tradeoffs,Agile development; Architectural solutions; architecturally significant requirements; Light weight; personas; Quality concerns; requirements; tradeoffs; Architecture; Commerce; Computer software selection and evaluation; Requirements engineering; Architectural design,architecturally significant requirements;architecture;personas;requirements;tradeoffs;Agile development;Architectural solutions;Light weight;Quality concerns;Commerce;Computer software selection and evaluation;Requirements engineering;Architectural design,"Cleland-Huang, J.; DePaul University, Chicago, IL 60422, United States; email: jhuang@cs.depaul.edu",,,,,,,03029743,9783642374210,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-84875849709,,United States,cs.depaul.edu,,,"Cleland-Huang J., Czauderna A., Keenan E."
"Sangeetha, M., Sengottuvelan, P.",A Perspective Approach for Refactoring Framework Using Monitor Based Approach,2017,"2017 INTERNATIONAL CONFERENCE ON I-SMAC (IOT IN SOCIAL, MOBILE, ANALYTICS AND CLOUD) (I-SMAC)",,,,733,737,5,0,,,,,Code smells are prototype of devise shortcomings in the code that preserve potentially basis problems during software maintenance. Detecting and resolving code smells is protracted progression. Many numerals of code smells have been accredited and the succession through which the detection and resolution of code smells are maneuvered infrequently because developers do not discriminate how to rectify the sequences of code smells. Refactoring tools are used to aid software refactoring and assists the developers to restructure the code. Obtainable refactoring tools are submissive and human driven. Few refactoring tools valor be outcome in poor software quality and delayed refactoring may lead to higher refactoring cost. A refactoring framework is proposed which right away detects the code smells and changes in the source code are analyzed by running a monitor at the background. The proposed framework is assessed on different non-trivial open source applications and the evaluation results proposed that the refactoring framework would assist to avoid the more code smells and average life extent of resolved smells can be reduced.,Software Refactoring; Monitor; Code smell detection; feedback controller; Instant Refactoring,,Software Refactoring;Monitor;Code smell detection;feedback controller;Instant Refactoring,,,"345 E 47TH ST, NEW YORK, NY 10017 USA","International Conference on I-SMAC (IoT in Social, Mobile, Analytics and Cloud) (I-SMAC)","Palladam, INDIA","FEB 10-11, 2017",IEEE,,978-1-5090-3243-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000427222200135,2-s2.0-85034611197,,No email,,,"Sangeetha, M.; Sengottuvelan, P."
"Hora, A., Etien, A., Anquetil, N., Ducasse, S., Valente, M.T.",APIEvolutionMiner: Keeping API Evolution under Control,2014,"2014 SOFTWARE EVOLUTION WEEK - IEEE CONFERENCE ON SOFTWARE MAINTENANCE, REENGINEERING, AND REVERSE ENGINEERING (CSMR-WCRE)",,,,420,+,3,4,,,"[Hora, Andre; Etien, Anne; Anquetil, Nicolas; Ducasse, Stephane] Inria, RMoD Team, Lille, France; [Valente, Marco Tulio] Univ Fed Minas Gerais, Dept Comp Sci, Belo Horizonte, MG, Brazil",,"During software evolution, source code is constantly refactored. In real-world migrations, many methods in the newer version are not present in the old version (e.g., 60% of the methods in Eclipse 2.0 were not in version 1.0). This requires changes to be consistently applied to reflect the new API and avoid further maintenance problems. In this paper, we propose a tool to extract rules by monitoring API changes applied in source code during system evolution. In this process, changes are mined at revision level in code history. Our tool focuses on mining invocation changes to keep track of how they are evolving. We also provide three case studies in order to evaluate the tool.",,,,andre.hora@inria.fr; anne.etien@inria.fr; nicolas.anquetil@inria.fr; stephane.ducasse@inria.fr; mtov@dcc.ufmg.br,"Demeyer, S; Binkley, D; Ricca, F","345 E 47TH ST, NEW YORK, NY 10017 USA","Software Evolution Week / IEEE Conference on Software Maintenance, Reengineering, and Reverse Engineering (CSMR-WCRE)","Antwerp, BELGIUM","FEB 03-06, 2014",IEEE,,978-1-4799-3752-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000349240500057,,France;Brazil,inria.fr,Inria;Univ Fed Minas Gerais,"Inria, France;Univ Fed Minas Gerais, Brazil","Hora, Andre; Etien, Anne; Anquetil, Nicolas; Ducasse, Stephane; Valente, Marco Tulio"
"Xing Z., Stroulia E.",API-evolution support with diff-catchup,2007,IEEE Transactions on Software Engineering,33,12,,818,836,,77,10.1109/TSE.2007.70747,https://www.scopus.com/inward/record.uri?eid=2-s2.0-36348955574&doi=10.1109%2fTSE.2007.70747&partnerID=40&md5=a67ec11ae98e5bafcc0a4a5a1f05a169,"Computing Science Department, University of Alberta, Edmonton, AB T6G 2E1, Canada","Xing, Z., Computing Science Department, University of Alberta, Edmonton, AB T6G 2E1, Canada; Stroulia, E., Computing Science Department, University of Alberta, Edmonton, AB T6G 2E1, Canada","Refactoring is an important activity in the evolutionary development of object-oriented software systems. Several IDEs today support the automated application of some refactorings; at the same time, there is substantial on-going research aimed at developing support for deciding when and how software should be refactored and for estimating the effect of the refactoring on the quality requirements of the software. On the other hand, understanding the refac-torings in the evolutionary history of a software system is essential in understanding its design rationale, which might be very helpful in assisting future maintenance and evolution tasks. The JDEvAn tool supports a comprehen-sive refactoring-analysis process, including the extraction of logical-design elements and relations from the system's code, the recovery of design-level changes from one version to the next, the identification of refactorings as compo-sitions of such changes, and the interactive visualization and analysis of the recovered changes. In this paper, we discuss JDEvAn' method and argue for its effectiveness with two case studies on realistic open-source object-oriented software, in the context of which we show how the recovered refactoring knowledge may be used to guide future development. © 2007 IEEE.",D.2.10.g Object-oriented design methods; D.2.2. eProgrammer workbench; D.2.3 Coding Tools and Techniques; D.2.3.a Object-oriented programming; Object oriented programming; Refactoring,Computer software maintenance; Evolutionary algorithms; Object oriented programming; Software design; Interactive visualization; Software refactoring; Software engineering,D.2.10.g Object-oriented design methods;D.2.2. eProgrammer workbench;D.2.3 Coding Tools and Techniques;D.2.3.a Object-oriented programming;Object oriented programming;Refactoring;Computer software maintenance;Evolutionary algorithms;Software design;Interactive visualization;Software refactoring;Software engineering,"Xing, Z.; Computing Science Department, University of Alberta, Edmonton, AB T6G 2E1, Canada; email: xing@cs.ualberta.ca",,,,,,,00985589,,IESED,,English,IEEE Trans Software Eng,Conference Paper,Scopus,,2-s2.0-36348955574,,Canada,cs.ualberta.ca,,,"Xing Z., Stroulia E."
Tronicek Z.,API evolution with refactoringng,2010,"Proceedings - 2010 2nd WRI World Congress on Software Engineering, WCSE 2010",2,, 5718396,293,297,,0,10.1109/WCSE.2010.107,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952941767&doi=10.1109%2fWCSE.2010.107&partnerID=40&md5=e82bf20f998a41096eaaa798c53c8691,"Department of Software Engineering, FIT CTU, Prague, Czech Republic","Troníček, Z., Department of Software Engineering, FIT CTU, Prague, Czech Republic","When frameworks and libraries evolve, they often change interfaces. Upgrade to a new version of framework or library leads to changing code manually. We describe a new refactoring tool for the Java programming language that enables automatic migration to a new framework or library, provided that library authors delivered the refactoring rules. © 2010 IEEE.",API evolution; Java; NetBeans; Refactoring,API evolution; Java; NetBeans; Refactoring tools; Refactorings; Computer programming; Software engineering; Java programming language,API evolution;Java;NetBeans;Refactoring;Refactoring tools;Refactorings;Computer programming;Software engineering;Java programming language,"Troníček, Z.; Department of Software Engineering, FIT CTU, Prague, Czech Republic",,,,,,,,9780769543031,,,English,"Proc. - WRI World Congr. Softw. Eng., WCSE",Conference Paper,Scopus,,2-s2.0-79952941767,,Czech Republic,No email,,,Tronicek Z.
"Wang, C.Y., Hirasawa, S., Takizawa, H., Kobayashi, H.",A Platform-Specific Code Smell Alert System for High Performance Computing Applications,2014,PROCEEDINGS OF 2014 IEEE INTERNATIONAL PARALLEL & DISTRIBUTED PROCESSING SYMPOSIUM WORKSHOPS (IPDPSW),,,,653,662,10,0,10.1109/IPDPSW.2014.76,,"[Wang, Chunyan; Hirasawa, Shoichi; Takizawa, Hiroyuki] Tohoku Univ, Grad Sch Informat Sci, Aoba Ku, 6-6-01 Aramaki Aza Aoba, Sendai, Miyagi 9808579, Japan; [Wang, Chunyan; Hirasawa, Shoichi; Takizawa, Hiroyuki] JST CREST, Aoba Ku, Sendai, Miyagi, Japan; [Kobayashi, Hiroaki] Tohoku Univ, Cybersci Ctr, Aoba Ku, Sendai, Miyagi 9808578, Japan",,"A code smell is any part of an application code that might indicate a code or design problem, which makes the application code hard to evolve and maintain. Automatic detection of code smells has been studied to help programmers find which parts of their application codes should be refactored. However, code smells have not been defined in a formal manner. Moreover, existing detection tools are designed for object-oriented applications, but rarely provided for high performance computing (HPC) applications. HPC applications are usually optimized for a particular platform to achieve a high performance, and hence have special code smells called platform-specific code smells (PSCSs). The purpose of this work is to develop a code smell alert system to help programmers find PSCSs of HPC applications to improve the performance portability across different platforms. This paper presents a PSCS alert system that is based on an abstract syntax tree (AST) and XML. Code patterns of PSCSs are defined in a formal way using the AST information represented in XML. XML Path Language (XPath) is used to describe those patterns. The evaluation results obtained by using real applications show that the proposed system can alert potential PSCSs to programmers.",Code Smell Detection; XML representation; AST; HPC,,Code Smell Detection;XML representation;AST;HPC,wchunyan@sc.isc.tohoku.ac.jp; hirasawa@sc.isc.tohoku.ac.jp; tacky@isc.tohoku.ac.jp; koba@isc.tohoku.ac.jp,,"345 E 47TH ST, NEW YORK, NY 10017 USA",28th IEEE International Parallel & Distributed Processing Symposium Workshops (IPDPSW),"Phoenix, AZ","MAY 19-23, 2014",IEEE,,978-1-4799-4116-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000399141700074,,Japan,sc.isc.tohoku.ac.jp,Tohoku Univ;JST CREST,"Tohoku Univ, Japan;JST CREST, Japan","Wang, Chunyan; Hirasawa, Shoichi; Takizawa, Hiroyuki; Kobayashi, Hiroaki"
"Kruger J., Fenske W., Thum T., Aporius D., Saake G., Leich T.",Apo-games-a case study for reverse engineering variability from cloned Java variants,2018,ACM International Conference Proceeding Series,1,,,251,256,,6,10.1145/3233027.3236403,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85055553040&doi=10.1145%2f3233027.3236403&partnerID=40&md5=87e1efe515bf4a13895db6c2d1f4979d,"Harz University of Applied Science, Otto-von-Guericke-University, Wernigerode, Germany; Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Otto-von-Guericke-University, Magdeburg, Germany; Technische Universität Braunschweig, Braunschweig, Germany; Eudemonia Solutions AG, Magdeburg, Germany; Harz University of Applied Sciences, METOP GmbH, Wernigerode, Germany; Harz University of Applied Sciences, METOP GmbH, Magdeburg, Germany","Krüger, J., Harz University of Applied Science, Otto-von-Guericke-University, Wernigerode, Germany, Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Fenske, W., Otto-von-Guericke-University, Magdeburg, Germany; Thüm, T., Technische Universität Braunschweig, Braunschweig, Germany; Aporius, D., Eudemonia Solutions AG, Magdeburg, Germany; Saake, G., Harz University of Applied Science, Otto-von-Guericke-University, Magdeburg, Germany; Leich, T., Harz University of Applied Sciences, METOP GmbH, Wernigerode, Germany, Harz University of Applied Sciences, METOP GmbH, Magdeburg, Germany","Software-product-line engineering is an approach to systematically manage reusable software features and has been widely adopted in practice. Still, in most cases, organizations start with a single product that they clone and modify when new customer requirements arise (a.k.a. Clone-and-own). With an increasing number of variants, maintenance can become challenging and organizations may consider migrating towards a software product line, which is referred to as extractive approach. While this is the most common approach in practice, techniques to extract variability from cloned variants still fall short in several regards. In particular, this accounts for the low accuracy of automated analyses and refactoring, our limited understanding of the costs involved, and the high manual effort. A main reason for these limitations is the lack of realistic case studies. To tackle this problem, we provide a set of cloned variants. In this paper, we characterize these variants and challenge the research community to apply techniques for reverse engineering feature models, feature location, code smell analysis, architecture recovery, and the migration towards a software product line. By evaluating solutions with the developer of these variants, we aim to contribute to a larger body of knowledge on this real-world case study. © 2018 Copyright held by the owner/author(s).",Case study; Data set; Extractive approach; Feature location; Reverse engineering; Software-product-line engineering,Cloning; Computer software reusability; Java programming language; Reverse engineering; Software design; Architecture recovery; Customer requirements; Data set; Extractive approach; Feature location; Research communities; Software Product Line; Software product line engineerings; Feature extraction,Case study;Data set;Extractive approach;Feature location;Reverse engineering;Software-product-line engineering;Cloning;Computer software reusability;Java programming language;Software design;Architecture recovery;Customer requirements;Research communities;Software Product Line;Software product line engineerings;Feature extraction,,Light A.Lee Y.Lee Y.Garde J.Botterweck G.Nadi S.Kanstrup A.M.Borba P.Vines J.Berger T.Mannisto T.Teli M.Brandt E.Bodker K.Benavides D.,,,,,Association for Computing Machinery,,9781450363716; 9781450364645,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85055553040,,Germany,No email,,,"Kruger J., Fenske W., Thum T., Aporius D., Saake G., Leich T."
"Natale, G., Stramondo, G., Bressana, P., Cattaneo, R., Sciuto, D., Santambrogio, M.D.",A Polyhedral Model-based Framework for Dataflow Implementation on FPGA devices of Iterative Stencil Loops,2016,2016 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN (ICCAD),,,,,,8,0,10.1145/2966986.2966995,,"[Natale, Giuseppe; Stramondo, Giulio; Bressana, Pietro; Cattaneo, Riccardo; Sciuto, Donatella; Santambrogio, Marco D.] Politecn Milan, DEIB, Via Ponzio 34-5, Milan, Italy; [Stramondo, Giulio] Univ Amsterdam, Sci Pk 904, Amsterdam, Netherlands",,"Iterative Stencil Loops (ISLs) are a specific class of algorithms of great importance for their substantial presence in a lot of industrial and scientific computing applications, such as in numerical methods for solving partial differential equation - e.g. reverse time migration and heat distribution simulation - or in cellular automata - used for instance for random number generation and error correction. In this work, we propose a hardware acceleration methodology based on the polyhedral model and implement the related framework to automatically accelerate ISLs on a multi-FPGA system. The experimental evaluation shows that the throughput obtained by our solution scales linearly with the amount of resources used on the FPGAs, the power efficiency increases proportionally to the amount of instantiated computation, and outperforms the power efficiency figure of state of the art ISL implementations running on an Intel Xeon CPU by at most 10x. A key aspect of this approach is also that no knowledge of the underlying architecture is requested to the application designer, as no code refactoring is needed to make the application suitable to be processed by our framework.",FPGAs; Dataflow Architectures; Polyhedral Model; Power Efficiency,,FPGAs;Dataflow Architectures;Polyhedral Model;Power Efficiency,giuseppe.natale@polimi.it; giulio.stramondo@mail.polimi.it; pietro.bressana@mail.polimi.it; riccardo.cattaneo@polimi.it; donatella.sciuto@polimi.it; marco.santambrogio@polimi.it,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",35th IEEE/ACM International Conference on Computer-Aided Design (ICCAD),"Austin, TX","NOV 07-10, 2016",ASSOC COMPUTING MACHINERY,1933-7760,978-1-4503-4466-1,,,English,ICCAD-IEEE ACM INT,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000390297800077,,Italy;Netherlands,polimi.it,Politecn Milan;Univ Amsterdam,"Politecn Milan, Italy;Univ Amsterdam, Netherlands","Natale, Giuseppe; Stramondo, Giulio; Bressana, Pietro; Cattaneo, Riccardo; Sciuto, Donatella; Santambrogio, Marco D."
"Langer, P., Wimrner, M., Brosch, P., Herrmannsdorfer, M., Seidl, M., Wieland, K., Kappel, G.",A posteriori operation detection in evolving software models,2013,JOURNAL OF SYSTEMS AND SOFTWARE,86,2,,551,566,16,27,10.1016/j.jss.2012.09.037,,"[Langer, Philip; Brosch, Petra; Wieland, Konrad; Kappel, Gerti] Vienna Univ Technol, Business Informat Grp, Vienna, Austria; [Wimrner, Manuel] Univ Malaga, Software Engn Grp, E-29071 Malaga, Spain; [Herrmannsdoerfer, Markus] Tech Univ Munich, Inst Informat, D-80290 Munich, Germany; [Seidl, Martina] Johannes Kepler Univ Linz, Inst Formal Models & Verificat, Linz, Austria",,"As every software artifact, also software models are subject to continuous evolution. The operations applied between two successive versions of a model are crucial for understanding its evolution. Generic approaches for detecting operations a posteriori identify atomic operations, but neglect composite operations, such as refactorings, which leads to cluttered difference reports. To tackle this limitation, we present an orthogonal extension of existing atomic operation detection approaches for detecting also composite operations. Our approach searches for occurrences of composite operations within a set of detected atomic operations in a post-processing manner. One major benefit is the reuse of specifications available for executing composite operations also for detecting applications of them. We evaluate the accuracy of the approach in a real-world case study and investigate the scalability of our implementation in an experiment. (c) 2012 Elsevier Inc. All rights reserved.",Model evolution; Model refactoring; Model comparison,REFACTORINGS; TRANSFORMATION; EVOLUTION,Model evolution;Model refactoring;Model comparison;REFACTORINGS;TRANSFORMATION;EVOLUTION,langer@big.tuwien.ac.at,,"STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA",,,,ELSEVIER SCIENCE INC,0164-1212,,,,English,J SYST SOFTWARE,Article,WoS,Computer Science,WOS:000313600700021,2-s2.0-84871927997,Austria;Spain;Germany,big.tuwien.ac.at,Vienna Univ Technol;Univ Malaga;Tech Univ Munich;Johannes Kepler Univ Linz,"Vienna Univ Technol, Austria;Univ Malaga, Spain;Tech Univ Munich, Germany;Johannes Kepler Univ Linz, Austria","Langer, Philip; Wimrner, Manuel; Brosch, Petra; Herrmannsdoerfer, Markus; Seidl, Martina; Wieland, Konrad; Kappel, Gerti"
"Macek, O., Richta, K.",Application and Relational Database Co-Refactoring,2014,COMPUTER SCIENCE AND INFORMATION SYSTEMS,11,2,,503,524,22,1,10.2298/CSIS130610033M,,"[Macek, Ondrej] Czech Tech Univ, Fac Elect Engn, Dept Comp Sci & Engn, Prague 12135 2, Czech Republic; [Richta, Karel] Charles Univ Prague, Fac Math & Phys, Dept Software Engn, Prague 11800 1, Czech Republic",,"A refactoring of application persistent objects affects not only the source code but the stored data as well. The change is usually processed in two steps: refactoring and data migration, which is ineffective and error prone. We provide a formal model for solution which is capable to migrate database according to a refactoring in the application code. The feasibility of the change and its data-secure processing is addressed as well.",refactoring; relational schema evolution; application and database coevolution; formal model,EVOLUTION,refactoring;relational schema evolution;application and database coevolution;formal model;EVOLUTION,macekond@fel.cvut.cz; karel.richta@mff.cuni.cz,,"UNIV NOVI SAD, FAC TECH SCI, TRG DOSITEJA OBRADOVICA 6, NOVI SAD, 21000, SERBIA",,,,COMSIS CONSORTIUM,1820-0214,,,,English,COMPUT SCI INF SYST,Article,WoS,Computer Science,WOS:000340077000006,,Czech Republic,fel.cvut.cz,Czech Tech Univ;Charles Univ Prague,"Czech Tech Univ, Czech Republic;Charles Univ Prague, Czech Republic","Macek, Ondrej; Richta, Karel"
"Gadioli, D., Palermo, G., Silvano, C.",Application Autotuning to Support Runtime Adaptivity in Multicore Architectures,2015,"PROCEEDINGS INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTER SYSTEMS - ARCHITECTURES, MODELING AND SIMULATION (SAMOS XV)",,,,173,180,8,10,,,"[Gadioli, Davide; Palermo, Gianluca; Silvano, Cristina] Politecn Milan, Dipartimento Elettron Informaz & Bioingn, Milan, Italy",,"In this work, we introduce an application auto-tuning framework to dynamically adapt applications in multicore architectures. In particular, the framework exploits design-time knowledge and multi-objective requirements expressed by the user, to drive the autotuning process at the runtime. It also exploits a monitoring infrastructure to get runtime feed-back and to adapt to external changing conditions. The intrusiveness of the autotuning framework in the application (in terms of refactoring and lines of code to be added) has been kept limited, also to minimize the integration cost. To assess the proposed framework, we carried out an experimental campaign to evaluate the overhead, the relevance of the described features and the efficiency of the framework.",,,,davide.gadioli@polimi.it; gianluca.palermo@polimi.it; cristina.silvano@polimi.it,"Soudris, D; Carro, L","345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Embedded Computer Systems Architectures Modeling and Simulation,"Samos, GREECE","JUL 20-23, 2015",IEEE,,978-1-4673-7311-1,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000380507900024,2-s2.0-84963690242,Italy,polimi.it,Politecn Milan,"Politecn Milan, Italy","Gadioli, Davide; Palermo, Gianluca; Silvano, Cristina"
"Watson G., Rasmussen C., Tibbitts B.",Application development using eclipse and the parallel tools platform,2006,"Proceedings of the 2006 ACM/IEEE Conference on Supercomputing, SC'06",,, 1188668,,,,1,10.1145/1188455.1188668,https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548219555&doi=10.1145%2f1188455.1188668&partnerID=40&md5=63427d43918e47b1a8f6c564ed944974,,"Watson, G.; Rasmussen, C.; Tibbitts, B.","The Eclipse Parallel Tools Platform (PTP) is an Eclipse Foundation Technology Project (http://eclipse.org/ptp) that allows parallel tools to be integrated into the Eclipse environment.Eclipse offers many features you'd expect from a commercial quality IDE: a syntax-highlighting editor, incremental code compilation, a source-level debugger, support for source control systems such as CVS and Subversion, code refactoring, and support for multiple languages, including C, C++, and Fortran.PTP provides a highly integrated environment designed for parallel application development. It provides a portable open-source IDE capable of supporting a wide range of parallel architectures and runtime systems; a scalable parallel debugger; support for the integration of a wide range of parallel tools; and an environment that simplifies the end-user interaction with parallel systems.This tutorial aims to introduce participants to the Eclipse platform and provide hands-on experience in developing and debugging parallel applications using Eclipse and PTP with C, Fortran, and MPI. © 2006 IEEE.",,Parallel Tools Platform (PTP); Runtime systems; Source-level debuggers; Feature extraction; Interactive computer systems; Object oriented programming; Parallel processing systems; Program debugging; Syntactics; Computer aided software engineering,Parallel Tools Platform (PTP);Runtime systems;Source-level debuggers;Feature extraction;Interactive computer systems;Object oriented programming;Parallel processing systems;Program debugging;Syntactics;Computer aided software engineering,,,,,,,,,0769527000; 9780769527000,,,English,Proc. ACM/IEEE Conf. Supercomput.,Conference Paper,Scopus,,2-s2.0-34548219555,,,No email,,,"Watson G., Rasmussen C., Tibbitts B."
"Lee, S.J., Liu, M., Jun, S.W., Xu, S.T., Kim, J., Arvind",Application-Managed Flash,2016,14TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES (FAST '16),,,,339,353,15,24,,,"[Lee, Sungjin; Liu, Ming; Jun, Sangwoo; Xu, Shuotao; Arvind] MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA; [Kim, Jihong] Seoul Natl Univ, Dept Comp Sci & Engn, Seoul 151, South Korea",,"In flash storage, an FTL is a complex piece of code that resides completely inside the storage device and is provided by the manufacturer. Its principal virtue is providing interoperability with conventional HDDs. However, this virtue is also its biggest impediment in reaching the full performance of the underlying flash storage. We propose to refactor the flash storage architecture so that it relies on a new block I/O interface which does not permit overwriting of data without intervening erasures. We demonstrate how high-level applications, in particular file systems, can deal with this restriction efficiently by employing append-only segments. This refactoring dramatically reduces flash management overhead and improves performance of applications, such as file systems and databases, by permitting them to directly manage flash storage. Our experiments on a machine with the new block I/O interface show that DRAM in the flash controller is reduced by 128X and the performance of the file system improves by 80% over conventional SSDs.",,MEMORY,MEMORY,,,"SUITE 215, 2560 NINTH ST, BERKELEY, CA 94710 USA",14th USENIX Conference on File and Storage Technologies (FAST),"Santa Clara, CA","FEB 22-25, 2016",USENIX ASSOC,,978-1-931971-28-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000385264300026,,United States;South Korea,No email,MIT;Seoul Natl Univ,"MIT, United States;Seoul Natl Univ, South Korea","Lee, Sungjin; Liu, Ming; Jun, Sangwoo; Xu, Shuotao; Kim, Jihong; Arvind"
"Zhang L.J., Xie X.F.",Application of identical degree of set pair analysis on software refactoring,2010,"2010 International Conference on Computational Intelligence and Software Engineering, CiSE 2010",,, 5676831,,,,1,10.1109/CISE.2010.5676831,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951666831&doi=10.1109%2fCISE.2010.5676831&partnerID=40&md5=ed4fda8b7e86a83bd64c832329486895,"Department of Ordnance Science and Technology, Naval Aeronautical and Astronautical University, Yantai, China","Zhang, L.-J., Department of Ordnance Science and Technology, Naval Aeronautical and Astronautical University, Yantai, China; Xie, X.-F., Department of Ordnance Science and Technology, Naval Aeronautical and Astronautical University, Yantai, China","Set pair analysis possesses many virtues, including specific concept, convenience calculation and it covers comprehensive information as well. In course of software refactoring, traditional code locating method mostly relies on developer's observations and subjective perceptions, which brings with much inconvenience. Therefore, a new software refactoring scheme optimization model was built up based on identical degree of set pair analysis, in virtue of correlation indicators of software metrics, which offered a resolution to code locating in software refactoring. This paper applied variation coefficient method to calculate the weight of indicators, which improves the reliability of scheme evaluation. An experimental case argues that the set pair analysis model can locate the iffy code correctly, and furthermore, it can offer specific refactoring order of each scheme. ©2010 IEEE.",Identical degree; Scheme optimization; Set pair analysis; Software refactoring,Comprehensive information; Identical degree; Refactorings; Scheme evaluation; Scheme optimization; Set pair analysis; Software metrics; Software refactoring; Variation coefficient; Artificial intelligence; Software engineering; Optimization,Identical degree;Scheme optimization;Set pair analysis;Software refactoring;Comprehensive information;Refactorings;Scheme evaluation;Software metrics;Variation coefficient;Artificial intelligence;Software engineering;Optimization,"Zhang, L.-J.; Department of Ordnance Science and Technology, Naval Aeronautical and Astronautical University, Yantai, China; email: zljcx1983@yahoo.cn",,,,,,,,9781424453924,,,English,"Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,Scopus,,2-s2.0-79951666831,,China,yahoo.cn,,,"Zhang L.-J., Xie X.-F."
"Kumar, L., Sureka, A.",Application of LSSVM and SMOTE on Seven Open Source Projects for Predicting Refactoring at Class Level,2017,2017 24TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE (APSEC 2017),,,,90,99,10,1,10.1109/APSEC.2017.15,,"[Kumar, Lov] Thapar Univ, Patiala, Punjab, India; [Sureka, Ashish] Ashoka Univ, Rai, Haryana, India",,"Source code refactoring consisting of modifying the structure of the source code without changing its functionality and external behavior. We present a method to predict refactoring candidates at class level which can help developers in improving their design and structure of source code while preserving the behavior. We propose a technique to predict refactoring candidates based on the application of a machine learning based framework. We use Least Squares Support Vector Machines (LS-SVM) as the learning algorithm, Principal Component Analysis (PCA) as a feature extraction technique and Synthetic Minority Over-sampling Technique (SMOTE) as a technique for handling imbalanced data. We start with 102 source code metrics as input features which are then reduced to 31 features after removing irrelevant and redundant features through statistical tests. We conduct a series of experiments on publicly available software engineering dataset consisting of seven open-source software systems in which the refactored classes are manually validated. We apply LS-SVM with three different functions: linear, polynomial and Radial Basis Function (RBF). Statistical significance test demonstrate that RBF kernel outperforms linear and polynomial kernel but there is no statistically significant difference between the performance of linear and polynomial kernel. Statistical significance test reveals that with-SMOTE technique outperforms without-SMOTE and all metrics outperforms PCA based metrics. The mean value of Area Under Curve (AUC) for LS-SVM RBF kernel is 0.96.",Empirical Software Engineering; Machine Learning; Predictive Modeling; Refactoring; Software Maintenance; Source Code Metrics,OPPORTUNITIES; IDENTIFICATION,Empirical Software Engineering;Machine Learning;Predictive Modeling;Refactoring;Software Maintenance;Source Code Metrics;OPPORTUNITIES;IDENTIFICATION,lovkumar505@gmail.com; ashish.sureka@ashoka.edu.in,"Lv, J; Zhang, H; Hinchey, M; Liu, X","345 E 47TH ST, NEW YORK, NY 10017 USA",24th Asia-Pacific Software Engineering Conference (APSEC),"Nanjing, PEOPLES R CHINA","DEC 04-08, 2017",IEEE,1530-1362,978-1-5386-3681-7,,,English,ASIA PAC SOFWR ENG,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000428733800010,2-s2.0-85045950285,India,gmail.com,Thapar Univ;Ashoka Univ,"Thapar Univ, India;Ashoka Univ, India","Kumar, Lov; Sureka, Ashish"
"Wu B., Yang X.",Application of MVP architecture in reengineering of legacy financial system,2009,"Proceedings - 2009 International Conference on Computational Intelligence and Software Engineering, CiSE 2009",,, 5366503,,,,0,10.1109/CISE.2009.5366503,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949671882&doi=10.1109%2fCISE.2009.5366503&partnerID=40&md5=6d50728dd2609cb1a6a7e0655a88c34b,"College of Computer Science and Technology, Zhejiang University, Hangzhou, China","Wu, B., College of Computer Science and Technology, Zhejiang University, Hangzhou, China; Yang, X., College of Computer Science and Technology, Zhejiang University, Hangzhou, China","As the progress of information technology, some financial systems used for long time can no longer meet the requirement of customers in both user interface and business process, and need reengineering imminently. In order to save the human resource and financial effort, this article raises a reengineering approach by encapsulating the back-end data access code of legacy system and only refactoring the front-end user interface and business logic. In the reengineering work, this article uses MVP (Model-View-Presenter) Architecture. By extracting screen logic into Presenters, the display code in View is independent from logic code in Presenter. Also, the introduction of MVP Architecture greatly enhances the reusability and the testability of business logic code, and finally improves the efficiency of development and test work significantly. ©2009 IEEE.",Code reuse; MVP architecture; Reengineering on legacy system; Windows presentation foundation,Business logic; Business Process; Code reuse; Data access; End-user interfaces; Financial system; Human resources; Logic codes; MVP architecture; Refactorings; Testability; Artificial intelligence; Computer software; Legacy systems; Management information systems; Reusability; User interfaces; Reengineering,Code reuse;MVP architecture;Reengineering on legacy system;Windows presentation foundation;Business logic;Business Process;Data access;End-user interfaces;Financial system;Human resources;Logic codes;Refactorings;Testability;Artificial intelligence;Computer software;Legacy systems;Management information systems;Reusability;User interfaces;Reengineering,"Wu, B.; College of Computer Science and Technology, Zhejiang University, Hangzhou, China; email: bzbz@zju.edu.cn",,,,,,,,9781424445073,,,English,"Proc. - Int. Conf. Comput. Intell. Softw. Eng., CiSE",Conference Paper,Scopus,,2-s2.0-77949671882,,China,zju.edu.cn,,,"Wu B., Yang X."
"Kumar L., Satapathy S.M., Krishna A.",Application of SMOTE and LSSVM with various kernels for predicting refactoring at method level,2018,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),11305 LNCS,,,150,161,,2,10.1007/978-3-030-04221-9_14,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85059056209&doi=10.1007%2f978-3-030-04221-9_14&partnerID=40&md5=a3e9872e1a988a2651fa17622e39d36b,"Department of Computer Science and Information Systems, BITS Pilani Hyderabad, Hyderabad, India; School of Computer Science and Engineering, Vellore Institute of Technology, Vellore, India; School of Electrical Engineering, Computing and Mathematical Sciences, Curtin University, Bentley, Australia","Kumar, L., Department of Computer Science and Information Systems, BITS Pilani Hyderabad, Hyderabad, India; Satapathy, S.M., School of Computer Science and Engineering, Vellore Institute of Technology, Vellore, India; Krishna, A., School of Electrical Engineering, Computing and Mathematical Sciences, Curtin University, Bentley, Australia","Improving maintainability by refactoring is essentially being considered as one of the important aspect of software development. For large and complex systems, identification of code segments, which require re-factorization is a compelling task for software developers. Development of recommendation systems for suggesting methods, which require refactoring are achieved using this research work. Materials and Methods: Literature works considered source code metrics for object-oriented software systems in order to measure the complexity of a software. In order to predict the need of refactoring, the proposed system computes twenty-five different source code metrics at the method level and utilize them as features in a machine learning framework. An open source dataset consisting of five different software systems is being considered for conducting a series of experiments in order to assess the performance of proposed approach. LSSVM with SMOTE data imbalance technique are being utilized in order to overcome the class imbalance problem. Conclusion: Analysis of the results reveals that LS-SVM with RBF kernel using SMOTE results in the best performance. © 2018, Springer Nature Switzerland AG.",Kernels; LSSVM; Refactoring; Smote; Source code metrics,Codes (symbols); Computer programming languages; Learning systems; Object oriented programming; Open source software; Software design; Kernels; LSSVM; Refactorings; Smote; Source code metrics; Open systems,Kernels;LSSVM;Refactoring;Smote;Source code metrics;Codes (symbols);Computer programming languages;Learning systems;Object oriented programming;Open source software;Software design;Refactorings;Open systems,"Kumar, L.; Department of Computer Science and Information Systems, BITS Pilani HyderabadIndia; email: lovkumar505@gmail.com",Leung A.C.S.Cheng L.Ozawa S.,,,,,Springer Verlag,03029743,9783030042202,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-85059056209,,India;Australia,gmail.com,,,"Kumar L., Satapathy S.M., Krishna A."
"Sundararajan, V., Wright, P.K.",Applications of software engineering to manufacturing process planning,2008,JOURNAL OF COMPUTING AND INFORMATION SCIENCE IN ENGINEERING,8,3,034001,,,6,3,10.1115/1.2960488,,"[Sundararajan, V.] Univ Calif Riverside, Dept Mech Engn, Riverside, CA 92521 USA; [Wright, Paul K.] Univ Calif Berkeley, Dept Mech Engn, Berkeley, CA 94720 USA",,"Agile methods of software development promote the use of flexible architectures that can be rapidly refactored and rebuilt as necessary for the project. In the mechanical engineering domain, software tends to be very complex and requires the integration of several modules that result from the efforts of large numbers of programmers over several years. Such software needs to be extensible, modular, and adaptable so that a variety of algorithms can be quickly tested and deployed. This paper presents an application of the unified process (UP) to the development of a research process planning system called CyberCut. UP is used to (1) analyze and critique early versions of CyberCut and (2) to guide current and future developments of the CyberCut system. CyberCut is an integrated process planning system that converts user designs to instructions for a computer numerical control (CNC) milling machine. The conversion process involves algorithms to perform tasks such as feature extraction, fixture planning, tool selection, and tool-path planning. The UP-driven approach to the development of CyberCut involves two phases. The inception phase outlines a clear but incomplete description of the user needs. The elaboration phase involves iterative design, development, and testing using short cycles. The software makes substantial use of design patterns to promote clean and well-defined separation between and within components to enable independent development and testing. The overall development of the software tool took about two months with five programmers. It was later possible to easily integrate or substitute new algorithms into the system so that programming resources were more productively used to develop new algorithms. The experience with UP shows that methodologies such as UP are important for engineering software development where research goals, technology, algorithms, and implementations show dramatic and frequent changes.",,COMPONENTS,COMPONENTS,,,"THREE PARK AVE, NEW YORK, NY 10016-5990 USA",,,,ASME-AMER SOC MECHANICAL ENG,1530-9827,,,,English,J COMPUT INF SCI ENG,Review,WoS,Computer Science; Engineering,WOS:000258643000010,,United States,No email,Univ Calif Riverside;Univ Calif Berkeley,"Univ Calif Riverside, United States;Univ Calif Berkeley, United States","Sundararajan, V.; Wright, Paul K."
"Pissanetzky, S.",Applications of the Matrix Model of Computation,2008,"WMSCI 2008: 12TH WORLD MULTI-CONFERENCE ON SYSTEMICS, CYBERNETICS AND INFORMATICS, VOL IV, PROCEEDINGS",,,,190,195,6,3,,,,,"The Matrix Model of Computation (MMC) is a new Turing-equivalent and Quantum-equivalent virtual machine used for the mathematical analysis of systems. The MMC allows uniform techniques to be applied to all kinds of systems and makes them amenable to formal mathematical manipulation. But the strength of the MMC lies in its applications. In this paper we use simple examples to illustrate three very different applications. First, in Physics, we examine a thought experiment in Newtonian Mechanics. The Scope Constriction Algorithm factorizes the equations and discovers a law of Physics. Similar ideas can be applied to compare theories, search for fundamental symmetries, or test new hypotheses. Second, in business, we note that business rules are semantically similar to the MMC and sketch some ideas for their direct conversion to MMC format. Since the MMC is a relational database, and many businesses already use relational databases, we argue that much of the procedure can be automated. Since the MMC is also a program and can be directly compiled, this offers a direct path from business rules to executable code without programming. Lastly, in Software Engineering, we examine relationships between the MMC and UML class models, MMC support for encapsulation, inheritance and polymorphisml and the use of the MMC for refactoring OO code.",semantic web; mathematical model of computation; relational model of computation; refactoring; object oriented; ontology; physics,,semantic web;mathematical model of computation;relational model of computation;refactoring;object oriented;ontology;physics,,"Callaos, N; Lesso, W; Zinn, CD; Baralt, J; Yoshida, E","14269 LORD BARCLAY DR, ORLANDO, FL 32837 USA","12th World Multi-Conference on Systemics, Cybernetics and Informatics/14th International Conference on Information Systems Analysis and Synthesis","Orlando, FL","JUN 29-JUL 02, 2008",INT INST INFORMATICS & SYSTEMICS,,978-1-934272-34-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000264003300041,2-s2.0-84869418288,,No email,,,"Pissanetzky, Sergio"
"Kambe, T., Takehara, K., Tsukiyama, S.",Application-specific Arithmetic Circuit Design for a Particle Tracking Application,2013,2013 IEEE 4TH LATIN AMERICAN SYMPOSIUM ON CIRCUITS AND SYSTEMS (LASCAS),,,,,,4,0,,,"[Kambe, Takashi] Kinki Univ, Dept E&E, Higashi Osaka City, Osaka, Japan",,"The main bottleneck in system LSI performance is, in many cases, the processing overhead that occurs when arithmetic calculations are performed multiple times. The circuit size and processing time required for multiplication, division and other basic arithmetic operations are often especially large. In this paper we propose an application-specific arithmetic circuit design methodology and apply it to the design of a correlation coefficient calculation circuit for a particle tracking application. Particle tracking velocimetry (PTV) measures velocity fluctuations in fluids and gases and has been applied to a diverse range of flows. However, the algorithms are computationally intensive so to achieve real-time processing speeds implementation in hardware is essential. The computational overhead is accelerated by applying code refactoring, memory access optimization, and variable length pipelining. The processing speed and the circuit size of the design are evaluated. We show that the hardware solution is 1,000 times faster than the software solution and is able to achieve real-time processing speeds.",,,,tkambe@ele.kindai.ac.jp,"Garcia, L","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 4th Latin American Symposium on Circuits and Systems (LASCAS),"Cusco, PERU","FEB 27-MAR 01, 2013",IEEE,2330-9954,978-1-4244-9485-9; 978-1-4673-4897-3,,,English,IEEE LAT AMER SYMP,Proceedings Paper,WoS,Engineering,WOS:000324855900002,2-s2.0-84879407931,Japan,ele.kindai.ac.jp,Kinki Univ,"Kinki Univ, Japan","Kambe, Takashi; Takehara, Kohsei; Tsukiyama, Shuji"
"Cong G., Chung I.H., Wen H., Klepacki D., Murata H., Negishi Y., Moriyama T.",Application tuning through bottleneck-driven refactoring,2010,"Proceedings of the 2010 IEEE International Symposium on Parallel and Distributed Processing, Workshops and Phd Forum, IPDPSW 2010",,, 5470771,,,,0,10.1109/IPDPSW.2010.5470771,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954076417&doi=10.1109%2fIPDPSW.2010.5470771&partnerID=40&md5=508c7a6ae13f3f7c8d59ad383315adca,"IBM research, United States","Cong, G., IBM research, United States; Chung, I.-H., IBM research, United States; Wen, H., IBM research, United States; Klepacki, D., IBM research, United States; Murata, H., IBM research, United States; Negishi, Y., IBM research, United States; Moriyama, T., IBM research, United States","To fully utilize the power of current high performance computing systems, high productivity to the end user is critical. It is a challenge to map an application to the target architecture efficiently. Tuning an application for high performance remains a daunting task, and frequently involves manual changes to the program. Recently refactoring techniques are proposed to rewrite or reorganize programs for various software engineering purposes. In our research we explore combining performance analysis with refactoring techniques for automated tuning that we expect to greatly improve the productivity of application deployment. We seek to build a system that can apply appropriate refactoring according to the bottleneck discovered. We demonstrate the effectiveness of this approach through the tuning of several scientific applications and kernels. © 2010 IEEE.",,Application deployment; Automated tuning; End users; High performance computing systems; High productivity; Performance analysis; Refactorings; Scientific applications; Target architectures; Distributed parameter networks; Productivity; Software engineering; Tuning,Application deployment;Automated tuning;End users;High performance computing systems;High productivity;Performance analysis;Refactorings;Scientific applications;Target architectures;Distributed parameter networks;Productivity;Software engineering;Tuning,"Cong, G.; IBM researchUnited States",,,,,,,,9781424465347,,,English,"Proc. IEEE Int. Symp. Parallel Distrib. Process., Workshops Phd Forum, IPDPSW",Conference Paper,Scopus,,2-s2.0-77954076417,,United States,No email,,,"Cong G., Chung I.-H., Wen H., Klepacki D., Murata H., Negishi Y., Moriyama T."
"Mekruksavanich, S.",Applied Artificial Optimization Algorithm in Design Flaws Detection,2018,2018 INTERNATIONAL JOINT SYMPOSIUM ON ARTIFICIAL INTELLIGENCE AND NATURAL LANGUAGE PROCESSING (ISAI-NLP 2018),,,,243,247,5,0,,,"[Mekruksavanich, Sakorn] Univ Phayao, Sch Informat & Commun Technol, Dept Comp Engn, Phayao, Thailand",,"The detection of design flaws is one of the most important aspects of software quality control, and the process should therefore be an integral part of the development and also the maintenance of software. It is possible to lower costs and extend the useful like cycle of the software simply by detecting design flaws at an early stage, and therefore attempts have been made to automate the procedures involved in detecting and fixing these flaws. One of the most common ways of detecting flaws is through the use of heuristic metrics which use predetermined standards as a means of analyzing the findings. While the approach can work successfully, the problem lies in the determination of those standards, or thresholds. This research study seeks to develop an enhanced method to improve threshold determination to be applied in flaw detection using metric-based designs. Accordingly, for each metric, an algorithm was employed for optimization of the contribution metrics to determine the threshold. The model produced threshold values which could then be adjusted to fit the requirements of the software data input. The findings from the experiments revealed that this approach could generate more appropriate thresholds for application in this context. In addition, the technique was relatively simple and could be used with different software programming languages, reducing the implementation time, and eliminating the need for the specialist expert support which would have traditionally been required in metric-based detection methods.",Design Flaws; Detection; Refactoring; Artificial Optimization Algorithm,,Design Flaws;Detection;Refactoring;Artificial Optimization Algorithm,sakorn.me@up.ac.th,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Joint Symposium on Artificial Intelligence and Natural Language Processing (iSAI-NLP),"Pattaya, THAILAND","NOV 15-17, 2018",IEEE,,978-1-7281-0164-4,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000493561700043,2-s2.0-85065084302,Thailand,up.ac.th,Univ Phayao,"Univ Phayao, Thailand","Mekruksavanich, Sakorn"
"Cheng Y.P., Fan C.W.",Apply capture/replay to xunit testing,2014,"ICIC Express Letters, Part B: Applications",5,2,,349,356,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84893173999&partnerID=40&md5=96a1abecc28eea158fe83a45e15b0ae8,"Department of Computer Science and Information Engineering, National Central University, No. 300, Jhongda Rd, Jhongli City, Taoyuan County 32001, Taiwan","Cheng, Y.-P., Department of Computer Science and Information Engineering, National Central University, No. 300, Jhongda Rd, Jhongli City, Taoyuan County 32001, Taiwan; Fan, C.-W., Department of Computer Science and Information Engineering, National Central University, No. 300, Jhongda Rd, Jhongli City, Taoyuan County 32001, Taiwan","Adopting xUnit testing framework in software development often requires a lot of refactoring to the system under test (SUT). Contrast to system testing which can be performed by tools, xUnit testing is a coding activity which produces test code as the delivery. Test code, unfortunately, is subject to the maintenance problems like system code. In this paper, a prototype tool called CRUnit is proposed to alleviate the test overhead from adopting xUnit testing framework. CRUnit is a JUnit add-on, which can replace the hand-crafted assertions by a Capture/Replay process with the help from debuggers. Contrast to xUnit testing framework that treats a SUT as a blackbox, CRUnit probes the internal states of a SUT so that complicated hand-crafted assertions are no longer needed from test methods. This semi-automated process is achieved by introducing the verification power of human brain and human eyes with the help from ""visualizers"". © 2014 ISSN 2185-2766.",Capture/replay testing; Debugger; Xunit testing,Capture/replay; Debuggers; Internal state; Maintenance Problem; Prototype tools; System testing; System under test; Testing framework; Automation; Software engineering; Testing; Black-box testing,Capture/replay testing;Debugger;Xunit testing;Capture/replay;Debuggers;Internal state;Maintenance Problem;Prototype tools;System testing;System under test;Testing framework;Automation;Software engineering;Testing;Black-box testing,"Department of Computer Science and Information Engineering, National Central University, No. 300, Jhongda Rd, Jhongli City, Taoyuan County 32001, Taiwan",,,,,,,21852766,,,,English,ICIC Express Lett Part B Appl.,Article,Scopus,,2-s2.0-84893173999,,Taiwan,No email,,,"Cheng Y.-P., Fan C.-W."
"Ceccato, M., Marin, M., Mens, K., Moonen, L., Tonella, P., Tourwe, T.",Applying and combining three different aspect mining techniques,2006,SOFTWARE QUALITY JOURNAL,14,3,,209,231,23,33,10.1007/s11219-006-9217-3,,"Delft Univ Technol, Delft, Netherlands; ITCirst, Trento, Italy; Catholic Univ Louvain, B-1348 Louvain, Belgium; CWI, NL-1009 AB Amsterdam, Netherlands",,"Understanding a software system at source-code level requires understanding the different concerns that it addresses, which in turn requires a way to identify these concerns in the source code. Whereas some concerns are explicitly represented by program entities (like classes, methods and variables) and thus are easy to identify, crosscutting concerns are not captured by a single program entity but are scattered over many program entities and are tangled with the other concerns. Because of their crosscutting nature, such crosscutting concerns are difficult to identify, and reduce the understandability of the system as a whole. In this paper, we report on a combined experiment in which we try to identify crosscutting concerns in the JHotDraw framework automatically. We first apply three independently developed aspect mining techniques to JHotDraw and evaluate and compare their results. Based on this analysis, we present three interesting combinations of these three techniques, and show how these combinations provide a more complete coverage of the detected concerns as compared to the original techniques individually. Our results are a first step towards improving the understandability of a system that contains crosscutting concerns, and can be used as a basis for refactoring the identified crosscutting concerns into aspects.",,,,ceccato@itc.it; a.m.marin@ewi.tudelft.nl; kim.mens@uclouvain.be; leon.moonen@computer.org; tonella@itc.it; tom.tourwe@cwi.nl,,"VAN GODEWIJCKSTRAAT 30, 3311 GZ DORDRECHT, NETHERLANDS",13th International Workshop on Program Comprehension,"St Louis, MO","MAY 15-16, 2005",SPRINGER,0963-9314,,,,English,SOFTWARE QUAL J,Article; Proceedings Paper,WoS,Computer Science,WOS:000239300800003,2-s2.0-33746462752,Netherlands;Italy;Belgium,itc.it,Delft;Trento;B-1348 Louvain;NL-1009 AB Amsterdam,"Delft, Netherlands;Trento, Italy;B-1348 Louvain, Belgium;NL-1009 AB Amsterdam, Netherlands","Ceccato, M.; Marin, M.; Mens, K.; Moonen, L.; Tonella, P.; Tourwe, T."
"Feng, T., Zhang, J.C., Li, W.J.",Applying change impact analysis and design metrics in CBR based software design improvement,2005,"INTERNATIONAL SYMPOSIUM ON COMMUNICATIONS AND INFORMATION TECHNOLOGIES 2005, VOLS 1 AND 2, PROCEEDINGS",,,,169,172,4,0,,,"Jilin Univ, Coll Comp Sci & Technol, Minist Educ, Key Lab Symbol Computat & Knowledge Engn, Changchun, Jilin, Peoples R China",,"Applying change impact analysis and design metrics, this paper presents an automated design improvement approach to increase changeability of 00 systems. In this paper, a quantified change impact analysis model is presented to evaluate the changeability of software design. A set of design metrics is studied to characterize a given software design. The approach of design improvement using case based reasoning is provided. Through comparing the design segments and the designs stored in design repository, inflexible structures are identified and replaced by designs with high quality. Finally, a supporting system CBDITCD is designed to support our approach.",change impact analysis; case based reasoning; design pattern; refactoring,,change impact analysis;case based reasoning;design pattern;refactoring,fengtie@jlu.edu.cn,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Symposium on Communications and Information Technologies (ISCIT2005),"Beijing, PEOPLES R CHINA","OCT 12-14, 2005",IEEE,,0-7803-9538-7,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000236075300041,,China,jlu.edu.cn,Coll Comp Sci & Technol,"Coll Comp Sci & Technol, China","Feng, T; Zhang, JC; Li, WJ"
"Yamanaka, Y., Choi, E., Yoshida, N., Inoue, K., Sano, T.",Applying Clone Change Notification System into an Industrial Development Process,2013,2013 IEEE 21ST INTERNATIONAL CONFERENCE ON PROGRAM COMPREHENSION (ICPC),,,,199,206,8,9,,,"[Yamanaka, Yuki; Choi, Eunjong; Inoue, Katsuro] Osaka Univ, Grad Sch Informat Sci & Technol, Suita, Osaka 565, Japan; [Yoshida, Norihiro] Nara Inst Sci & Technol, Grad Sch Informat Sci, Ikoma, Japan; [Sano, Tateki] NEC Corp Ltd, Software Proc Innovat & Standardizat Div, Tokyo, Japan",,"Programmers tend to write code clones unintentionally even in the case that they can easily avoid them. Clone change management is one of crucial issues in open source software (OSS) development as well as in industrial software development (e.g., development of social infrastructure, financial system, and medical equipment). When an industrial developer fixes a defect, he/she has to find the code clones corresponding to the code fragment including it. So far, several studies performed on the analysis of clone evolution in OSS. However, to our knowledge, a few researches have been reported on an application of a clone change notification system to industrial development process. In this paper, we introduce a system for notifying creation and change of code clones, and then report on the experience with 40-days application of it into a development process in NEC Corporation. In the industrial application, a developer successfully identified ten unintentionally-developed clones that should be refactored.",Code Clone; Software Maintenance; Refactoring,CODE CLONES,Code Clone;Software Maintenance;Refactoring;CODE CLONES,y-yuuki@ist.osaka-u.ac.jp; ejchoi@ist.osaka-u.ac.jp; yoshida@is.naist.jp; inoue@ist.osaka-u.ac.jp; t-sano@cp.jp.nec.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 21st International Conference on Program Comprehension (ICPC),"San Francisco, CA","MAY 20-21, 2013",IEEE,1063-6897,978-1-4673-3092-3,,,English,CONF PROC INT SYMP C,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000333336600022,2-s2.0-84885973880,Japan,ist.osaka-u.ac.jp,Osaka Univ;Nara Inst Sci & Technol;NEC Corp Ltd,"Osaka Univ, Japan;Nara Inst Sci & Technol, Japan;NEC Corp Ltd, Japan","Yamanaka, Yuki; Choi, Eunjong; Yoshida, Norihiro; Inoue, Katsuro; Sano, Tateki"
"Arcelli, D., Di Pompeo, D.",Applying Design Patterns to Remove Software Performance Antipatterns: A Preliminary Approach,2017,"8TH INTERNATIONAL CONFERENCE ON AMBIENT SYSTEMS, NETWORKS AND TECHNOLOGIES (ANT-2017) AND THE 7TH INTERNATIONAL CONFERENCE ON SUSTAINABLE ENERGY INFORMATION TECHNOLOGY (SEIT 2017)",109,,,521,528,8,2,10.1016/j.procs.2017.05.330,,"[Arcelli, Davide; Di Pompeo, Daniele] Univ Aquila, DISIM, Via Vetoio, I-67100 Laquila, Italy",,"Patterns and antipatterns represent powerful instruments in the hands of software designers, for improving the quality of software systems. A large variety of design patterns arose since decades, as well as several performance antipatterns have been defined. In this paper we propose a preliminary approach for antipattern-based refactoring of software systems, driven by design patterns application. The approach is focused on refactoring software artifacts (i.e., models, code) by applying design patterns, with the aim of removing possible performance antipatterns occurring on such artifacts. Based on our approach, design patterns are ranked in order to drive the refactoring choice. We also provide an illustrative example as a preliminary validation of our approach, showing how the ranking method works over three design patterns for removing the Empty Semi-Trucks performance antipattern, and we finally identify future research directions of our work. 1877-0509 (C) 2017 The Authors. Published by Elsevier B.V.",Performance Antipatterns; Design Patterns; Software Refactoring; Software Performance Engineering,,Performance Antipatterns;Design Patterns;Software Refactoring;Software Performance Engineering,davide.arcelli@univaq.it,"Shakshuki, E","SARA BURGERHARTSTRAAT 25, PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS","8th International Conference on Ambient Systems, Networks and Technologies (ANT) / 7th International Conference on Sustainable Energy Information Technology (SEIT)","Madeira, PORTUGAL","MAY 16-19, 2017",ELSEVIER SCIENCE BV,1877-0509,,,,English,PROCEDIA COMPUT SCI,Proceedings Paper,WoS,Computer Science; Science & Technology - Other Topics,WOS:000414533000065,2-s2.0-85021796799,Italy,univaq.it,Univ Aquila,"Univ Aquila, Italy","Arcelli, Davide; Di Pompeo, Daniele"
"Sharma T., Samarthyam G., Suryanarayana G.",Applying design principles in practice,2015,ACM International Conference Proceeding Series,18-20-February-2015,,,200,201,,3,10.1145/2723742.2723764,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84955487212&doi=10.1145%2f2723742.2723764&partnerID=40&md5=7809e2a420408ea627baab927e155b9c,"Research and Technology Center, Siemens Technology and Services Pvt. Ltd., Bangalore, 560100, India; Independent Consultant, Classic Royale Garden, Hennur, Bangalore, 560093, India","Sharma, T., Research and Technology Center, Siemens Technology and Services Pvt. Ltd., Bangalore, 560100, India; Samarthyam, G., Independent Consultant, Classic Royale Garden, Hennur, Bangalore, 560093, India; Suryanarayana, G., Research and Technology Center, Siemens Technology and Services Pvt. Ltd., Bangalore, 560100, India","It is widely recognized that the systematic application of relevant design principles plays a key role in taming the complexity involved in real-world software development. In our experience as consultant architects and trainers on software architecture and design in a corporate setting, we find that software engineers have a theoretical understanding of design principles but sorely lack knowledge about how to properly apply them to in realworld situations to achieve high-quality design. This half-day tutorial is geared towards bridging this gap. It first introduces fundamental design principles (viz. abstraction, encapsulation, modularization, and hierarchy) and describes how these can be applied using a set of corresponding enabling techniques. Next, it discusses how design smells can be viewed as violations of these enabling techniques, and explains how these design smells can be refactored via the application of relevant design principles. Finally, it highlights useful tools, processes, and practical techniques that support the application of design principles in real-world software projects. Copyright is held by the owner/author(s).",Design principles; Design smells; Design tools; Enabling techniques; Refactoring; Technical debt,Application programs; Design; Modular construction; Odors; Software engineering; Design Principles; Design tool; Enabling techniques; Refactorings; Technical debts; Software design,Design principles;Design smells;Design tools;Enabling techniques;Refactoring;Technical debt;Application programs;Design;Modular construction;Odors;Software engineering;Design tool;Refactorings;Technical debts;Software design,,Ramanathan M.K.Sureka A.Devanbu P.,,,,,Association for Computing Machinery,,9781450334327,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-84955487212,,India,No email,,,"Sharma T., Samarthyam G., Suryanarayana G."
"Chen L., Xu B., Zhou T., Zhou Y.",Applying generalization refactoring to Java generic programs,2008,"Proceedings - 1st IEEE International Workshop on Semantic Computing and Systems, WSCS 2008",,, 4570812,35,39,,1,10.1109/WSCS.2008.16,https://www.scopus.com/inward/record.uri?eid=2-s2.0-52149098791&doi=10.1109%2fWSCS.2008.16&partnerID=40&md5=00ab50290bfff268c5260bae267fd4dd,"School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China; Jiangsu Institute of Software Quality, Nanjing, 210096, China","Chen, L., School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China, Jiangsu Institute of Software Quality, Nanjing, 210096, China; Xu, B., School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China, Jiangsu Institute of Software Quality, Nanjing, 210096, China; Zhou, T., School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China, Jiangsu Institute of Software Quality, Nanjing, 210096, China; Zhou, Y., School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China, Jiangsu Institute of Software Quality, Nanjing, 210096, China","In generalization refactoring, preconditions and allowable source code modifications depend on type constraints of the refactroed program. Type constraints of parameterized types should be considered when applying the refactoring to generic programs, otherwise type errors may be brought into the refactored program. Some type constraint rules for Java generic programs are presented to verify the preconditions in the refactoring. The type constraints can be solved by traversing a type constraint graph. Based on the type constraint graph, a refactoring algorithm for Extract Interface is proposed. © 2008 IEEE.",,Computational geometry; Computer programming languages; Graph theory; Information theory; Java programming language; Semantics; Parameterized types; Refactoring; Source-code modifications; Type constraints; Type errors; Computer software,Computational geometry;Computer programming languages;Graph theory;Information theory;Java programming language;Semantics;Parameterized types;Refactoring;Source-code modifications;Type constraints;Type errors;Computer software,"Chen, L.; School of Computer Science and Engineering, Southeast University, Nanjing, 210096, China; email: lchen@seu.edu.cn",,,,,,,,9780769533162,,,English,"Proc. - IEEE Int. Workshop Semant. Comput. Syst., WSCS",Conference Paper,Scopus,,2-s2.0-52149098791,,China,seu.edu.cn,,,"Chen L., Xu B., Zhou T., Zhou Y."
"Arcelli D., Cortellessa V., Di Ruscio D.",Applying model differences to automate performance-driven refactoring of software models,2013,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),8168 LNCS,,,312,324,,6,10.1007/978-3-642-40725-3-24,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84884865185&doi=10.1007%2f978-3-642-40725-3-24&partnerID=40&md5=337ff3f53d2f62c40cad6657a4f1df02,"Dipartimento di Ingegneria e Scienze dell'Informazione e Matematica, Università Degli Studi dell'Aquila, 67100 L'Aquila, Italy","Arcelli, D., Dipartimento di Ingegneria e Scienze dell'Informazione e Matematica, Università Degli Studi dell'Aquila, 67100 L'Aquila, Italy; Cortellessa, V., Dipartimento di Ingegneria e Scienze dell'Informazione e Matematica, Università Degli Studi dell'Aquila, 67100 L'Aquila, Italy; Di Ruscio, D., Dipartimento di Ingegneria e Scienze dell'Informazione e Matematica, Università Degli Studi dell'Aquila, 67100 L'Aquila, Italy","Identifying and removing the causes of poor performance in software systems are complex problems, and these issues are usually tackled after software deployment only with human-based means. Performance antipatterns can be used to harness these problems since they capture design patterns that are known leading to performance problems, and they suggest refactoring actions that can solve the problems. This paper introduces an approach to automate software model refactoring based on performance antipatterns. A Role-Based Modeling Language is used to model antipattern problems as Source Role Models (SRMs), and antipattern solutions as Target Role Models (TRMs). Each (SRM, TRM) pair is represented by a difference model that encodes refactoring actions to be operated on a software model to remove the corresponding antipattern. Differences are applied to software models through a model transformation automatically generated by a higher-order transformation. The approach is shown at work on an example in the e-commerce domain. © 2013 Springer-Verlag Berlin Heidelberg.",,Automatically generated; Difference models; E-commerce domains; Model transformation; Performance problems; Performance-driven; Role-based modeling; Software deployment; Artificial intelligence; Computer science; Problem solving,Automatically generated;Difference models;E-commerce domains;Model transformation;Performance problems;Performance-driven;Role-based modeling;Software deployment;Artificial intelligence;Computer science;Problem solving,"Dipartimento di Ingegneria e Scienze dell'Informazione e Matematica, Università Degli Studi dell'Aquila, 67100 L'Aquila, Italy",,,,,,,03029743,9783642407246,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-84884865185,,Italy,No email,,,"Arcelli D., Cortellessa V., Di Ruscio D."
"Hericko M., Juric M.B., Rostaher M., Repinc P.",Applying practices of extreme programming,2003,IASTED International Multi-Conference on Applied Informatics,21,,,955,960,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-1442277764&partnerID=40&md5=f5b1cd69bb86797c6acd8867352e696c,"University of Maribor, Institute of Informatics, Smetanova 17, SI-2000 Maribor, Slovenia; FJA OdaTeam d.o.o., Ptujska cesta 184, SI-2000 Maribor, Slovenia","Heričko, M., University of Maribor, Institute of Informatics, Smetanova 17, SI-2000 Maribor, Slovenia; Jurič, M.B., University of Maribor, Institute of Informatics, Smetanova 17, SI-2000 Maribor, Slovenia; Rostaher, M., FJA OdaTeam d.o.o., Ptujska cesta 184, SI-2000 Maribor, Slovenia; Repinc, P., FJA OdaTeam d.o.o., Ptujska cesta 184, SI-2000 Maribor, Slovenia","This paper presents the results of research that was conducted to investigate how well individual XP practices are recognized and applied in real projects. Refactoring was recognized as an XP practice that is the most difficult to implement. An empirical experiment was carried out to quantify shares of programming activities such as testing, refactoring and adding new functionalities. A simple tool was developed to automate the activity tracking needed to gather quantitative data.",Agile processes; Extreme programming; Software methodologies; XP practices,Automation; Codes (symbols); Communication; Computational complexity; Data acquisition; Interfaces (computer); Problem solving; Software engineering; Agile processes; Extreme programming (XP); Software methodologies; XP practices; Computer programming,Agile processes;Extreme programming;Software methodologies;XP practices;Automation;Codes (symbols);Communication;Computational complexity;Data acquisition;Interfaces (computer);Problem solving;Software engineering;Extreme programming (XP);Computer programming,"Heričko, M.; University of Maribor, Institute of Informatics, Smetanova 17, SI-2000 Maribor, Slovenia; email: marjan.hericko@uni-mb.si",,,,,,,,0889863415,,,English,IASTED Internat. Multi-Conf. Appl. Inform.,Conference Paper,Scopus,,2-s2.0-1442277764,,Slovenia,uni-mb.si,,,"Hericko M., Juric M.B., Rostaher M., Repinc P."
"Haralambiev H., Boychev S., Lilov D., Kraichev K.",Applying source code analysis techniques: A case study for a large mission-critical software system,2011,EUROCON 2011 - International Conference on Computer as a Tool - Joint with Conftele 2011,,, 5929241,,,,1,10.1109/EUROCON.2011.5929241,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79960640352&doi=10.1109%2fEUROCON.2011.5929241&partnerID=40&md5=57414693b60fc99166b3295e5c0c85c2,"Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria","Haralambiev, H., Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria; Boychev, S., Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria; Lilov, D., Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria; Kraichev, K., Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria","Source code analysis has been and still is extensively researched topic with various applications to the modern software industry. In this paper we share our experience in applying various source code analysis techniques for assessing the quality of and detecting potential defects in a large mission-critical software system. The case study is about the maintenance of a software system of a Bulgarian government agency. The system has been developed by a third-Party software vendor over a period of four years. The development produced over 4 million LOC using more than 20 technologies. MuSala Soft won a tender for maintaining this system in 2008. Although the system was operational, there were various issues that were known to its users. So, a decision was made to assess the system's quality with various source code analysis tools. The expectation was that the findings will reveal some of the problems' cause, allowing us to correct the issues and thus improve the quality and focus on functional enhancements. MuSala Soft had already established a special unit Applied Research and Development Center dealing with research and advancements in the area of software system analysis. Thus, a natural next step was for this unit to use the know-how and in-house developed tools to do the assessment. The team used various techniques that had been subject to intense research, more precisely: software metrics, code clone detection, defect and code smells detection through flow-sensitive and points-to analysis, software visualization and graph drawing. In addition to the open-source and free commercial tools, the team used internally developed ones that complement or improve what was available. The internally developed Smart Source Analyzer platform that was used is focused on several analysis areas: source code modeling, allowing easy navigation through the code elements and relations for different programming languages; quality audit through software metrics by aggregating various metrics into a more meaningful quality characteristic (e.g. ""maintainability"" ); source code pattern recognition to detect various security issues and ""code smells"". The produced results presented information about both the structure of the system and its quality. As the analysis was executed in the beginning of the maintenance tenure, it was vital for the team members to quickly grasp the architecture and the business logic. On the other hand, it was important to review the detected quality problems as this guided the team to quick solutions for the existing issues and also highlighted areas that would impede future improvements. The tool IPlasma and its System Complexity View (Fig. 1) revealed where the business logic is concentrated, which are the most important and which are the most complex elements of the system. The analysis with our internal metrics framework (Fig. 2) pointed out places that need refactoring because the code is hard to modify on request or testing is practically impossible. The code clone detection tools showed places where copy and paste programming has been applied. PMD, Find Bugs and Klockwork Solo tools were used to detect various ""code smells"" (Fig. 3). There were a number of occurrences that were indeed bugs in the system. Although these results were productive for the successful execution of the project, there were some challenges that should be addressed in the future through more extensive research. The two aspects we consider the most important are uSability and integration. As most of the tools require very deep understanding of the underlying analysis, the whole process requires tight cooperation between the analysis team and the maintenance team. For example, most of the metrics tools available provide specific values for a given metric without any indication what the value means and what is the threshold. Our internal metrics framework aggregates the metrics into meaningful quality characteristics, which solves the issue Partially. However, the user still often wonders about the justification behind the meaning of the given quality characteristic. There is a need for an explanation system one, which could point out the source code elements and explain why they are considered good or bad. The integration aspect is considered important because such analysis should be performed continuously. In our experience, the analysis is usually performed subsequent to an important event in this case: beginning of maintenance tenure. Some quality assurance practices should be developed and then adopted by the development teams so that the implementation quality is checked continuously. This should cover various activities and instruments, such as the integrated development environment, the code review process, automated builds, etc. In conclusion, we think that implementation quality audit and management is a vital activity that should be integrated into the software development process and the tools that support it should be uSable by the development team members without much knowledge of the underlying analysis. In this paper we presented a case study that showed the benefits of such a process. © 2011 IEEE.",case study; implementation quality; software maintenance; software metrics; source code analysis,Applied research; Business logic; Code clone detection; Code review; Code smell; Commercial tools; Copy-and-paste programming; Development teams; Explanation systems; Functional enhancements; Government agencies; Graph drawing; implementation quality; Integrated development environment; Know-how; Mission critical softwares; Open-source; Points-to analysis; Potential defects; Quality assurance practices; Quality characteristic; Quality problems; Refactorings; Security issues; Software development process; Software industry; software metrics; Software system analysis; Software systems; Software vendors; Software visualization; Source code analysis; Source codes; Specific values; System complexity; System's quality; Team members; Whole process; Cloning; Codes (symbols); Computer software; Computer software maintenance; Defects; Drawing (graphics); Equipment; Integration; Maintainability; Object oriented programming; Odors; Pattern recognition; Problem oriented languages; Program debugging; Quality assurance; Research; Software design; Systems analysis; Technology transfer; Visualization; Web services; Quality control,case study;implementation quality;software maintenance;software metrics;source code analysis;Applied research;Business logic;Code clone detection;Code review;Code smell;Commercial tools;Copy-and-paste programming;Development teams;Explanation systems;Functional enhancements;Government agencies;Graph drawing;Integrated development environment;Know-how;Mission critical softwares;Open-source;Points-to analysis;Potential defects;Quality assurance practices;Quality characteristic;Quality problems;Refactorings;Security issues;Software development process;Software industry;Software system analysis;Software systems;Software vendors;Software visualization;Source codes;Specific values;System complexity;System's quality;Team members;Whole process;Cloning;Codes (symbols);Computer software;Computer software maintenance;Defects;Drawing (graphics);Equipment;Integration;Maintainability;Object oriented programming;Odors;Pattern recognition;Problem oriented languages;Program debugging;Quality assurance;Research;Software design;Systems analysis;Technology transfer;Visualization;Web services;Quality control,"Haralambiev, H.; Applied Research and Development Center, MuSala Soft, Sofia, Bulgaria; email: haralambi.haralambiev@musala.com",,,,,,,,9781424474868,,,English,EUROCON - Int. Conf. Comput. Tool - Jt. Conftele,Conference Paper,Scopus,,2-s2.0-79960640352,,Bulgaria,musala.com,,,"Haralambiev H., Boychev S., Lilov D., Kraichev K."
"Ampatzoglou, A., Tsintzira, A.A., Arvanitou, E.M., Chatzigeorgiou, A., Stamelos, I., Moga, A., Heb, R., Matei, O., Tsiridis, N., Kehagias, D.",Applying the Single Responsibility Principle in Industry: Modularity Benefits and Trade-offs,2019,PROCEEDINGS OF EASE 2019 - EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING,,,,346,351,6,0,10.1145/3319008.3320125,,"[Ampatzoglou, Apostolos] Univ Macedonia, Dept Appl Informat, Thessaloniki, Greece; Aristotle Univ Thessaloniki, Dept Informat, Thessaloniki, Greece; Holisun, Baia Mare, Romania; Open Technol Serv, Thessaloniki, Greece; Ctr Res & Technol, Informat & Technol Inst, Thessaloniki, Greece",,"Refactoring is a prevalent technique that can be applied for improving software structural quality. Refactorings can be applied at different levels of granularity to resolve 'bad smells' that can be identified in various artifacts (e.g., methods, classes, packages). A fundamental software engineering principle that can be applied at various levels of granularity is the Single Responsibility Principle (SRP), whose violation leads to the creation of lengthy, complex and non-cohesive artifacts; incurring smells like Long Method, God Class, and Large Package. Such artifacts, apart from being large in size tend to implement more than one functionalities, leading to decreased cohesion, and increased coupling. In this paper, we study the effect of applying refactorings that lead to conformance to the SRP, at all three levels of granularity to identify possible differences between them. To study these differences, we performed an industrial case study on two large-scale software systems (more than 1,500 classes). Since SRP is by definition related to modularity, as a success measure for the refactoring we use coupling and cohesion metrics. The results of the study can prove beneficial for both researchers and practitioners, since various implications can be drawn.",Refactorings; industrial case study; modularity; software metrics,METRICS,Refactorings;industrial case study;modularity;software metrics;METRICS,apostolos.ampatzoglou@gmail.com; angeliki.agathi.tsintzira@gmail.com; earvanitoy@gmail.com; achat@uom.gr; stamelos@csd.auth.gr; alexandru.moga@holisun.com; robert.heb@holisun.com; oliviu.matei@holisun.com; ntsiridis@gmail.com; diok@iti.gr,,"1515 BROADWAY, NEW YORK, NY 10036-9998 USA",23rd International Conference on Evaluation and Assessment in Software Engineering (EASE),"IT Univ Copenhagen, Copenhagen, DENMARK","APR 14-17, 2019",ASSOC COMPUTING MACHINERY,,978-1-4503-7145-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000493383400037,2-s2.0-85064746219,Greece;Romania,gmail.com,Univ Macedonia;Dept Informat;Baia Mare;Thessaloniki;Informat & Technol Inst,"Univ Macedonia, Greece;Dept Informat, Greece;Baia Mare, Romania;Thessaloniki, Greece;Informat & Technol Inst, Greece","Ampatzoglou, Apostolos; Tsintzira, Angeliki-Agathi; Arvanitou, Elvira-Maria; Chatzigeorgiou, Alexander; Stamelos, Ioannis; Moga, Alexandru; Heb, Robert; Matei, Oliviu; Tsiridis, Nikolaos; Kehagias, Dionisis"
"Black, A.P., Scharli, N., Ducasse, S.",Applying traits to the smalltalk collection classes,2003,ACM SIGPLAN NOTICES,38,11,,47,64,18,21,10.1145/949343.949311,,"Oregon Hlth Sci Univ, OGI Sch Sci & Engn, Portland, OR 97201 USA; Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland",,"Traits are a programming language technology that promote the reuse of methods between unrelated classes. This paper reports on a refactoring of the Smalltalk collections classes using traits. The original collection classes contained much duplication of code; traits let us remove all of it. We also found places where the protocols of the collections lacked uniformity; traits allowed us to correct these non-uniformities without code duplication. Traits also make it possible to reuse fragments of collection code outside of the existing hierarchy; for example, they make it easy to convert other collection-like things into true collections. Our refactoring reduced the number of methods in the collection classes by approximately 10 per cent. More importantly, understandability maintainability and reusability of the code were significantly improved.",design; languages; reuse; mixins; traits; Smalltalk; collection hierarchy; stream classes; refactoring; inheritance; multiple inheritance,INHERITANCE,design;languages;reuse;mixins;traits;Smalltalk;collection hierarchy;stream classes;refactoring;inheritance;multiple inheritance,black@cse.ogi.edu; schaerli@iam.unibe.ch; ducasse@iam.unibe.ch,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA","18th Annual Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA 2003)","ANAHEIM, CA","OCT 26-30, 2003",ASSOC COMPUTING MACHINERY,0362-1340,,,,English,ACM SIGPLAN NOTICES,Article; Proceedings Paper,WoS,Computer Science,WOS:000187322900006,2-s2.0-1442288538,United States;Switzerland,cse.ogi.edu,OGI Sch Sci & Engn;Software Composit Grp,"OGI Sch Sci & Engn, United States;Software Composit Grp, Switzerland","Black, AP; Scharli, N; Ducasse, S"
"Huang, G.Y., Wang, J.L., Chen, X.J., Wang, H., Ren, J.D.",APPROACH FOR MINING SOFTWARE EVOLUTIONARY COMMUNITY OUTLIERS BASED ON COMMUNITY-MATCHING,2016,INTERNATIONAL JOURNAL OF INNOVATIVE COMPUTING INFORMATION AND CONTROL,12,5,,1665,1677,13,0,,,"[Huang, Guoyan; Wang, Jiale; Chen, Xiaojuan; Wang, Hao; Ren, Jiadong] Yanshan Univ, Coll Informat Sci & Engn, 438 Hebei Ave, Qinhuangdao 066004, Peoples R China; [Huang, Guoyan; Wang, Jiale; Chen, Xiaojuan; Wang, Hao; Ren, Jiadong] Key Lab Comp Virtual Technol & Syst Integrat Hebe, 438 Hebei Ave, Qinhuangdao 066004, Peoples R China",,"Study on detecting a tiny fraction of influential nodes in software evolution is very significant for predicting software updating trends, facilitating software development and version refactoring. We exploit recent advances in mining functions with obvious change to better understand the feature of software evolution. In this paper, detecting software evolutionary community outliers is our main work. Firstly, algorithm Depth-First-Search Weight (DFS-Weight) is proposed to construct the Weighted Function Dependency Network (WFDN). Secondly, we use key-nodes based approach Function Belongingness Matrix Generating (FBM-Gen) to detect the community structure of WFDN, and then find the probability distribution of function nodes in each community. Thirdly, community-matching based algorithm Software Evolutionary Community Outliers Detection (SECO-Detection) is put forward. It generates software evolutionary community outliers which evolve in a different way relative to other community members. Finally, experimental results on both real and synthetic datasets show that the proposed approach is highly effective in discovering interesting evolutionary community outliers.",Complex software network; Software evolution; Community matching; Evolutionary outliers,,Complex software network;Software evolution;Community matching;Evolutionary outliers,gyhuang@ysu.edu.cn; jellywang92@163.com; xjchen1990@foxmail.com; 1324512861@gq.com; jdren@ysu.edu.cn,,"TOKAI UNIV, 9-1-1, TOROKU, KUMAMOTO, 862-8652, JAPAN",,,,ICIC INTERNATIONAL,1349-4198,,,,English,INT J INNOV COMPUT I,Article,WoS,Computer Science,WOS:000406134400019,2-s2.0-84989836629,China,ysu.edu.cn,Yanshan Univ;Key Lab Comp Virtual Technol & Syst Integrat Hebe,"Yanshan Univ, China;Key Lab Comp Virtual Technol & Syst Integrat Hebe, China","Huang, Guoyan; Wang, Jiale; Chen, Xiaojuan; Wang, Hao; Ren, Jiadong"
"Su Y., Xuan-wu Z., Min-qing Z.",Approach on aspect-oriented software reverse engineering at requirements level,2008,"Proceedings - International Conference on Computer Science and Software Engineering, CSSE 2008",2,, 4722062,321,324,,3,10.1109/CSSE.2008.834,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951474393&doi=10.1109%2fCSSE.2008.834&partnerID=40&md5=ed5d4f28abc49a696b011d16d5267b56,"Electronic Technology Dept, Engineering Institute of Armed Police Force, Xi'an, China; Software Engineering Institute, Xidian University, Xi'an, China","Su, Y., Electronic Technology Dept, Engineering Institute of Armed Police Force, Xi'an, China, Software Engineering Institute, Xidian University, Xi'an, China; Xuan-wu, Z., Electronic Technology Dept, Engineering Institute of Armed Police Force, Xi'an, China; Min-qing, Z., Electronic Technology Dept, Engineering Institute of Armed Police Force, Xi'an, China","The framework of aspect-oriented software reverse engineering is proposed for the solution of comprehension and evolution problems of crosscutting properties in legacy system. Based on it, an approach of use-cases driven formal concept analysis is discussed. The goal of this approach is recovering system's crosscutting concerns on requirements level. With the approach, execution profiles of legacy system are analyzed using concept lattices and the invoked computational units that traverse system's use-case models can be identified. Finally, they can be abstracted into early-aspects for re-engineering of the legacy systems with AOSD (Aspect-Oriented Software Development). Compared with existing aspect-mining techniques, which are mainly applied for refactoring legacy system's program source codes, this given approach is more effective when it is used for comprehending and evolving legacy system on higher abstract level. The results of case study show that quite a few crosscutting properties of legacy system can be recovered at requirements level with the introduced domain knowledge. © 2008 IEEE.",Aspect-oriented; crosscutting concerns; early-aspect; requirement; Software reverse engineering,Aspect-oriented; crosscutting concerns; early-aspect; requirement; Software reverse engineering; Abstracting; Computer science; Computer software; Computer systems programming; Management information systems; Object oriented programming; Reverse engineering; Software design; Legacy systems,Aspect-oriented;crosscutting concerns;early-aspect;requirement;Software reverse engineering;Abstracting;Computer science;Computer software;Computer systems programming;Management information systems;Object oriented programming;Reverse engineering;Software design;Legacy systems,"Su, Y.; Electronic Technology Dept, Engineering Institute of Armed Police Force, Xi'an, China; email: suyang75@Gmail.com",,,,,,,,9780769533360,,,English,"Proc. - Int. Conf. Comput. Sci. Softw. Eng., CSSE",Conference Paper,Scopus,,2-s2.0-79951474393,,China,Gmail.com,,,"Su Y., Xuan-wu Z., Min-qing Z."
"Su Y., Yang X., Zhang P., Pan X.",Approach on recovering crosscutting concerns at requirements level from software legacy system,2009,Journal of Computational Information Systems,5,1,,93,101,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-65649154738&partnerID=40&md5=9e3a099f92bae01d9905f0e78f14de7a,"Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China; Software Engineering Institute, Xidian University, Xi'an 710071, China","Su, Y., Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China, Software Engineering Institute, Xidian University, Xi'an 710071, China; Yang, X., Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China; Zhang, P., Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China; Pan, X., Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China","The framework of aspect-oriented software reverse engineering is proposed for the solution of comprehension and evolution problems of crosscutting properties in legacy system. Based on it, an approach of use-cases driven formal concept analysis is discussed. The goal of this approach is recovering system's crosscutting concerns on requirements level. With the approach, execution profiles of legacy system are analyzed using concept lattices and the invoked computational units that traverse system's use-case models can be identified. Finally, they can be abstracted into early-aspects for re-engineering of the legacy systems with AOSD (Aspect-Oriented Software Development). Compared with existing aspect-mining techniques, which are mainly applied for refactoring legacy system's program source codes, this given approach is more effective when it is used for comprehending and evolving legacy system on higher abstract level. The results of case study show that quite a few crosscutting properties of legacy system can be recovered at requirements level with the introduced domain knowledge. Copyright © 2009 Binary Information Press.",Aspect-oriented; Crosscutting concerns; Early-aspect; Formal concept analysis; Legacy system; Requirement; Software reverse engineering,Aspect-oriented; Crosscutting concerns; Early-aspect; Formal concept analysis; Requirement; Software reverse engineering; Abstracting; Computer software; Computer systems programming; Management information systems; Mining; Object oriented programming; Reengineering; Reverse engineering; Legacy systems,Aspect-oriented;Crosscutting concerns;Early-aspect;Formal concept analysis;Legacy system;Requirement;Software reverse engineering;Abstracting;Computer software;Computer systems programming;Management information systems;Mining;Object oriented programming;Reengineering;Reverse engineering;Legacy systems,"Su, Y.; Electronic Technology Dept., Engineering College of Armed Police Force, Xi'an 710086, China",,,,,,,15539105,,,,English,J. Comput. Inf. Syst.,Article,Scopus,,2-s2.0-65649154738,,China,No email,,,"Su Y., Yang X., Zhang P., Pan X."
"Feng T., Zhang J.C., Wang H.Y., Jin C.Z.",Approach to automated software design improvement,2006,Ruan Jian Xue Bao/Journal of Software,17,4,,703,712,,1,10.1360/jos170703,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33745133059&doi=10.1360%2fjos170703&partnerID=40&md5=0914e3b3473a90502731a6cab0e47c2c,"Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China","Feng, T., Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China; Zhang, J.-C., Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China; Wang, H.-Y., Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China; Jin, C.-Z., Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China","Object-Oriented software design improving technology is an effective means to increase system flexibility for adapting to future requirement variation and expansion. In this paper, a software design improving approach, based on micro-architecture anti-pattern and case based reasoning, is presented to improve software quality and maintainability. In this approach, problematic, inflexible structures and corresponding refactoring alternatives at micro-architecture level are formally defined and described as cases. Their organization and index mechanism in the case base are studied. Following the 4R procedures of CBR, similarity measurement methods on class diagrams, sequence diagrams, OO quality metric factors, and semantic constraints are discussed. Based on the measurement results, some algorithms on identifying anti-patterns instances in a given original design and replacing them by designs with high quality are presented. Furthermore, a supporting system CBDIT is developed to aid this approach.",Anti-pattern; Case based reasoning; Design pattern; Refactoring; Software evolution,Architecture; Expansion; Maintainability; Semantics; XML; Anti pattern; Automated software design; Case based reasoning (CBR); CBR based design improving tool (CBDIT); Class diagrams; Design pattern; Index mechanism; Micro architecture; Object oriented software design; Quality metric factors; Refactoring; Semantic constraints; Sequence diagrams; Software evolution; Software engineering,Anti-pattern;Case based reasoning;Design pattern;Refactoring;Software evolution;Architecture;Expansion;Maintainability;Semantics;XML;Anti pattern;Automated software design;Case based reasoning (CBR);CBR based design improving tool (CBDIT);Class diagrams;Index mechanism;Micro architecture;Object oriented software design;Quality metric factors;Semantic constraints;Sequence diagrams;Software engineering,"Feng, T.; Key Laboratory Symbolic Computation and Knowledge Engineering, College of Computer Science and Technology, Jilin University, Changchun 130012, China; email: fengtie@jlu.edu.cn",,,,,,,10009825,,RUXUE,,Chinese,Ruan Jian Xue Bao,Article,Scopus,,2-s2.0-33745133059,,China,jlu.edu.cn,,,"Feng T., Zhang J.-C., Wang H.-Y., Jin C.-Z."
"Zhang, B., Huang, G.Y., Zheng, Z.Q., Ren, J.D., Hu, C.Z.",Approach to Mine the Modularity of Software Network Based on he Most Vital Nodes,2018,IEEE ACCESS,6,,,32543,32553,11,0,10.1109/ACCESS.2018.2840838,,"[Zhang, Bing; Huang, Guoyan; Zheng, Zhangqi; Ren, Jiadong] Yanshan Univ, Sch Informat Sci & Engn, Qinhuangdao 066004, Peoples R China; [Hu, Changzhen] Beijing Inst Technol, Beijing Key Lab Software Secur Engn Tech, Beijing 100081, Peoples R China",,"Analysis on the modularity of software network plays a critical role in the detection of software vulnerabilities and in the improvement of software stability, reliability, and robustness. This paper intends to propose a method based on the most vital nodes to analyze the modularity of software of different versions. To this end, it first tracked software dynamic execution traces to build a dynamic software network model, and then it mapped these traces to a complex network of a dynamic invoke software network. Second, it identified the most vital nodes in two steps, namely the callnitial Weight For Node and calFinal Weight For Node in order to compute the initial weights and the final weights of nodes iteratively. Third, it mined top-k nodes as the original communities to create a framework for detecting new community, and expanded these nodes to the community by the algorithm expand The Community and evaluated the results with criterion Q. Finally, it calculated the modularity of software of different versions. Experimental results show that the most vital nodes are reasonable to be taken in comparison with other ranking measures, and that the analysis approach to the modularity of software network is effective in evaluating software community structure, and can help assist the developer to refactor the software and improve the software quality.",Software network; vital nodes; power-law; modularity,COMPLEX NETWORKS; INFLUENTIAL SPREADERS; CENTRALITY; ALGORITHM; RANKING,Software network;vital nodes;power-law;modularity;COMPLEX NETWORKS;INFLUENTIAL SPREADERS;CENTRALITY;ALGORITHM;RANKING,hgy@ysu.edu.cn,,"445 HOES LANE, PISCATAWAY, NJ 08855-4141 USA",,,,IEEE-INST ELECTRICAL ELECTRONICS ENGINEERS INC,2169-3536,,,,English,IEEE ACCESS,Article,WoS,Computer Science; Engineering; Telecommunications,WOS:000437866800001,,China,ysu.edu.cn,Yanshan Univ;Beijing Inst Technol,"Yanshan Univ, China;Beijing Inst Technol, China","Zhang, Bing; Huang, Guoyan; Zheng, Zhangqi; Ren, Jiadong; Hu, Changzhen"
"Franky M.C., Pavlich-Mariscal J.A., Acero M.C., Zambrano A., Olarte J.C., Camargo J., Pinzon N.",A practical experience of implementing a model driven environment in a software development organization,2016,International Journal of Web Information Systems,12,4,,533,556,,2,10.1108/IJWIS-04-2016-0025,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84994230374&doi=10.1108%2fIJWIS-04-2016-0025&partnerID=40&md5=31a0c69ba07b0acf0c2be5956eb23ba5,"Dpto. de Ingeniería de Sistemas, Pontificia Universidad Javeriana, Bogota, Colombia; Heinsohn Business Technology, Bogota, Colombia; Pontificia Universidad Javeriana, Bogota, Colombia","Franky, M.C., Dpto. de Ingeniería de Sistemas, Pontificia Universidad Javeriana, Bogota, Colombia; Pavlich-Mariscal, J.A., Dpto. de Ingeniería de Sistemas, Pontificia Universidad Javeriana, Bogota, Colombia; Acero, M.C., Heinsohn Business Technology, Bogota, Colombia; Zambrano, A., Heinsohn Business Technology, Bogota, Colombia; Olarte, J.C., Pontificia Universidad Javeriana, Bogota, Colombia; Camargo, J., Heinsohn Business Technology, Bogota, Colombia; Pinzón, N., Heinsohn Business Technology, Bogota, Colombia","Purpose - This purpose of this paper is to present ISML-MDE, a model-driven environment that includes ISML, a platform-independent modeling language for enterprise applications; ISML-GEN, a code generation framework to automatically generate code from models; and LionWizard, a tool to automatically integrate different components into a unified codebase. Design/methodology/approach - The development comprises five stages: standardizing architecture; refactoring and adapting existing components; automating their integration; developing a modeling language; and creating code generators. After development, model-to-code ratios in ISML-MDE are measured for different applications. Findings - The average model-to-code ratio is approximately 1:4.6 when using the code generators from arbitrary models. If a model transformation is performed previously to the code generation, this ratio raises to 1:115. The current validation efforts show that ISML properly supports several DSL essential characteristics described by Kahraman and Bilgen (2015). Research limitations/implications - ISML-MDE was tested on relatively small applications. Further validation of the approach requires measurement of development times and their comparison with previous similar projects, to determine the gains in productivity. Originality/value - The value of ISML-MDE can be summarized as follows: ISML-MDE has the potential to significantly reduce development times, because of an adequate use of models and transformations. The design of ISML-MDE addresses real-world development requirements, obtained from a tight interaction between the researchers and the software development company. The underlying process has been thoroughly documented and it is believed it can be used as a reference for future developments of MDE tools under similar conditions. © Emerald Group Publishing Limited.",Code generation; Enterprise applications; Legacy components integration; Model-driven engineering; Xtext,Codes (symbols); Modeling languages; Software engineering; Unified Modeling Language; Code Generation; Enterprise applications; Legacy component; Model-driven Engineering; Xtext; Software design,Code generation;Enterprise applications;Legacy components integration;Model-driven engineering;Xtext;Codes (symbols);Modeling languages;Software engineering;Unified Modeling Language;Legacy component;Software design,"Franky, M.C.; Dpto. de Ingeniería de Sistemas, Pontificia Universidad JaverianaColombia; email: lfranky@javeriana.edu.co",,,,,,Emerald Group Publishing Ltd.,17440084,,,,English,Int. J. Web Inf. Syst.,Article,Scopus,,2-s2.0-84994230374,,Colombia,javeriana.edu.co,,,"Franky M.C., Pavlich-Mariscal J.A., Acero M.C., Zambrano A., Olarte J.C., Camargo J., Pinzon N."
"Melo C.S., Lima da Cruz M.M., Forte Martins A.D., Matos T., Monteiro Filho J.M.D.S., De Castro Machado J.",A practical guide to support change-proneness prediction,2019,ICEIS 2019 - Proceedings of the 21st International Conference on Enterprise Information Systems,2,,,269,276,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85067471541&partnerID=40&md5=809a819cbe3a364c6c7a6b1cb8550985,"Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil","Melo, C.S., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil; Lima da Cruz, M.M., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil; Forte Martins, A.D., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil; Matos, T., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil; Monteiro Filho, J.M.D.S., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil; De Castro Machado, J., Department of Computing, Federal University of Ceará, Fortaleza-Ceará, Brazil","During the development and maintenance of a system of software, changes can occur due to new features, bug fix, code refactoring or technological advancements. In this context, software change prediction can be very useful in guiding the maintenance team to identify change-prone classes in early phases of software development to improve their quality and make them more flexible for future changes. A myriad of related works use machine learning techniques to lead with this problem based on different kinds of metrics. However, inadequate description of data source or modeling process makes research results reported in many works hard to interpret or reproduce. In this paper, we firstly propose a practical guideline to support change-proneness prediction for optimal use of predictive models. Then, we apply the proposed guideline over a case study using a large imbalanced data set extracted from a wide commercial software. Moreover, we analyze some papers which deal with change-proneness prediction and discuss them about missing points. Copyright © 2019 by SCITEPRESS – Science and Technology Publications, Lda. All rights reserved.",Change-proneness Prediction; Practical Guide; Software Metrics,Computer software maintenance; Forecasting; Information systems; Information use; Learning systems; Change proneness; Imbalanced Data-sets; Machine learning techniques; Practical guide; Practical guidelines; Software change prediction; Software metrics; Technological advancement; Software design,Change-proneness Prediction;Practical Guide;Software Metrics;Computer software maintenance;Forecasting;Information systems;Information use;Learning systems;Change proneness;Imbalanced Data-sets;Machine learning techniques;Practical guidelines;Software change prediction;Technological advancement;Software design,,Filipe J.Hammoudi S.Smialek M.Brodsky A.,,,,,SciTePress,,9789897583728,,,English,ICEIS - Proc. Int. Conf. Enterp. Inf. Syst.,Conference Paper,Scopus,,2-s2.0-85067471541,,Brazil,No email,,,"Melo C.S., Lima da Cruz M.M., Forte Martins A.D., Matos T., Monteiro Filho J.M.D.S., De Castro Machado J."
"Huang H., Zhang S., Cao J., Duan Y.",A practical pattern recovery approach based on both structural and behavioral analysis,2005,Journal of Systems and Software,75,1-2,,69,87,,25,10.1016/j.jss.2003.11.018,https://www.scopus.com/inward/record.uri?eid=2-s2.0-9644281599&doi=10.1016%2fj.jss.2003.11.018&partnerID=40&md5=5b23116559fe40f51fd2a2eb237df799,"CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China","Huang, H., CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China; Zhang, S., CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China; Cao, J., CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China; Duan, Y., CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China","While the merit of using design patterns is clear for forward engineering, we could also benefit from design pattern recovery in program understanding and reverse engineering. In this paper, we present a practical approach to enlarge the recoverable scope and improve precision ratio of pattern recovery. To specify both structural aspect and behavioral aspect of design patterns, we introduce traditional predicate logic combined with Allen's interval-based temporal logic as our theory foundation. The formal specifications could be conveniently converted into Prolog representations to support pattern recovery. To illustrate how to specify and recover design patterns in our approach, we take one example for each category of design patterns. Moreover, we give a taxonomy of design patterns based on the analysis in our approach to show its applicable scope. To validate our approach, we have developed a tool named PRAssistor and analyzed two well-known open source frameworks. The experiment results show that most of the patterns addressed in our taxonomy have been recovered. Besides larger recoverable scope, the recovery precision of our approach is much higher than others. Furthermore, we consider that our approach and tool could be promisingly extended to support ""Debug at Design Level"" and ""Pattern-Driven Refactoring"". © 2003 Published by Elsevier Inc.",Design pattern; Pattern recovery; Reverse engineering,Computer aided software engineering; Decision making; Information analysis; Knowledge acquisition; Precision engineering; Problem solving; Design decisions; Design pattern; Forward engineering; Pattern recovery; Reverse engineering,Design pattern;Pattern recovery;Reverse engineering;Computer aided software engineering;Decision making;Information analysis;Knowledge acquisition;Precision engineering;Problem solving;Design decisions;Forward engineering,"Huang, H.; CIT Laboratory, Dept. of Comp. Sci. and Engineering, Shanghai Jiao Tong University, Huashan Road 1954, Shanghai 200030, China; email: heyuanhuang@yahoo.com.cn",,,,,,,01641212,,JSSOD,,English,J Syst Software,Article,Scopus,,2-s2.0-9644281599,,China,yahoo.com.cn,,,"Huang H., Zhang S., Cao J., Duan Y."
"Widemann, B.T., Lepper, M.",A Practical Study of Control in Objected-Oriented-Functional-Logic Programming with Paisley,2017,ELECTRONIC PROCEEDINGS IN THEORETICAL COMPUTER SCIENCE,,234,,150,164,15,0,10.4204/EPTCS.234.11,,"[Trancon y Widemann, Baltasar] Ilmenau Univ Technol, Ilmenau, Germany; [Lepper, Markus] Semant GmbH, Aachen, Germany",,"Paisley is an extensible lightweight embedded domain-specific language for nondeterministic pattern matching in Java. Using simple APIs and programming idioms, it brings the power of functional-logic processing of arbitrary data objects to the Java platform, without constraining the underlying object-oriented semantics. Here we present an extension to the Paisley framework that adds pattern-based control flow. It exploits recent additions to the Java language, namely functional interfaces and lambda expressions, for an explicit and transparent continuation-passing style approach to control. We evaluate the practical impact of the novel features on a real-world case study that reengineers a third-party open-source project to use Paisley in place of conventional object-oriented data query idioms. We find the approach viable for incremental refactoring of legacy code, with significant qualitative improvements regarding separation of concerns, clarity and intentionality, thus making for easier code understanding, testing and debugging.",pattern matching; control flow; embedded domain-specific language; object orientation; refactoring,,pattern matching;control flow;embedded domain-specific language;object orientation;refactoring,baltasar.trancon@tu-ilmenau.de,,"OPEN PUBL ASSOC, SYDNEY, 00000, AUSTRALIA",,,,OPEN PUBL ASSOC,2075-2180,,,,English,ELECTRON P THEOR COM,Article,WoS,Computer Science,WOS:000396732100013,2-s2.0-85018842638,Germany,tu-ilmenau.de,Ilmenau Univ Technol;Semant GmbH,"Ilmenau Univ Technol, Germany;Semant GmbH, Germany","Trancon y Widemann, Baltasar; Lepper, Markus"
"Dig, D.",A Practical Tutorial on Refactoring for Parallelism,2010,2010 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,,,2,1,,,"Univ Illinois, Dept Comp Sci, Urbana, IL 61801 USA",,"For several decades, programmers have relied on Moore's Law to improve the performance of their software applications. From now on, programmers need to program the multicores if they want to deliver efficient code. In the multicore era, a major maintenance task will be to make sequential programs more parallel. What are the most common transformations to retrofit parallelism into sequential programs? This tutorial equips today's programmers to be ready for tomorrow's task. It presents the process for parallelizing sequential applications and presents several refactorings for (i) making programs thread-safe, (ii) threading sequential applications, and (iii) improving scalability of parallel programs. The tutorial also presents the state of the practice libraries for parallelism in the desktop computing, and helps programmers understand the trade-offs between programmability, scalability, and portability of parallel programs. Participants get hands-on experience on parallelizing realistic applications, and get a preview of the state of the art refactoring tools for parallelism.",,,,dig@illinois.edu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Software Maintenance,"Timisoara, ROMANIA","SEP 12-18, 2010",IEEE,1063-6773,978-1-4244-8629-8,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000287356400059,2-s2.0-78650114700,United States,illinois.edu,Dept Comp Sci,"Dept Comp Sci, United States","Dig, Danny"
"Al Dallal, J., Briand, L.C.",A Precise Method-Method Interaction-Based Cohesion Metric for Object-Oriented Classes,2012,ACM TRANSACTIONS ON SOFTWARE ENGINEERING AND METHODOLOGY,21,2,8,,,34,42,10.1145/2089116.2089118,,"[Al Dallal, Jehad] Kuwait Univ, Dept Informat Sci, Safat 13060, Kuwait; [Briand, Lionel C.] Univ Oslo, N-0316 Oslo, Norway",,"The building of highly cohesive classes is an important objective in object-oriented design. Class cohesion refers to the relatedness of the class members, and it indicates one important aspect of the class design quality. A meaningful class cohesion metric helps object-oriented software developers detect class design weaknesses and refactor classes accordingly. Several class cohesion metrics have been proposed in the literature. Most of these metrics are applicable based on low-level design information such as attribute references in methods. Some of these metrics capture class cohesion by counting the number of method pairs that share common attributes. A few metrics measure cohesion more precisely by considering the degree of interaction, through attribute references, between each pair of methods. However, the formulas applied by these metrics to measure the degree of interaction cause the metrics to violate important mathematical properties, thus undermining their construct validity and leading to misleading cohesion measurement. In this paper, we propose a formula that precisely measures the degree of interaction between each pair of methods, and we use it as a basis to introduce a low-level design class cohesion metric (LSCC). We verify that the proposed formula does not cause the metric to violate important mathematical properties. In addition, we provide a mechanism to use this metric as a useful indicator for refactoring weakly cohesive classes, thus showing its usefulness in improving class cohesion. Finally, we empirically validate LSCC. Using four open source software systems and eleven cohesion metrics, we investigate the relationship between LSCC, other cohesion metrics, and fault occurrences in classes. Our results show that LSCC is one of three metrics that explains more accurately the presence of faults in classes. LSCC is the only one among the three metrics to comply with important mathematical properties, and statistical analysis shows it captures a measurement dimension of its own. This suggests that LSCC is a better alternative, when taking into account both theoretical and empirical results, as a measure to guide the refactoring of classes. From a more general standpoint, the results suggest that class quality, as measured in terms of fault occurrences, can be more accurately explained by cohesion metrics that account for the degree of interaction between each pair of methods.",Measurement; Object-oriented software quality; class cohesion; low-level design; method; attribute; refactoring; method-method interaction,OPEN SOURCE SOFTWARE; HIGH-LEVEL DESIGN; EMPIRICAL VALIDATION; CONCEPTUAL COHESION; FUNCTIONAL COHESION; FAULT PREDICTION; QUALITY; SYSTEMS; SUITE,Measurement;Object-oriented software quality;class cohesion;low-level design;method;attribute;refactoring;method-method interaction;OPEN SOURCE SOFTWARE;HIGH-LEVEL DESIGN;EMPIRICAL VALIDATION;CONCEPTUAL COHESION;FUNCTIONAL COHESION;FAULT PREDICTION;QUALITY;SYSTEMS;SUITE,j.aldallal@ku.edu.kw; lionel.briand@uni.lu,,"2 PENN PLAZA, STE 701, NEW YORK, NY 10121-0701 USA",,,,ASSOC COMPUTING MACHINERY,1049-331X,,,,English,ACM T SOFTW ENG METH,Article,WoS,Computer Science,WOS:000301976000002,2-s2.0-84859402061,Kuwait;Norway,ku.edu.kw,Kuwait Univ;Univ Oslo,"Kuwait Univ, Kuwait;Univ Oslo, Norway","Al Dallal, Jehad; Briand, Lionel C."
"Zhang D., Li B., Li Z., Liang P.",A preliminary investigation of self-Admitted refactorings in open source software,2018,"Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",2018-July,,,165,168,,1,10.18293/SEKE2018-081,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056883561&doi=10.18293%2fSEKE2018-081&partnerID=40&md5=58e6161dc9a55d903b889ce41da3d294,"School of Computer Science, Wuhan University, Wuhan, China","Zhang, D., School of Computer Science, Wuhan University, Wuhan, China; Li, B., School of Computer Science, Wuhan University, Wuhan, China; Li, Z., School of Computer Science, Wuhan University, Wuhan, China; Liang, P., School of Computer Science, Wuhan University, Wuhan, China","In software development, developers commit code changes to the version control system. In a commit message, the committer may explicitly claim that the commit is a refactoring with the intention of code quality improvement. We defined such a commit as a self-Admitted refactoring (SAR). Currently, there is little knowledge about the SAR phenomenon, and the impact of SARs on software projects is not clear. In this work, we performed a preliminary investigation on SARs with an emphasis on their impact on code quality using the assessment of code smells. We used two non-Trivial open source software projects as cases and employed the PMD tool to detect code smells. The study results shows that: (1) SARs tend to improve code quality, though a small proportion of SARs introduced new code smells; and (2) projects that contain SARs have different results on frequently affected code smells. © 2018 Universitat zu Koln. All rights reserved.",Case study; Code quality; Code smell; Self-Admitted refactoring,Codes (symbols); Knowledge engineering; Odors; Open source software; Software design; Code changes; Code quality; Code smell; Non-trivial; Open source software projects; Refactorings; Software project; Version control system; Open systems,Case study;Code quality;Code smell;Self-Admitted refactoring;Codes (symbols);Knowledge engineering;Odors;Open source software;Software design;Code changes;Non-trivial;Open source software projects;Refactorings;Software project;Version control system;Open systems,"Li, Z.; School of Computer Science, Wuhan UniversityChina; email: zengyangli@whu.edu.cn",,,,,,Knowledge Systems Institute Graduate School,23259000,1891706446,,,English,"Proc. Int. Conf. Softw. Eng. Knowl. Eng., SEKE",Conference Paper,Scopus,,2-s2.0-85056883561,,China,whu.edu.cn,,,"Zhang D., Li B., Li Z., Liang P."
Peruma A.,A preliminary study of android refactorings,2019,"Proceedings - 2019 IEEE/ACM 6th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2019",,, 8816971,148,149,,0,10.1109/MOBILESoft.2019.00030,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85072532102&doi=10.1109%2fMOBILESoft.2019.00030&partnerID=40&md5=fd6fc5a22906c3cfe3d7cefc4f1ba806,"Rochester Institute of Technology, Rochester, NY, United States","Peruma, A., Rochester Institute of Technology, Rochester, NY, United States","Throughout the lifetime of a software system, developers continuously refactor the source code as a means of improving the quality of the code. Android apps, like traditional software systems, are not exempt from such refactoring activities. We conducted an empirical study to show the common refactoring operations in Android apps and discussed how they differ from traditional Java systems. Additionally, by contextualizing refactorings with commit messages, we identified the motivations for developers to perform these refactoring operations. © 2019 IEEE.",Software Maintenance; Software Refactoring,Computer software maintenance; Engineering; Industrial engineering; Android apps; Empirical studies; Java system; Refactorings; Software refactoring; Software systems; Source codes; Android (operating system),Software Maintenance;Software Refactoring;Computer software maintenance;Engineering;Industrial engineering;Android apps;Empirical studies;Java system;Refactorings;Software systems;Source codes;Android (operating system),"Peruma, A.; Rochester Institute of TechnologyUnited States; email: axp6201@rit.edu",,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781728133959,,,English,"Proc. - IEEE/ACM Int. Conf. Mob. Softw. Eng. Syst., MOBILESoft",Conference Paper,Scopus,,2-s2.0-85072532102,,United States,rit.edu,,,Peruma A.
Hanakawa N.,A process refactoring for software development with process complexity and activity priority lists,2011,"Proceedings - Joint Conference of the 21st International Workshop on Software Measurement, IWSM 2011 and the 6th International Conference on Software Process and Product Measurement, MENSURA 2011",,, 6113061,209,214,,2,10.1109/IWSM-MENSURA.2011.19,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84856204586&doi=10.1109%2fIWSM-MENSURA.2011.19&partnerID=40&md5=97cb7d59df9a765b19303186e07816c4,"Hannan University Information Management, 5-4-33 Amami Higasi, Matsubara, Osaka, Japan","Hanakawa, N., Hannan University Information Management, 5-4-33 Amami Higasi, Matsubara, Osaka, Japan","We propose a process refactoring technique and we show experience reports. The process refactoring is based on process complexity and activity priority lists. Values of process complexity are calculated by additional processes. The priority list presents priority levels of all activities that do not finish. In an industrial large-scale project, the process refactoring was executed. The period of the project was 2 years and 6 months. Four times process refactoring were executed. As a result, customers' satisfactions were high although several customers' requests were not realized. In addition, vendor's satisfactions also were high. The vendor felt glad that resources about all activities were sufficiently prepared by the process refactoring. In addition, we confirmed that process refactoring was useful to narrow all customers' requests down into actual indispensable requests. © 2011 IEEE.",Process refactoring; Requirement acquisition; Software process complexit; Workflow management table,Customers' satisfaction; Experience report; Large-scale projects; Priority levels; Priority list; Process complexity; Refactorings; Requirement acquisition; Software process; Workflow managements; Customer satisfaction; Sales; Work simplification; Software design,Process refactoring;Requirement acquisition;Software process complexit;Workflow management table;Customers' satisfaction;Experience report;Large-scale projects;Priority levels;Priority list;Process complexity;Refactorings;Software process;Workflow managements;Customer satisfaction;Sales;Work simplification;Software design,"Hanakawa, N.; Hannan University Information Management, 5-4-33 Amami Higasi, Matsubara, Osaka, Japan; email: hanakawa@hannan-u.ac.jp",,,,,,,,9780769544977,,,English,"Proc. - Jt. Conf. Int. Workshop Softw. Meas., IWSM Int. Conf. Softw. Process Prod. Meas., MENSURA",Conference Paper,Scopus,,2-s2.0-84856204586,,Japan,hannan-u.ac.jp,,,Hanakawa N.
"Czibula, I.G., Serban, G.",A programming interface for determining refactorings of object-oriented software systems using clustering,2007,"ICCP 2007: IEEE 3RD INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTER COMMUNICATION AND PROCESSING, PROCEEDINGS",,,,271,+,2,0,,,"[Czibula, Istvan-Gergely; Serban, Gabriela] Univ Babes Bolyai, Dept Comp Sci, 1 M Kogalniceanu St, R-3400 Cluj Napoca, Romania",,"Improving the quality of the software systems design is the most important issue during the evolution of object oriented software systems. Refactoring ([4]) is a process that helps to maintain the internal software quality, during the whole software lifecycle. A clustering approach for improving software systems design is introduced in [2]. For the same purpose, some clustering algorithms (kRED in [2], PAMRED in [8], HAC in [3]) that identify the appropriate refactorings for object-oriented software systems were developed. Based on these approaches, in this paper we aim at presenting a programming interface for determining refactorings of object-oriented software systems using clustering, RDI (Refactorings Determination Interface). Using this interface, we can simply develop applications for determining refactorings of object-oriented software systems using clustering. An experiment using the designed interface is also presented.",,,,istvanc@cs.ubbcluj.ro; gabis@cs.ubbcluj.ro,"Letia, IA","345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE 3rd International Conference on Intelligent Computer Communication and Processing,"Cluj Napoca, ROMANIA","SEP 06-08, 2007",IEEE,2065-9946,978-1-4244-1491-8,,,English,INT C INTELL COMP CO,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000250749800041,2-s2.0-47749137380,Romania,cs.ubbcluj.ro,Univ Babes Bolyai,"Univ Babes Bolyai, Romania","Czibula, Istvan-Gergely; Serban, Gabriela"
"Chen, F., Yang, H.J., Chu, W.C.C., Xu, B.W.",A Program Transformation Framework for Multicore Software Reengineering,2012,2012 12TH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE (QSIC),,,,270,275,6,2,10.1109/QSIC.2012.46,,"[Chen, Feng; Yang, Hongji] De Montfort Univ, Software Technol Res Lab, Leicester LE1 9BH, Leics, England; [Chu, William Cheng-Chung] Tunghai Univ, Dept Comput Sci, Tunghai, Taiwan; [Xu, Baowen] Nanjing Univ, Dept Comput Sci, Nanjing, Jiangsu, Peoples R China",,"Multicore processors are becoming ubiquitous in embedded systems. To take advantage of multicore processor, a great number of previously designed embedded applications need reengineering processes before they are ported to run accurately and efficiently. Massive refactoring of sequential programs to multi-thread programs is required. Parallelisation refactoring is generally implemented by programmers. As multicore processors become more and more complex, the potential human error in the refactoring process increased dramatically. To provide the necessary assurance of correctness, a program transformation framework to validate the parallelised programs is proposed, which is a formal approach to transforming the multi-thread program while validating if the functional behaviour of the existing sequential program is preserved.",program transformation; multicore software; Wide Spectrum Language (WSL); Software Reengineering,PARALLELIZATION,program transformation;multicore software;Wide Spectrum Language (WSL);Software Reengineering;PARALLELIZATION,fengchen@dmu.ac.uk; hyang@dmu.ac.uk; cchu@thu.edu.tw; bwxu@nju.edu.cn,"Tang, A; Muccini, H","10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",12th International Conference on Quality Software (QSIC),"Xian, PEOPLES R CHINA","AUG 27-29, 2012",IEEE COMPUTER SOC,1550-6002,978-0-7695-4833-3,,,English,INT CONF QUAL SOFTW,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000309942600041,,United Kingdom;Taiwan;China,dmu.ac.uk,De Montfort Univ;Tunghai Univ;Nanjing Univ,"De Montfort Univ, United Kingdom;Tunghai Univ, Taiwan;Nanjing Univ, China","Chen, Feng; Yang, Hongji; Chu, William Cheng-Chung; Xu, Baowen"
"Dovland, J., Johnsen, E.B., Owe, O., Yu, I.C.",A proof system for adaptable class hierarchies,2015,JOURNAL OF LOGICAL AND ALGEBRAIC METHODS IN PROGRAMMING,84,1,,37,53,17,1,10.1016/j.jlamp.2014.09.001,,"[Dovland, Johan; Johnsen, Einar Broch; Owe, Olaf; Yu, Ingrid Chieh] Univ Oslo, Dept Informat, N-0316 Oslo, Norway",,"The code base of a software system undergoes changes during its life time. For object-oriented languages, classes are adapted, e.g., to meet new requirements, customize the software to specific user functionalities, or refactor the code to reduce its complexity. However, the adaptation of class hierarchies makes reasoning about program behavior challenging; even classes in the middle of a class hierarchy can be modified. This paper develops a proof system for analyzing the effect of operations to adapt classes, in the context of method overriding and late bound method calls. The proof system is incremental in the sense that reverification is avoided for methods that are not explicitly changed by adaptations. Furthermore, the possible adaptations are not unduly restricted; i.e., flexibility is retained without compromising on reasoning control. To achieve this balance, we extend the mechanism of lazy behavioral subtyping, originally proposed for reasoning about inheritance when subclasses are added to a class hierarchy, to deal with the more general situation of adaptable class hierarchies and changing specifications. The reasoning system distinguishes guaranteed method behavior from requirements toward methods, and achieves incremental reasoning by tracking guarantees and requirements in adaptable class hierarchies. We show soundness of the proposed proof system. (C) 2014 Elsevier Inc. All rights reserved.",Software evolution; Object orientation; Verification; Proof systems; Class updates; Dynamic code modification,MODEL; VERIFICATION; CALCULUS,Software evolution;Object orientation;Verification;Proof systems;Class updates;Dynamic code modification;MODEL;CALCULUS,johand@ifi.uio.no; einarj@ifi.uio.no; olaf@ifi.uio.no; ingridcy@ifi.uio.no,,"STE 800, 230 PARK AVE, NEW YORK, NY 10169 USA",,,,ELSEVIER SCIENCE INC,2352-2208,,,,English,J LOG ALGEBR METHODS,Article,WoS,Computer Science; Science & Technology - Other Topics,WOS:000347601600004,,Norway,ifi.uio.no,Univ Oslo,"Univ Oslo, Norway","Dovland, Johan; Johnsen, Einar Broch; Owe, Olaf; Yu, Ingrid Chieh"
"Priya, A.R., Mythily, M.",A Qualitative Analysis on the Specification Mining Techniques,2013,"2013 IEEE INTERNATIONAL CONFERENCE ON EMERGING TRENDS IN COMPUTING, COMMUNICATION AND NANOTECHNOLOGY (ICE-CCN'13)",,,,199,202,4,0,,,"[Priya, Annie Ratna; Mythily, M.] Karunya Univ, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India",,"Formal Specifications plays a vital role in several dimensions of software engineering such as testing, optimizing, refactoring, documenting, debugging and repair. Formal Specifications are generally descriptions for legal program behavior. In Conventional approaches, specifications are constructed manually and later automatic mining techniques emerges with mining rules focusing on temporal logic and language specifications. Addition of metrics in mining leads to improvement in performance and thereby providing a step towards the support for real world applications. This paper focuses on giving a detailed overview of specification mining techniques, thereby stating the need for specifications utility in industrial perspective. This paper also serves as a guide to gain additional knowledge and the impact of metrics over specification miners.",Metrics; Mining; Specification; Temporal property,,Metrics;Mining;Specification;Temporal property,,,"345 E 47TH ST, NEW YORK, NY 10017 USA","IEEE International Conference on Emerging Trends in Computing, Communication and Nanotechnology (ICECCN)","Infant Jesus Coll Engn & Technol, Dept Elect & Commun Engn, Tirunelveli, INDIA","MAR 25-26, 2013",IEEE,2373-6739,978-1-4673-5037-2; 978-1-4673-5036-5; 978-1-4673-5035-8,,,English,INT C TREND COMPUT C,Proceedings Paper,WoS,Computer Science; Science & Technology - Other Topics; Telecommunications,WOS:000394378100037,2-s2.0-84881070211,India,No email,Karunya Univ,"Karunya Univ, India","Priya, Annie Ratna; Mythily, M."
"Kulkarni, C.",A Qualitative Approach for Refactoring of Code Clone Opportunities Using Graph and Tree methods,2016,2016 INTERNATIONAL CONFERENCE ON INFORMATION TECHNOLOGY (INCITE) - NEXT GENERATION IT SUMMIT ON THE THEME - INTERNET OF THINGS: CONNECT YOUR WORLDS,,,,,,6,0,,,"[Kulkarni, Chaitanya] Shri Jagdishprasad Jhabarmal Tibrewala Univ, Dept Comp Sci, Churela, Rajasthan, India",,"Reusing of code has been a very common practice in software development. This practice has been implemented to reduce programming time and efforts greatly. This copying and pasting behavior of programmers leads to cloning of codes and therefore has a very serious impact on the maintenance of the software systems. Many clone detection tool has been proposed to find out the copied code. However, refactoring of code is still a challenging part as most of the ongoing tools depend on detection of clone rather than the ability to make decision on refactorability. These tools do not guarantee whether such codes can be safely refactored or not. Our aim mainly lies on detecting the possibility of refactoring a code. To find out whether the code clone can be securely refactored or not, three methods are applied: Nesting Structure Mapping, Statement Mapping and Precondition Examination. In order to refactor the code, we apply some techniques like Pull-Up Method and Push-Down Method. In our approach, we have tried to find the refactorable code using the methods and also refactored the code so as to remove the problem of code cloning.",Code clones; clone detection; Refactoring; Nesting Structure Mapping; Statement Mapping; Precondition Examination,,Code clones;clone detection;Refactoring;Nesting Structure Mapping;Statement Mapping;Precondition Examination,ckulkarni47@gmail.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Information Technology (InCITe) - The Next Generation IT Summit on the Theme - Internet of Things - Connect Your Worlds,"Noida, INDIA","OCT 06-07, 2016",IEEE,,978-1-5090-2612-8,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000405501600029,2-s2.0-85015888920,India,gmail.com,Shri Jagdishprasad Jhabarmal Tibrewala Univ,"Shri Jagdishprasad Jhabarmal Tibrewala Univ, India","Kulkarni, Chaitanya"
"Chug, A., Gupta, M.",A Quality Enhancement through Defect Reduction using Refactoring Operation,2017,"2017 INTERNATIONAL CONFERENCE ON ADVANCES IN COMPUTING, COMMUNICATIONS AND INFORMATICS (ICACCI)",,,,1869,1875,7,0,,,"[Chug, Anuradha; Gupta, Monika] GGSIP Univ, Sch Informat & Commun Technol, New Delhi, India",,"Refactoring is widely used technique to enhance overall quality of an existing software system by changing its internal structure without modifying its external behavior. Although, it is difficult to implement the refactoring manually, it helps to reduce the defects in the existing software. Three main types of design defects are investigated in the current study namely blob, Spaghetti Code (SC) and Functional Decomposition (FD) by applying specific rule which are based on the combination of Object-Oriented (OO) metrics and their threshold values. Further, study also suggests a novel approach to minimize the defects and improve the quality of software system by applying specific refactoring operations into the code. Five large open source projects JDATEPICKER, JXLS, JTDS, JFREECHART and JHOTDRAW were used for the empirical evaluation of the suggested approach. Results show that the refactoring is very effective for reducing the probability of the number of defects in existing software. We found that 20%, 16%, 4%, 14% and 5% defects are reduced in JDATEPICKER, JXLS, JTDS, JFREECHART and JHOTDRAW software respectively. The results produces in this study are useful for the developers to identify the defect prone areas in the software and reduce the probability of occurrence of defects in source code before its release.",Defect Detection; Refactoring; Internal Quality Attributes; Software Maintainability; Object Oriented Metrics,METRICS; DESIGN,Defect Detection;Refactoring;Internal Quality Attributes;Software Maintainability;Object Oriented Metrics;METRICS;DESIGN,anuradha@ipu.ac.in; monika_mca19@yahoo.in,,"345 E 47TH ST, NEW YORK, NY 10017 USA","International Conference on Advances in Computing, Communications and Informatics (ICACCI)","Manipal, INDIA","SEP 13-16, 2017",IEEE,,978-1-5090-6367-3,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000427645500311,2-s2.0-85042754542,India,ipu.ac.in,GGSIP Univ,"GGSIP Univ, India","Chug, Anuradha; Gupta, Monika"
"Couto C.M.S., Rocha H., Terra R.",A quality-oriented approach to recommend move method refactorings,2018,ACM International Conference Proceeding Series,,,,11,20,,1,10.1145/3275245.3275247,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85056726257&doi=10.1145%2f3275245.3275247&partnerID=40&md5=0f1be504624545395cfd9eb47eafe0b9,"Department of Computer Science, Federal University of Lavras (UFLA), Lavras, Brazil; Inria Lille - Nord Europe, Lille, France","Couto, C.M.S., Department of Computer Science, Federal University of Lavras (UFLA), Lavras, Brazil; Rocha, H., Inria Lille - Nord Europe, Lille, France; Terra, R., Department of Computer Science, Federal University of Lavras (UFLA), Lavras, Brazil","Refactoring is an important activity to improve software internal structure. Even though there are many refactoring approaches, very few consider their impact on the software quality. In this paper, we propose a software refactoring approach based on quality attributes. We rely on the measurements of the Quality Model for Object Oriented Design (QMOOD) to recommend Move Method refactorings that improve software quality. In a nutshell, given a software system S, our approach recommends a sequence of refactorings R1, R2, . . ., Rn that result in system versions S1, S2, . . ., Sn, where quality(Si+1) &gt; quality(Si). We empirically calibrated our approach, using four systems, to find the best criteria to measure the quality improvement. We performed three types of evaluation to verify the usefulness of our implemented tool, named QMove. First, we applied our approach on 13 open-source systems achieving an average recall of 84.2%. Second, we compared QMove with two state-of-art refactoring tools (JMove and JDeodorant) on the 13 previously evaluated systems, and QMove showed better recall, precision, and f-score values than the others. Third, we evaluated QMove, JMove, and JDeodorant in a real scenario with two proprietary systems on the eyes of their software architects. As result, the experts positively evaluated a greater number of QMove recommendations. © 2018 Association for Computing Machinery.",Move Method; Quality Metrics; Refactoring; Software Architecture,Computer software selection and evaluation; Open source software; Open systems; Software architecture; Move Method; Object oriented design; Proprietary systems; Quality improvement; Quality metrics; Refactorings; Software architects; Software refactoring; Object oriented programming,Move Method;Quality Metrics;Refactoring;Software Architecture;Computer software selection and evaluation;Open source software;Open systems;Object oriented design;Proprietary systems;Quality improvement;Refactorings;Software architects;Software refactoring;Object oriented programming,,,,,,,Association for Computing Machinery,,9781450365659,,,English,ACM Int. Conf. Proc. Ser.,Conference Paper,Scopus,,2-s2.0-85056726257,,Brazil;France,No email,,,"Couto C.M.S., Rocha H., Terra R."
"Lohmann D., Scheler F., Tartler R., Spinczyk O., Schroder-Preikschat W.",A quantitative analysis of aspects in the eCos kernel,2006,Proceedings of the 2006 EuroSys Conference,,, 1217954,191,204,,67,10.1145/1217935.1217954,https://www.scopus.com/inward/record.uri?eid=2-s2.0-34548261702&doi=10.1145%2f1217935.1217954&partnerID=40&md5=3c52465e38be567db00e8161f144a773,"Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4","Lohmann, D., Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4; Scheler, F., Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4; Tartler, R., Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4; Spinczyk, O., Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4; Schröder-Preikschat, W., Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4","Nearly ten years after its first presentation and five years after its first application to operating systems, the suitability of Aspect-Oriented Programming (AOP) for the development of operating system kernels is still highly in dispute. While the AOP advocacy emphasizes the benefits of AOP towards better configurability and maintainability of system software, most kernel developers express a sound skepticism regarding the thereby induced runtime and memory costs: Operating system kernels have to be lean and efficient.We have analyzed the runtime and memory costs of aspects in general, on the level of μ-benchmarks, and by refactoring and extending the eCos operating system kernel using AspectC++, an AOP extension to the C++ language. Our results show that most AOP features do not induce a intrinsic overhead and that the actual overhead induced by AspectC++ is very low. We have also analyzed a test case with significant aspect-related costs. This example shows how the structure of the underlying kernel can have a negative impact on aspect implementations and how these costs can be avoided by an aspect-aware design.Based on this analysis, our conclusion is that AOP is suitable for the development of operating system kernels and other kinds of highly efficient infrastructure software.",Aspect-Oriented Programming (AOP); AspectC++; ECos; Footprint,Cost effectiveness; Maintainability; Object oriented programming; Aspect-Oriented Programming (AOP); Footprints; System software; Computer operating systems,Aspect-Oriented Programming (AOP);AspectC++;ECos;Footprint;Cost effectiveness;Maintainability;Object oriented programming;Footprints;System software;Computer operating systems,"Lohmann, D.; Friedrich-Alexander University Erlangen-Nuremberg, Department of Computer Science 4email: lohmann@cs.fau.de",,,,,,,,1595933220; 9781595933225,,,English,Proc. Eurosys Conf.,Conference Paper,Scopus,,2-s2.0-34548261702,,Department of Computer Science 4,cs.fau.de,,,"Lohmann D., Scheler F., Tartler R., Spinczyk O., Schroder-Preikschat W."
"Gaia, F.N., Ferreira, G.C.S., Figueiredo, E., Maia, M.D.",A quantitative and qualitative assessment of aspectual feature modules for evolving software product lines,2014,SCIENCE OF COMPUTER PROGRAMMING,96,,,230,253,24,10,10.1016/j.scico.2014.03.006,,"[Gaia, Felipe Nunes; Sousa Ferreira, Gabriel Coutinho; Maia, Marcelo de Almeida] Univ Fed Uberlandia, Uberlandia, MG, Brazil; [Figueiredo, Eduardo] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil",,"Feature-Oriented Programming (FOP) and Aspect-Oriented Programming (AOP) are programming techniques based on composition mechanisms, called refinements and aspects, respectively, These techniques are assumed to be good variability mechanisms for implementing Software Product Lines (SPLs). Aspectual Feature Modules (AFM) is an approach that combines advantages of feature modules and aspects to increase concern modularity. Some guidelines on how to integrate these techniques have been established in some studies, but these studies do not focus the analysis on how effectively AFM can preserve the modularity and stability facilitating SPL evolution. The main purpose of this paper is to investigate whether the simultaneous use of aspects and features through the AFM approach facilitates the evolution of SPLs. The quantitative data were collected from two SPLs developed using four different variability mechanisms: (1) feature modules, aspects and aspects refinements of AFM, (2) aspects of aspect-oriented programming (AOP), (3) feature modules of feature-oriented programming (FOP), and (4) conditional compilation (CC) with object-oriented programming. Metrics for change propagation and modularity were calculated and the results support the benefits of the AFM option in a context where the product line has been evolved with addition or modification of crosscutting concerns. However a drawback of this approach is that refactoring components' design requires a higher degree of modifications to the SPL structure. (C) 2014 Elsevier B.V. All rights reserved.",Software product lines; Feature-oriented programming; Aspect-oriented programming; Aspectual feature modules; Variability mechanisms,VARIABILITY,Software product lines;Feature-oriented programming;Aspect-oriented programming;Aspectual feature modules;Variability mechanisms;VARIABILITY,felipegaia@mestrado.ufu.br; gabriel@mestrado.ufu.br; figueiredo@dcc.ufmg.br; marcmaia@facom.ufu.br,,"RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS",,,,ELSEVIER,0167-6423,,,,English,SCI COMPUT PROGRAM,Article,WoS,Computer Science,WOS:000345180900005,2-s2.0-84908255112,Brazil,mestrado.ufu.br,Univ Fed Uberlandia;Univ Fed Minas Gerais,"Univ Fed Uberlandia, Brazil;Univ Fed Minas Gerais, Brazil","Gaia, Felipe Nunes; Sousa Ferreira, Gabriel Coutinho; Figueiredo, Eduardo; Maia, Marcelo de Almeida"
"Usha K., Poonguzhali N., Kavitha E.",A quantitative approach for evaluating the effectiveness of refactoring in software development process,2009,"Proceedings of International Conference on Methods and Models in Computer Science, ICM2CS09",,, 5397935,,,,4,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949581309&partnerID=40&md5=18140a68f8706e506d1264d618f14313,"MIT, Pudhucherry, India; V.R.S College of Engineering, T.N, India","Usha, K., MIT, Pudhucherry, India; Poonguzhali, N., MIT, Pudhucherry, India; Kavitha, E., V.R.S College of Engineering, T.N, India","Software development is a mentally complicated task. Different software development methodologies and quality assurance methods are used in order to attain high quality, reliable, and bug free software. eXtreme Programming (XP) is a software development discipline in the family of agile methodologies that contributes towards quality improvement using dozen practices. One of the important practices in XP is Refactoring. Refactoring which can be defined as ""a change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior"". Although there has been a large amount of research investigations for this concept, but there has been little work done in quantitative approach. The main objective of the research is to develop a software development model using Refactoring practices. The software development model proposed in such a way that refactoring activity accompanies all the phases of software development. This work also shows the evaluation of effectiveness of the proposed software development model.",eXtreme programming (XP); Refactoring; Software development,Agile Methodologies; Bug-free; EXtreme Programming; High quality; Internal structure; Observable behavior; Quality improvement; Quantitative approach; Refactorings; Software development; Software development methodologies; Software development models; Software development process; Computer science; Quality assurance; Software design; Total quality management; Computer software selection and evaluation,eXtreme programming (XP);Refactoring;Software development;Agile Methodologies;Bug-free;EXtreme Programming;High quality;Internal structure;Observable behavior;Quality improvement;Quantitative approach;Refactorings;Software development methodologies;Software development models;Software development process;Computer science;Quality assurance;Software design;Total quality management;Computer software selection and evaluation,"Usha, K.; MIT, Pudhucherry, India; email: ushavaratharajan@gmail.com",,,,,,,,9789380043579,,,English,"Proc. Int. Conf. Methods Models Comput. Sci., ICM2CS",Conference Paper,Scopus,,2-s2.0-77949581309,,India,gmail.com,,,"Usha K., Poonguzhali N., Kavitha E."
"Kataoka, Y., Imai, T., Andou, H., Fukaya, T.",A quantitative evaluation of maintainability enhancement by refactoring,2002,"INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS",,,,576,585,10,75,10.1109/ICSM.2002.1167822,,"Toshiba Co Ltd, Syst Engn Lab, Saiwai Ku, Kawasaki, Kanagawa 2128582, Japan",,"Program refactoring is a technique to enhance the maintainability of a program. Although the concept itself is considered to be effective, there are few quantitative evaluation of its impact to the software maintainability. It is sometimes difficult to judge whether the refactoring in question should be applied or not without knowing the effect accurately. We propose a quantitative evaluation method to measure the maintainability enhancement effect of program refactoring. We focused on the coupling metrics to evaluate the refactoring effect. By comparing the coupling before and after the refactoring, we could evaluate the degree of maintainability enhancement. We applied our method to a certain program and showed that our metnod was really effective to quantify the refactoring effect and helped us to choose appropriate refactorings.",,,,yoshio.kataoka@toshiba.co.jp; takeo.imai@toshiba.co.jp; hiroki.andou@toshiba.co.jp; tetsuji.fukaya@toshiba.co.jp,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",18th International Conference on Software Maintenance,"MONTREAL, CANADA","OCT 03-06, 2002",IEEE COMPUTER SOC,1063-6773,0-7695-1819-2,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000178983800074,2-s2.0-0036437991,Japan,toshiba.co.jp,Syst Engn Lab,"Syst Engn Lab, Japan","Kataoka, Y; Imai, T; Andou, H; Fukaya, T"
"Reddy, K.N., Rao, A.A.",A Quantitative Evaluation of Software Quality Enhancement by Refactoring Using Dependency Oriented Complexity Metrics,2009,2009 SECOND INTERNATIONAL CONFERENCE ON EMERGING TRENDS IN ENGINEERING AND TECHNOLOGY (ICETET 2009),,,,28,+,2,0,,,"[Reddy, K. Narendar] JNTU, CVR Coll Engn, Dept Comp Sci, Hyderabad, Andhra Pradesh, India; [Rao, A. Ananda] Jawaharlal Nehru Technol Univ, JNTUA Coll Engn, Anantapur, Andhra Pradesh, India",,"The maintainability of software depends on the quality of software. Software under evolution is modified and enhanced to cater the new requirements. Due to this the software becomes more complex and deviates from its original design, in turn lowering the quality. Refactoring makes object oriented software systems maintainable. Effective refactoring requires proper metrics to quantitatively ascertain the improvement in the quality after refactoring. In this direction, we have made an effort to quantitatively evaluate the quality enhancement by refactoring using dependency oriented complexity metrics. In this paper three experimental cases are given. The metrics have successfully indicated quantitatively the presence of defects and the improvement in the quality of designs after refactoring. These metrics have acted as quality indicators with respect to designs considered under ripple effects before and after refactoring. Metrics as quality indicators help to estimate the required maintenance efforts.",Design defects; Quality; Dcoupling; Dependency Oriented Complexity Metrics; Refactoring,,Design defects;Quality;Dcoupling;Dependency Oriented Complexity Metrics;Refactoring,knreddy_cvr@yahoo.com; akepogu@yahoo.co.in,,"345 E 47TH ST, NEW YORK, NY 10017 USA",2nd International Conference on Emerging Trends in Engineering and Technology (ICETET09),"Nagpur, INDIA","DEC 16-18, 2009",IEEE,,978-1-4244-5250-7,,,English,,Proceedings Paper,WoS,Engineering,WOS:000287889000006,,India,yahoo.com,JNTU;Jawaharlal Nehru Technol Univ,"JNTU, India;Jawaharlal Nehru Technol Univ, India","Reddy, K. Narendar; Rao, A. Ananda"
"Narendar Reddy K., Ananda Rao A.",A quantitative evaluation of software quality enhancement by refactoring using dependency oriented complexity metrics,2009,"2009 2nd International Conference on Emerging Trends in Engineering and Technology, ICETET 2009",,, 5395508,1011,1018,,3,10.1109/ICETET.2009.17,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77949608738&doi=10.1109%2fICETET.2009.17&partnerID=40&md5=d863c9e6c70e2e532c41cf28ea1be5c6,"Computer Science Department, CVR College of Engineering, JNTU, Hyderabad, India; JNTUA College of Engineering, Jawaharlal Nehru Techno. University, Anantapur, AP, India","Narendar Reddy, K., Computer Science Department, CVR College of Engineering, JNTU, Hyderabad, India; Ananda Rao, A., JNTUA College of Engineering, Jawaharlal Nehru Techno. University, Anantapur, AP, India","The maintainability of software depends on the quality of software. Software under evolution is modified and enhanced to cater the new requirements. Due to this the software becomes more complex and deviates from its original design, in turn lowering the quality. Refactoring makes object oriented software systems maintainable. Effective refactoring requires proper metrics to quantitatively ascertain the improvement in the quality after refactoring. In this direction, we have made an effort to quantitatively evaluate the quality enhancement by refactoring using dependency oriented complexity metrics. In this paper three experimental cases are given. The metrics have successfully indicated quantitatively the presence of defects and the improvement in the quality of designs after refactoring. These metrics have acted as quality indicators with respect to designs considered under ripple effects before and after refactoring. Metrics as quality indicators help to estimate the required maintenance efforts. © 2009 IEEE.",Dcoupling; Dependency oriented complexity metrics; Design defects; Quality; Refactoring,Before and after; Complexity metrics; Design defects; Object-oriented software systems; Original design; Quality enhancement; Quality indicators; Quality of design; Quality of softwares; Quantitative evaluation; Refactorings; Ripple effects; Software Quality; Computer software maintenance; Defects; Design; Maintainability; Object oriented programming; Quality control; Computer software selection and evaluation,Dcoupling;Dependency oriented complexity metrics;Design defects;Quality;Refactoring;Before and after;Complexity metrics;Object-oriented software systems;Original design;Quality enhancement;Quality indicators;Quality of design;Quality of softwares;Quantitative evaluation;Refactorings;Ripple effects;Software Quality;Computer software maintenance;Defects;Design;Maintainability;Object oriented programming;Quality control;Computer software selection and evaluation,"Narendar Reddy, K.; Computer Science Department, CVR College of Engineering, JNTU, Hyderabad, India; email: knreddy_cvr@yahoo.com",,,,,,,,9780769538846,,,English,"Int. Conf. Emerg. Trends Eng. Technol., ICETET",Conference Paper,Scopus,,2-s2.0-77949608738,,India,yahoo.com,,,"Narendar Reddy K., Ananda Rao A."
"Reddy K.N., Rao A.A., Chand M.G., Kumar J. K.",A quantitative method to detect design defects and to ascertain the elimination of design defects after refactoring,2008,"Proceedings of the 2008 International Conference on Software Engineering Research and Practice, SERP 2008",,,,79,85,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-62749180884&partnerID=40&md5=167e5ac0d49b7d2fdcee369c5a9aa763,"Dept. of CSE, CVR College of Engg., JNTU, Hyderabad, AP, India; Dept. of CSE, JNTU College of Engg., JNTU, Anantapur, AP, India; Dept. of IT, GNITS, JNTU, Hyderabad, AP, India; India Software Lab., IBM, Hyderabad, AP, India","Reddy, K.N., Dept. of CSE, CVR College of Engg., JNTU, Hyderabad, AP, India; Rao, A.A., Dept. of CSE, JNTU College of Engg., JNTU, Anantapur, AP, India; Chand, M.G., Dept. of IT, GNITS, JNTU, Hyderabad, AP, India; Kumar J., K., India Software Lab., IBM, Hyderabad, AP, India","One of the ways to make object oriented software systems maintainable is refactoring. Effective refactoring requires a proper method to detect design defects. Recently, some quantitative design defects detection methods which are based on metrics have been developed. However, there is a scope for a design defects detection method which considers design change propagation probabilities between artifacts that are connected through intermediate artifacts. A quantitative method is proposed in this paper considering the above aspect. The main advantage of the proposed method is, it can be used not only for design defects detection, but also to ascertain quantitatively the elimination of design defects after refactoring. Making use of the proposed method, in example designs, two different design defects are detected and the elimination of these defects after refactoring from the design is known quantitatively. The frame work in which this method is used is given.",Bad smells; Design change propagation probability matrix; Design defects; Divergent change; Refactoring; Shotgun surgery,Bad smells; Design change propagation probability matrix; Design defects; Divergent change; Refactoring; Shotgun surgery; Defects; Engineering research; Object oriented programming; Odors; Probability; Software engineering; Surgery; Design,Bad smells;Design change propagation probability matrix;Design defects;Divergent change;Refactoring;Shotgun surgery;Defects;Engineering research;Object oriented programming;Odors;Probability;Software engineering;Surgery;Design,"Reddy, K. N.; Dept. of CSE, CVR College of Engg., JNTU, Hyderabad, AP, India",,,,,,,,1601320884; 9781601320889,,,English,"Proc. Int. Conf. Softw. Eng. Res. Pract., SERP",Conference Paper,Scopus,,2-s2.0-62749180884,,India,No email,,,"Reddy K.N., Rao A.A., Chand M.G., Kumar J. K."
"Bibiano A.C., Fernandes E., Oliveira D., Garcia A., Kalinowski M., Fonseca B., Oliveira R., Oliveira A., Cedrim D.",A Quantitative Study on Characteristics and Effect of Batch Refactoring on Code Smells,2019,International Symposium on Empirical Software Engineering and Measurement,2019-Septemer,, 8870183,,,,0,10.1109/ESEM.2019.8870183,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85074270841&doi=10.1109%2fESEM.2019.8870183&partnerID=40&md5=df5598d0ff10e3bbca81f17068c82bc6,"Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; UFAL, Computing Institute, Maceió, Brazil; UEG Posse-GO, Computing Institute, Posse, Brazil; Amazon, São Paulo, Brazil","Bibiano, A.C., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Fernandes, E., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Oliveira, D., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Garcia, A., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Kalinowski, M., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Fonseca, B., UFAL, Computing Institute, Maceió, Brazil; Oliveira, R., UEG Posse-GO, Computing Institute, Posse, Brazil; Oliveira, A., Informatics Department, PUC-Rio, Rio de Janeiro, Brazil; Cedrim, D., Amazon, São Paulo, Brazil","Background: Code refactoring aims to improve code structures via code transformations. A single transformation rarely suffices to fully remove code smells that reveal poor code structures. Most transformations are applied in batches, i.e. sets of interrelated transformations, rather than in isolation. Nevertheless, empirical knowledge on batch application, or batch refactoring, is scarce. Such scarceness helps little to improve current refactoring practices. Aims: We analyzed 57 open and closed software projects. We aimed to understand batch application from two perspectives: characteristics that typically constitute a batch (e.g., the variety of transformation types employed), and the batch effect on smells. Method: We analyzed 19 smell types and 13 transformation types. We identified 4,607 batches, each applied by the same developer on the same code element (method or class); we expected to have batches whose transformations are closely interrelated. We computed (1) the frequency in which five batch characteristic manifest, (2) the probability of each batch characteristics to remove smells, and (3) the frequency in which batches introduce and remove smells. Results: Most batches are quite simple: although most batches are applied on more than one method (90%), they are usually composed of the same transformation type (72%) and only two transformations (57%). Batches applied on a single method are 2.6 times more prone to fully remove smells than batches affecting more than one method. Surprisingly, batches mostly ended up introducing (51%) or not fully removing (38%) smells. Conclusions: The batch simplicity suggests that developers have sub-explored the combinations of transformations within a batch. We summarized some batches that may fully remove smells, so that developers can incorporate them into current refactoring practices. © 2019 IEEE.",code refactoring; code smell; quantitative study,Cosine transforms; Odors; Software engineering; Code re-factoring; Code smell; Code structure; Code transformation; Empirical knowledge; Quantitative study; Software project; Transformation types; Codes (symbols),code refactoring;code smell;quantitative study;Cosine transforms;Odors;Software engineering;Code re-factoring;Code structure;Code transformation;Empirical knowledge;Software project;Transformation types;Codes (symbols),,,,,,,IEEE Computer Society,19493770,9781728129686,,,English,Int. Symp. Empir. Softw. Eng. Meas.,Conference Paper,Scopus,,2-s2.0-85074270841,,Brazil,No email,,,"Bibiano A.C., Fernandes E., Oliveira D., Garcia A., Kalinowski M., Fonseca B., Oliveira R., Oliveira A., Cedrim D."
"Moesus N., Scholze M., Schlesinger S., Herber P.",A Rating Tool for the Automated Selection of Software Refactorings that Remove Antipatterns to Improve Performance and Stability,2019,Communications in Computer and Information Science,1077,,,28,54,,0,10.1007/978-3-030-29157-0_2,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071681750&doi=10.1007%2f978-3-030-29157-0_2&partnerID=40&md5=f9c232f7ab5a63efcd5557485709f957,"QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Software and Embedded Systems Engineering, Technische Universität Berlin, Berlin, Germany; Embedded Systems Group, University of Münster, Münster, Germany","Moesus, N., QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Scholze, M., QMETHODS – Business & IT Consulting GmbH, Berlin, Germany; Schlesinger, S., Software and Embedded Systems Engineering, Technische Universität Berlin, Berlin, Germany; Herber, P., Embedded Systems Group, University of Münster, Münster, Germany","Antipatterns are known to be bad solutions for recurring design problems. To detect and remove antipatterns has proven to be a useful mean to improve the quality of software. While there exist several approaches to detect antipatterns automatically, existing work on antipattern detection often does not solve the detected design problems automatically. Although there exist refactorings that have the potential to significantly increase the quality of a program, it is hard to decide which refactorings effectively yield improvements with respect to performance and stability. In this paper, we present a rating tool that makes use of static antipattern detection together with software profiling for the automated selection of refactorings that remove antipatterns and are promising candidates to improve performance and stability. Our key idea is to extend a previously proposed heuristics that utilizes software properties determined by both static code analyses and dynamic software analyses to compile a list of concrete refactorings sorted by their assessed potential to improve performance with an approach to identify refactorings that may improve stability. We do not impose an order on the refactorings that may improve stability. We demonstrate the practical applicability of our overall approach with experimental results. © 2019, Springer Nature Switzerland AG.",Performance; Software refactoring; Stability antipattern detection,Anti-patterns; Automated selection; Improve performance; Performance; Quality of softwares; Software properties; Software refactoring; Static code analysis; Stability,Performance;Software refactoring;Stability antipattern detection;Anti-patterns;Automated selection;Improve performance;Quality of softwares;Software properties;Static code analysis;Stability,"Herber, P.; Embedded Systems Group, University of MünsterGermany; email: paula.herber@uni-muenster.de",Maciaszek L.A.Maciaszek L.A.van Sinderen M.,,,,,Springer Verlag,18650929,9783030291563,,,English,Commun. Comput. Info. Sci.,Conference Paper,Scopus,,2-s2.0-85071681750,,Germany,uni-muenster.de,,,"Moesus N., Scholze M., Schlesinger S., Herber P."
"Fontana, F.A., Pigazzini, I., Roveda, R., Tamburri, D., Zanoni, M., Di Nitto, E.",Arcan: a Tool for Architectural Smells Detection,2017,2017 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ARCHITECTURE WORKSHOPS (ICSAW),,,,282,285,4,7,10.1109/ICSAW.2017.16,,"[Fontana, Francesca Arcelli] Univ Milano Bicocca, Milan, Italy; Politecn Milan, Dipartimento Elettron Informat & Bioingn, Milan, Italy",,"Code smells are sub-optimal coding circumstances such as blob classes or spaghetti code -they have received much attention and tooling in recent software engineering research. Higher-up in the abstraction level, architectural smells are problems or sub-optimal architectural patterns or other design-level characteristics. These have received significantly less attention even though they are usually considered more critical than code smells, and harder to detect, remove, and refactor. This paper describes an open-source tool called Arcan developed for the detection of architectural smells through an evaluation of several architecture dependency issues. The detection techniques inside Arcan exploit graph database technology, allowing for high scalability in smells detection and better management of large amounts of dependencies of multiple kinds. In the scope of this paper, we focus on the evaluation of Arcan results carried out with real-life software developers to check if the architectural smells detected by Arcan are really perceived as problems and to get an overall usefulness evaluation of the tool.",,DESIGN,DESIGN,arcelli@disco.unimib.it; i.pigazzini@campus.unimib.it; riccardo.roveda@disco.unimib.it; damianandrew.tamburri@polimi.it; marco.zanoni@disco.unimib.it; elisabetta.dinitto@polimi.it,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE International Conference on Software Architecture (ICSA),"Gothenburg, SWEDEN","APR 03-07, 2017",IEEE,,978-1-5090-4793-2,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000413089000058,,Italy,disco.unimib.it,Univ Milano Bicocca;Dipartimento Elettron Informat & Bioingn,"Univ Milano Bicocca, Italy;Dipartimento Elettron Informat & Bioingn, Italy","Fontana, Francesca Arcelli; Pigazzini, Ilaria; Roveda, Riccardo; Tamburri, Damian; Zanoni, Marco; Di Nitto, Elisabetta"
"Cheng Y.P., Cheng Y.R., Wang H.Y.",ARCATS - A Scalable Compositional Analysis Tool Suite,2006,Proceedings of the ACM Symposium on Applied Computing,2,,,1852,1853,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-33751025693&partnerID=40&md5=5df285c1b1809c248fbdc11efdbf941a,"Software Engineering Lab., Dept. Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan","Cheng, Y.-P., Software Engineering Lab., Dept. Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan; Cheng, Y.-R., Software Engineering Lab., Dept. Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan; Wang, H.-Y., Software Engineering Lab., Dept. Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan","Automatic verification techniques, which analyze all processes at once, typically do not scale well for large, complex concurrent software systems because of the theoretic barrier - PSPACE complexity in worst case. In this paper, we present our tool named ARCATS (Architecture Refactoring and Compositional Analysis Tool Suite). ARCATS consists a set of tools to combat state explosion in a divide-and-conquer, hierarchical manner, which is also known as compositional analysis. We build these tools to seek out best combinations to scale the verification to larger software systems. Copyright 2006 ACM.",Branching bisimulation; Compositional analysis; Context constraints; Refactoring,Computer simulation; Concurrent engineering; Constraint theory; Large scale systems; Software engineering; Branching bisimulation; Compositional analysis; Context constraints; Refactoring; Computer software selection and evaluation,Branching bisimulation;Compositional analysis;Context constraints;Refactoring;Computer simulation;Concurrent engineering;Constraint theory;Large scale systems;Software engineering;Computer software selection and evaluation,"Cheng, Y.-P.; Software Engineering Lab., Dept. Information and Computer Education, National Taiwan Normal University, Taipei City, Taiwan; email: ypc@ice.ntnu.edu.tw",,,,,,,,1595931082; 9781595931085,,,English,Proc ACM Symp Appl Computing,Conference Paper,Scopus,,2-s2.0-33751025693,,Taiwan,ice.ntnu.edu.tw,,,"Cheng Y.-P., Cheng Y.-R., Wang H.-Y."
"Cheng Y.P., Lee C.Y.","ARCATS - Tackling state explosion in a multi-phased, Compositionalway",2008,Proceedings:  DMS 2008 - 14th International Conference on Distributed Multimedia Systems,,,,100,105,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84923924040&partnerID=40&md5=da98ad2112437e4343dbbc41885a8584,"Dept. of Computer Science and Information Engineering, National Taiwan Normal University, Taipei, Taiwan","Cheng, Y.-P., Dept. of Computer Science and Information Engineering, National Taiwan Normal University, Taipei, Taiwan; Lee, C.-Y., Dept. of Computer Science and Information Engineering, National Taiwan Normal University, Taipei, Taiwan","Automatic verification techniques, which analyze all processes at once, typically do not scale well for large, complex concurrent software systems because of the theoretic barrier – PSPACE hard complexity in worst case. In this paper, we present our tool named ARCATS (Architecture Refactoring and Compositional Analysis Tool Suite). ARCATS consists a set of tools to combat state explosion in a divideand- conquer, hierarchical fashion. These tools can be applied in a multi-phased manner until a balance between intractability and feasibility is reached. We build these tools to seek out perfect combinations for analyzing large-scale, complex software system with state space growth carefully controlled. © 2008 by Knowledge Systems Institute Graduate School. All rights reserved.",,Computer software; Multimedia systems; Automatic verification; Combat state; Complex software systems; Compositional analysis; Concurrent software systems; Divide and conquer; Refactorings; State explosion; Verification,Computer software;Multimedia systems;Automatic verification;Combat state;Complex software systems;Compositional analysis;Concurrent software systems;Divide and conquer;Refactorings;State explosion;Verification,"Cheng, Y.-P.; Dept. of Computer Science and Information Engineering, National Taiwan Normal UniversityTaiwan",,,,,,Knowledge Systems Institute Graduate School,,1891706233,,,English,Proc. DMS Intl. Conf. Distributed Multimedia Syst.,Conference Paper,Scopus,,2-s2.0-84923924040,,Taiwan,No email,,,"Cheng Y.-P., Lee C.-Y."
"Waseem M., Ikram N.",Architecting activities evolution and emergence in agile software development: An empirical investigation initial research proposal,2016,Lecture Notes in Business Information Processing,251,,,326,332,,3,10.1007/978-3-319-33515-5_35,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84971569666&doi=10.1007%2f978-3-319-33515-5_35&partnerID=40&md5=501b9c995371779c689b97b1dfb2168e,"Riphah International University, Islamabad, 44000, Pakistan","Waseem, M., Riphah International University, Islamabad, 44000, Pakistan; Ikram, N., Riphah International University, Islamabad, 44000, Pakistan","This proposal is design to address the proposed research work on agile software development and architecture co-existence. The objective of this research is to answer how architecting activities emerge and evolve with agile software development in industry. The architecting activities are architectural analysis (AA), architectural synthesis (AS), architectural evaluation (AE), architectural implementation (AI), architectural maintenance and evolution (AME), architectural recovery (AR), architectural description (ADp), architectural understanding (AU), architectural impact analysis (AIA), architectural reuse (ARu) and architectural refactoring (ARf). This research objective could achieve by using multiple research methods. We are planning to use comprehensively report the pure ‘state- of- practice’ for architecting activities in ASD from industry and practitioners point of views. Therefore, we decided to use the case studies, survey and semi structure interview as research methods. The result of this research work can provide the baseline information for architecture evolution frameworks for agile software development, challenges and solutions in ASD for SA activities, expected evolvable dimensions of the software system, methods that may help for minimizing the architectural and agile co-existence issues and architectural technical debt in agile software development. © The Author(s) 2016.",Agile development; Architecting approach; Software architecture,Engineering research; Software architecture; Software design; Agile development; Agile software development; Architecting approach; Architectural descriptions; Architectural evaluation; Architectural recovery; Architectural synthesis; Empirical investigation; Software engineering,Agile development;Architecting approach;Software architecture;Engineering research;Software design;Agile software development;Architectural descriptions;Architectural evaluation;Architectural recovery;Architectural synthesis;Empirical investigation;Software engineering,"Waseem, M.; Riphah International UniversityPakistan; email: m.waseem@iiu.edu.pk",Sharp H.Hall T.,,,,,Springer Verlag,18651348,9783319335148,,,English,Lect. Notes Bus. Inf. Process.,Conference Paper,Scopus,,2-s2.0-84971569666,,Pakistan,iiu.edu.pk,,,"Waseem M., Ikram N."
"Saraiva, D., Pereira, L., Batista, T., Delicato, F.C., Pires, P.F., Kulesza, U., Araujo, R., Freitas, T., Miranda, S., Souto, A.L., Coelho, R.",Architecting a Model-Driven Aspect-Oriented Product Line for a Digital TV Middleware: A Refactoring Experience,2010,SOFTWARE ARCHITECTURE,6285,,,166,181,16,8,,,"[Saraiva, Diego; Pereira, Lucas; Batista, Thais; Delicato, Flavia C.; Pires, Paulo F.; Kulesza, Uira; Araujo, Rodrigo; Freitas, Tassia; Miranda, Sindolfo; Souto, Ana Liz; Coelho, Roberta] Univ Fed Rio Grande do Norte, Dept Comp Sci, BR-59072970 Natal, RN, Brazil",,"In this paper, we present the experience of refactoring the architecture of Ginga, the Brazilian Terrestrial Digital TV System (SBTVD) middleware. The main goal of the Ginga refactoring was to increase its configurability, through the automatic management of its variabilities. The resultant middleware, named GingaForAll, is based on a software product line (SPL) architecture, which encompasses both the middleware commonalities and its specific functionalities. Aspect-oriented techniques were used to improve the modularization of crosscutting mandatory and variable features from the Ginga SPL architecture. A model-driven based process was developed to allow the automatic management of the common and variable features in a high abstraction level that supports the management of code assets in terms of configurable models. The integration of such software engineering techniques have contributed to provide a flexible and configurable Ginga architecture, which allows the automatic generation of middleware customizations driven by the devices constraints and applications needs.",architecture refactoring; software product lines; model-driven development; aspect-oriented development; configurable middleware,,architecture refactoring;software product lines;model-driven development;aspect-oriented development;configurable middleware,diegosaraiva@gmail.com; lucasilpe@gmail.com; thaisbatista@gmail.com; fdelicato@gmail.com; paulo.f.pires@gmail.com; uirakulesza@gmail.com; fenrrir@gmail.com; tassiafreitas@gmail.com; sindolfo.miranda.filho@gmail.com; analiz@gmail.com; souzacoelho@gmail.com,"Babar, MA; Gorton, I","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",4th European Conference on Software Architecture,"IT Univ Copenhagen, Copenhagen, DENMARK","AUG 23-26, 2010",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-15113-2,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000286563800014,2-s2.0-78049330977,Brazil,gmail.com,Univ Fed Rio Grande do Norte,"Univ Fed Rio Grande do Norte, Brazil","Saraiva, Diego; Pereira, Lucas; Batista, Thais; Delicato, Flavia C.; Pires, Paulo F.; Kulesza, Uira; Araujo, Rodrigo; Freitas, Tassia; Miranda, Sindolfo; Souto, Ana Liz; Coelho, Roberta"
"Feather, M.S., Markosian, L.Z.",Architecting and Generalizing a Safety Case for Critical Condition Detection Software,2013,2013 1ST INTERNATIONAL WORKSHOP ON ASSURANCE CASES FOR SOFTWARE-INTENSIVE SYSTEMS (ASSURE),,,,29,33,5,0,,,"[Feather, Martin S.] CALTECH, Jet Prop Lab, Pasadena, CA 91125 USA; [Markosian, Lawrence Z.] SGT Inc, Moffett Field, CA USA",,"Safety cases and, specifically, software safety cases, have had virtually no presence in engineering practice in the US. Recent interest, in addition to an early attempt to introduce them into practice in the NASA Constellation Program, motivated us to develop a partial safety case for a safety critical subsystem for the Ares I vehicle, namely the abort detection, notification and response (AFDNR) system. This paper relates our experience applying the safety case concept to AFDNR, particularly from the perspective of generalizing the safety issues to similar fault management systems. We also provide lessons learned, including a discussion of issues that led to our current refactoring of our initial safety case.",Software safety; safety cases; assurance cases,,Software safety;safety cases;assurance cases,Martin.S.Feather@jpl.nasa.gov; LZMarkosian@sgt-inc.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",1st International Workshop on Assurance Cases for Software-Intensive Systems (ASSURE),"San Francisco, CA","MAY 19, 2013",IEEE,,978-1-4673-6324-2,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000333276800006,,United States,jpl.nasa.gov,CALTECH;SGT Inc,"CALTECH, United States;SGT Inc, United States","Feather, Martin S.; Markosian, Lawrence Z."
"Feather M.S., Markosian L.Z.",Architecting and generalizing a safety case for critical condition detection software an experience report,2013,"2013 1st International Workshop on Assurance Cases for Software-Intensive Systems, ASSURE 2013 - Proceedings",,, 6614268,29,33,,0,10.1109/ASSURE.2013.6614268,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84886651507&doi=10.1109%2fASSURE.2013.6614268&partnerID=40&md5=00521064fcd44c8dc4933ab52ece38f1,"Jet Propulsion Laboratory, California Institute of Technology, Pasadena, United States; SGT. Inc., Moffett Field, United States","Feather, M.S., Jet Propulsion Laboratory, California Institute of Technology, Pasadena, United States; Markosian, L.Z., SGT. Inc., Moffett Field, United States","Safety cases and, specifically, software safety cases, have had virtually no presence in engineering practice in the US. Recent interest, in addition to an early attempt to introduce them into practice in the NASA Constellation Program, motivated us to develop a partial safety case for a safety critical subsystem for the Ares I vehicle, namely the abort detection, notification and response (AFDNR) system. This paper relates our experience applying the safety case concept to AFDNR, particularly from the perspective of generalizing the safety issues to similar fault management systems. We also provide lessons learned, including a discussion of issues that led to our current refactoring of our initial safety case. © 2013 IEEE.",assurance cases; safety cases; Software safety,Assurance case; Critical condition; Engineering practices; Experience report; Fault management system; Safety case; Safety issues; Software safety; Computer software selection and evaluation; NASA; Safety engineering,assurance cases;safety cases;Software safety;Assurance case;Critical condition;Engineering practices;Experience report;Fault management system;Safety case;Safety issues;Computer software selection and evaluation;NASA;Safety engineering,"Jet Propulsion Laboratory, California Institute of Technology, Pasadena, United States",,,,,,,,9781467363242,,,English,"Int. Workshop Assur. Cases Softw.-Intensive Syst., ASSURE - Proc.",Conference Paper,Scopus,,2-s2.0-84886651507,,United States,No email,,,"Feather M.S., Markosian L.Z."
"Kim J.A., Kim D.",Architectural decisions and construction of automotive control product line,2019,Journal of Advanced Research in Dynamical and Control Systems,11,5 Special Issue,,405,411,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071868071&partnerID=40&md5=679a1040e174ba7d9697aca498d63ed1,"Computer Education Department, Catholic Kwandong University, 579BeonGil 24, Gangneung, Gangwondo  25601, South Korea","Kim, J.A., Computer Education Department, Catholic Kwandong University, 579BeonGil 24, Gangneung, Gangwondo  25601, South Korea; Kim, D., Computer Education Department, Catholic Kwandong University, 579BeonGil 24, Gangneung, Gangwondo  25601, South Korea","Background/Objectives: Developing an automotive system can thus involve hundreds or thousands of variants, adding to the existing engineering complexity. Automotive manufacturing ranks among the most extreme instances of systems and software product line engineering (PLE).Methods/Statistical analysis: In order to design the product line architecture, this study performed the following: (1) evaluation for selection of the candidate legacy systems, (2) architecture analysis of the legacy systems selected for architecture analysis, and (3) architectural model definition and architectural design.Findings. In this paper, we first addressed several architectural problems. • Control module can be decomposed with several lower-level modules but each code block shares the global variables so that control module does not meet the modularity. • Hardware value can be access from the control module directly and suggested architectural guides for automotive control systems. • Information hiding is fail and control is not separated from the algorithm. The process maturity of automotive industry is not matured so that we suggested the refactoring guide for architectural decisions. We suggested 2 architecture view: Conceptual and module architecture are necessary for product line in automotive control system. Module should be decomposed into functional module for implementation and traceability should be defined from/to feature. Layered architecture style is powerful mechanism for module and each layer define separate role which is the criteria for module identification. Improvements/Applications: To investigate the effects of SPL technology application, an evaluation was undertaken by using the BAPO (Business, Architecture, Process, and Organization) model. Each perspective of BAPO was improved with one level. © 2019, Institute of Advanced Scientific Research, Inc.. All rights reserved.",Architecture design; Automotive software product; Extractive approach; Software product line,,Architecture design;Automotive software product;Extractive approach;Software product line,"Kim, D.; Computer Education Department, Catholic Kwandong University, 579BeonGil 24, South Korea; email: remaindk0@gmail.com",,,,,,"Institute of Advanced Scientific Research, Inc.",1943023X,,,,English,J. Adv. Res. Dyn. Control. Syst.,Article,Scopus,,2-s2.0-85071868071,,South Korea,gmail.com,,,"Kim J.A., Kim D."
"McComb T., Smith G.",Architectural design in object-Z,2004,"Proceedings of the Australian Software Engineering Conference, ASWEC",2004,,,77,86,,17,10.1109/ASWEC.2004.1290460,https://www.scopus.com/inward/record.uri?eid=2-s2.0-2942592142&doi=10.1109%2fASWEC.2004.1290460&partnerID=40&md5=af4d8b220a18bbea9e20ffa6304cf6de,"Sch. of Info. Technol./Elec. Eng., University of Queensland, Australia","McComb, T., Sch. of Info. Technol./Elec. Eng., University of Queensland, Australia; Smith, G., Sch. of Info. Technol./Elec. Eng., University of Queensland, Australia","We present a process for introducing an object-oriented architecture into an abstract functional specification written in Object-Z. Since the design is derived from the specification, correctness concerns are addressed as part of the design process. We base our approach on refactoring rules that apply to class structure, and use the rules to implement design patterns. As a motivating example, we introduce a user-interface design that follows the Model-View-Controller paradigm into an existing specification.",,Case studies; Microsoft (CO); Model-view controller; Computer architecture; Computer hardware description languages; Computer programming languages; Control equipment; Data processing; Java programming language; Machine oriented languages; Object oriented programming; Specifications; User interfaces; Software engineering,Case studies;Microsoft (CO);Model-view controller;Computer architecture;Computer hardware description languages;Computer programming languages;Control equipment;Data processing;Java programming language;Machine oriented languages;Object oriented programming;Specifications;User interfaces;Software engineering,"McComb, T.; Sch. of Info. Technol./Elec. Eng., University of Queensland, Queensland, QLD, Australia; email: tjm@itee.uq.edu.au",Strooper P.,,,,,,,,,,English,Proc Aust Software Eng Conf ASWEC,Conference Paper,Scopus,,2-s2.0-2942592142,,Australia,itee.uq.edu.au,,,"McComb T., Smith G."
"McTague R., Fagan P.",Architectural refactoring as a strategic tool in the evolution of a web-based SaaS product,2018,"IWoR 2018 - Proceedings of the 2nd International Workshop on Refactoring, co-located with ASE 2018",,,,11,13,,0,10.1145/3242163.3242166,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85063642969&doi=10.1145%2f3242163.3242166&partnerID=40&md5=6219500927e5e3d6f4d8d5a58a0f7d4c,"IBM, Ireland","McTague, R., IBM, Ireland; Fagan, P., IBM, Ireland","Working in the highly agile world of Software As-A-Service (SaaS) enterprise software products, the authors describe their experience of the constant evolution in terms of continuous refactoring. This paper examines several of the key drivers for this refactoring, their impact on product architecture and code, as well as the factors that influence timing of such impacts. The drivers examined are speed to market and associated viability, cost, organisational productivity, market demands/changing technology trends, changing underlying technical services, increased scale and the associated necessity for increased agility, and changing regulatory frameworks. © 2018 ACM.",Agility; Architectural refactoring; Cost; Increased scale; Market demands; Organisational productivity; Regulatory frameworks; SaaS; Strategic refactoring; Technology trends; Underlying technical service/PaaS; Viability,Commerce; Costs; Enterprise software; Productivity; Agility; Increased scale; Market demand; Organisational; Refactorings; Regulatory frameworks; SaaS; Technical service; Technology trends; Viability; Software as a service (SaaS),Agility;Architectural refactoring;Cost;Increased scale;Market demands;Organisational productivity;Regulatory frameworks;SaaS;Strategic refactoring;Technology trends;Underlying technical service/PaaS;Viability;Commerce;Costs;Enterprise software;Productivity;Market demand;Organisational;Refactorings;Technical service;Software as a service (SaaS),,Ouni A.Cinneide M.O.Kessentini M.,,,,,"Association for Computing Machinery, Inc",,9781450359740,,,English,"IWoR - Proc. Int. Workshop Refactoring, co-located ASE",Conference Paper,Scopus,,2-s2.0-85063642969,,Ireland,No email,,,"McTague R., Fagan P."
Zimmermann O.,Architectural refactoring: A task-centric view on software evolution,2015,IEEE Software,32,2, 7057560,26,29,,16,10.1109/MS.2015.37,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925036831&doi=10.1109%2fMS.2015.37&partnerID=40&md5=c62d6f85857b5d750438264fa918a54e,"Institute for Software at the University of Applied Sciences of Eastern Switzerland, Rapperswil, Switzerland","Zimmermann, O., Institute for Software at the University of Applied Sciences of Eastern Switzerland, Rapperswil, Switzerland","A refactoring aims to improve a certain quality while preserving others. For example, code refactoring restructures code to make it more maintainable without changing its observable behavior. Given the success of code refactoring, it's surprising that architectural refactoring (AR) hasn't taken off yet. This article examines AR from a new angle: as an evolution technique that revisits architectural decisions and identifies related design, implementation, and documentation tasks. © 2015 IEEE.",refactoring; software development; software engineering; software evolution,Codes (symbols); Software engineering; Architectural decision; Code re-factoring; IMPROVE-A; Observable behavior; Refactorings; Software Evolution; Software design,refactoring;software development;software engineering;software evolution;Codes (symbols);Architectural decision;Code re-factoring;IMPROVE-A;Observable behavior;Refactorings;Software design,"Zimmermann, O.; Institute for Software at the University of Applied Sciences of Eastern SwitzerlandSwitzerland",,,,,,IEEE Computer Society,07407459,,IESOE,,English,IEEE Software,Article,Scopus,,2-s2.0-84925036831,,Switzerland,No email,,,Zimmermann O.
"Zimmermann, O.",Architectural refactoring for the cloud: a decision-centric view on cloud migration,2017,COMPUTING,99,2,,129,145,17,3,10.1007/s00607-016-0520-y,,"[Zimmermann, Olaf] Univ Appl Sci Eastern Switzerland HSR FHO, Oberseestr 10, CH-8640 Rapperswil, Switzerland",,"Unlike code refactoring of programs, architectural refactoring of systems is not commonly practiced yet. However, legacy systems typically have to be refactored when migrating them to the cloud; otherwise, these systems may run in the cloud, but cannot fully benefit from cloud properties such as elasticity. One reason for the lack of adoption of architectural refactoring is that many of the involved artefacts are intangible-architectural refactoring therefore is harder to grasp than code refactoring. To overcome this inhibitor, we take a task-centric view on the subject and introduce an architectural refactoring template that highlights the architectural decisions to be revisited when refactoring application architectures for the cloud; in this approach, architectural smells are derived from quality stories. We also present a number of common architectural refactorings and evaluate existing patterns regarding their cloud affinity. The final contribution of this paper is the identification of an initial catalog of architectural refactorings for cloud application design. This refactoring catalog was compiled from the cloud patterns literature as well as project experiences. Cloud knowledge and supporting templates have been validated via action research and implementation in cooperation with practitioners.",Architectural decisions; Architectural patterns; Cloud computing; Knowledge management; Reengineering; Refactoring; Software evolution and Maintenance,,Architectural decisions;Architectural patterns;Cloud computing;Knowledge management;Reengineering;Refactoring;Software evolution and Maintenance,ozimmerm@hsr.ch,,"SACHSENPLATZ 4-6, PO BOX 89, A-1201 WIEN, AUSTRIA",9th Advanced Summer School on Service-Oriented Computing (SummerSOC),"Hersonissos, GREECE","JUN 28-JUL 03, 2015",SPRINGER WIEN,0010-485X,,,,English,COMPUTING,Article; Proceedings Paper,WoS,Computer Science,WOS:000393699000002,2-s2.0-84992038044,Switzerland,hsr.ch,Univ Appl Sci Eastern Switzerland HSR FHO,"Univ Appl Sci Eastern Switzerland HSR FHO, Switzerland","Zimmermann, Olaf"
"Butler, G.",Architectural refactoring in framework evolution: A case study,2002,"GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING 2002, PROCEEDINGS",2487,,,128,139,12,1,,,"Concordia Univ, Dept Comp Sci, Montreal, PQ H3G 1M8, Canada",,"The Know-It-All Project is investigating methodologies for the development, application, and evolution of frameworks. A concrete framework for database management systems is being developed as a case study for the methodology research. The methodology revolves around a set of models for the domain, the functionality, the architecture, the design, and the code. These models reflect the common and variable features of the domain. Refactoring of source code has been studied as a preliminary step in the evolution of object-oriented software. In cascaded refactoring, we view framework evolution as a two-step process: refactoring and extension. The refactoring step is a set of refactorings, one for each model. The refactorings chosen for a model determine the rationale or constraints for the choice of refactorings of the next model. There are several issues with respect to architecture that we have encountered and are exploring. These include (1) the choice of models for the architecture; (2) the design of the architecture and its evaluation; (3) the evolution of the architecture by extending the concept of refactoring from source code to architecture; and (4) the modeling of variation in architectures across the product line. Here we focus on the refactoring of the architecture.",,,,gregb@cs.concordia.ca,"Batory, DS; Consel, C; Taha, W","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",1st International Conference on Generative Programming and Component Engineering,"PITTSBURGH, PA","OCT 06-08, 2002",SPRINGER-VERLAG BERLIN,0302-9743,3-540-44284-7,,,English,LECT NOTES COMPUT SC,Article; Proceedings Paper,WoS,Computer Science,WOS:000189149400008,2-s2.0-84937434936,Canada,cs.concordia.ca,Dept Comp Sci,"Dept Comp Sci, Canada","Butler, G"
"Raveendra Kumar M., Hari Kumar R.",Architectural refactoring of a mission critical integration application - A case study,2011,"Proceedings of the 4th India Software Engineering Conference 2011, ISEC'11",,,,77,83,,1,10.1145/1953355.1953365,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79953888381&doi=10.1145%2f1953355.1953365&partnerID=40&md5=2e41c2126a37d1cafb9792d40727df9b,"Tata Consultancy Services, Bangalore, India","Raveendra Kumar, M., Tata Consultancy Services, Bangalore, India; Hari Kumar, R., Tata Consultancy Services, Bangalore, India","Architecture refactoring can be thought of as a process of changing the architecture of an existing application without altering the functional behavior. It is to improve the operational and developmental quality attributes such as performance, stability, complexity and maintainability. Due to changing business expectations, as well as runtime environments, architecture refactoring may need to be done incrementally, over multiple software release cycles. In this industry experience report we present an architectural refactoring of a mission critical integration application, after it was originally implemented. We discuss the drivers behind the refactoring and the approach. Initial results from the refactoring show significant improvement of stability and throughput of the system. We also present recommendations on architectural refactoring, and discuss the importance of key performance indicators that drive architecture refactoring.",Architecture; Refactoring; Software maintenance,Functional behaviors; Industry experience; Integration application; Key performance indicators; Mission critical; Quality attributes; Refactoring; Refactorings; Runtime environments; Software maintenance; Benchmarking; Maintainability; Software engineering; Space shuttles; Computer software maintenance,Architecture;Refactoring;Software maintenance;Functional behaviors;Industry experience;Integration application;Key performance indicators;Mission critical;Quality attributes;Refactorings;Runtime environments;Benchmarking;Maintainability;Software engineering;Space shuttles;Computer software maintenance,"Raveendra Kumar, M.; Tata Consultancy Services, Bangalore, India; email: Raveendra.Kumar@tcs.com",,,,,,,,9781450305594,,,English,"Proc. India Softw. Eng. Conf., ISEC",Conference Paper,Scopus,,2-s2.0-79953888381,,India,tcs.com,,,"Raveendra Kumar M., Hari Kumar R."
"Ksenzov, M.V.",Architectural refactoring of corporate program systems,2006,PROGRAMMING AND COMPUTER SOFTWARE,32,1,,31,43,13,0,10.1134/S036176880601004X,,"Russian Acad Sci, Inst Syst Programming, Moscow 109004, Russia",,"This paper is devoted to the maintenance and improvement of inherited software. A technique of iterative transformations of the software architecture (also known as architectural refactoring) is used as a key organizing principle of the software maintenance and improvement. Basic problems associated with scaling this technique and methods for solving them are considered. Particular emphasis is placed on corporate software, specific features of its architecture, and on the application of the architectural refactoring to this class of software.",,,,misha@ispras.ru,,"PLEIADES PUBLISHING INC, MOSCOW, 00000, RUSSIA",,,,PLEIADES PUBLISHING INC,0361-7688,,,,English,PROGRAM COMPUT SOFT+,Article,WoS,Computer Science,WOS:000235586300004,2-s2.0-33644701983,Russian Federation,ispras.ru,Inst Syst Programming,"Inst Syst Programming, Russian Federation","Ksenzov, MV"
"Cheng, S.Y., Wawrzynek, J.",Architectural Synthesis of Computational Pipelines with Decoupled Memory Access,2014,PROCEEDINGS OF THE 2014 INTERNATIONAL CONFERENCE ON FIELD-PROGRAMMABLE TECHNOLOGY (FPT),,,,83,90,8,3,,,"[Cheng, Shaoyi; Wawrzynek, John] Univ Calif Berkeley, Dept EECS, Berkeley, CA 94720 USA",,"As high level synthesis (HLS) moves towards mainstream adoption among FPGA designers, it has proven to be an effective method for rapid hardware generation. However, in the context of offloading compute intensive software kernels to FPGA accelerators, current HLS tools do not always take full advantage of the hardware platforms. In this paper, we present an automatic flow to refactor and restructure processor-centric software implementations, making them better suited for FPGA platforms. The methodology generates pipelines that decouple memory operations and data access from computation. The resulting pipelines have much better throughput due to their efficient use of the memory bandwidth and improved tolerance to data access latency. The methodology complements existing work in high-level synthesis, easing the creation of heterogeneous systems with high performance accelerators and general purpose processors. With this approach, for a set of non-regular algorithm kernels written in C, a performance improvement of 3.3 to 9.1x is observed over direct C-to-Hardware mapping using a state-of-the-art HLS tool.",FPGA; Hardware Acceleration; High-level Synthesis; Memory-level Parallelism; Pipeline Parallelism; Memory Sub-system Optimization,PROCESS NETWORKS,FPGA;Hardware Acceleration;High-level Synthesis;Memory-level Parallelism;Pipeline Parallelism;Memory Sub-system Optimization;PROCESS NETWORKS,sh_cheng@berkeley.edu; johnw@eecs.berkeley.edu,"Chen, JL; Yin, WB; Shibata, Y; Wang, LL; So, HKH; Ma, YC","345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Field Programmable Technology,"Shanghai, PEOPLES R CHINA","DEC 10-12, 2014",IEEE,,978-1-4799-6245-7,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000380460100014,,United States,berkeley.edu,Univ Calif Berkeley,"Univ Calif Berkeley, United States","Cheng, Shaoyi; Wawrzynek, John"
"Avgeriou P., Zdun U., Borne I.",Architecture-centric evolution: New issues and trends,2007,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),4379 LNCS,,,97,105,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-38049144341&partnerID=40&md5=0dc6b3c91528d690268a58ece0323e96,"Department of Mathematics and Computing Science, University of Groningen, Netherlands; Distributed Systems Group, Vienna University of Technology, Austria; VALORIA Laboratory, University of South-Brittany, France","Avgeriou, P., Department of Mathematics and Computing Science, University of Groningen, Netherlands; Zdun, U., Distributed Systems Group, Vienna University of Technology, Austria; Borne, I., VALORIA Laboratory, University of South-Brittany, France","Software evolution has largely been focused on low-level implementation artefacts through refactoring techniques rather than the architectural level. However code-centric evolution techniques have not managed to effectively solve the problems that software evolution entails. Instead a paradigm shift is emerging, where the evolution approaches put software architecture on the spotlight. This shift focuses on effectively documenting and modifying the architectural design decisions during system evolution, while synchronizing them with both the requirements and the implementation. The second workshop on the theme of Architecture-Centric Evolution attempted to explore the issues that such evolution approaches are dealing with, as well as the trends that emerge in this area. The workshop delved into this field, by presenting the latest research advances and by facilitating discussions between experts. © Springer-Verlag Berlin Heidelberg 2007.",,Computer aided software engineering; Research and development management; Software architecture; Architecture-Centric Evolution; Code-centric evolution techniques; Software evolution; Object oriented programming,Computer aided software engineering;Research and development management;Software architecture;Architecture-Centric Evolution;Code-centric evolution techniques;Software evolution;Object oriented programming,"Avgeriou, P.; Department of Mathematics and Computing Science, University of GroningenNetherlands; email: paris@cs.rug.nl",,,,,,,03029743,9783540717720,,,English,Lect. Notes Comput. Sci.,Conference Paper,Scopus,,2-s2.0-38049144341,,Netherlands;Austria;France,cs.rug.nl,,,"Avgeriou P., Zdun U., Borne I."
"Avgeriou, P., Zdun, U., Borne, I.",Architecture-centric evolution: New issues and trends - Report on the workshop ACE at ECOOP'06,2007,OBJECT-ORIENTED TECHNOLOGY: ECOOP 2006 WORKSHOP READER,4379,,,97,+,2,0,,,"Univ Groningen, Dept Math & Comp Sci, Groningen, Netherlands; [Zdun, Uwe] Vienna Univ Technol, Distributed Syst Grp, A-1040 Vienna, Austria; [Borne, Isabelle] Univ South-Brittany, VALORIA Lab, Lorient, France",,"Software evolution has largely been focused on low-level implementation artefacts through refactoring techniques rather than the architectural level. However code-centric evolution techniques have not managed to effectively solve the problems that software evolution entails. Instead a paradigm shift is emerging, where the evolution approaches put software architecture on the spotlight. This shift focuses on effectively documenting and modifying the architectural design decisions during system evolution, while synchronizing them with both the requirements and the implementation. The second workshop on the theme of Architecture-Centric Evolution attempted to explore the issues that such evolution approaches are dealing with, as well as the trends that emerge in this area. The workshop delved into this field, by presenting the latest research advances and by facilitating discussions between experts.",,,,paris@cs.rug.nl; zdun@acm.org; Isabelle.Borne@univ-ubs.fr,"Sudholt, M; Consel, C","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",ECOOP 2006 Workshop,"Nantes, FRANCE","JUL 03-07, 2006",SPRINGER-VERLAG BERLIN,0302-9743,978-3-540-71772-0,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000246368100011,,Netherlands;Austria;France,cs.rug.nl,Dept Math & Comp Sci;Vienna Univ Technol;Univ South-Brittany,"Dept Math & Comp Sci, Netherlands;Vienna Univ Technol, Austria;Univ South-Brittany, France","Avgeriou, Paris; Zdun, Uwe; Borne, Isabelle"
"Ozkaya I., Wallin P., Axelsson J.",Architecture knowledge management during system evolution - Observations from practitioners,2010,Proceedings - International Conference on Software Engineering,,,,52,59,,5,10.1145/1833335.1833343,https://www.scopus.com/inward/record.uri?eid=2-s2.0-78649884682&doi=10.1145%2f1833335.1833343&partnerID=40&md5=c523601abe2f5c2536c01f26cb965e56,"SEI, CMU, 4500 Fifth Ave., Pittsburgh, PA 15221, United States; Mälardalen University, P.O Box 883, SE-721 23, Västerås, Sweden","Ozkaya, I., SEI, CMU, 4500 Fifth Ave., Pittsburgh, PA 15221, United States; Wallin, P., Mälardalen University, P.O Box 883, SE-721 23, Västerås, Sweden; Axelsson, J., Mälardalen University, P.O Box 883, SE-721 23, Västerås, Sweden","It is widely accepted that awareness of architectural decisions enables better management and planning of system evolution, refactoring, and modernization efforts. In this paper we report data from interviews with software architects about how practitioners utilize architecture during system evolution. Our results show, despite the widely shared view that long-lived systems are better off with strong architectures; basic architecturecentric practices are not followed systematically. The key gap we observe is in correct and timely communication of architectural issues. This overall finding is not surprising. However, our data also contributes to how architecture knowledge management activities can be focused for most benefit throughout a system's lifespan. While the often-referenced problem is lack of time spent on documentation and design practices, our interviews show that lack of quality attribute reasoning early on, and during the lifespan of the system is a key contributor to failing to use architecture knowledge effectively during evolution. Copyright © 2010 ACM.",Architecture knowledge management; Architecture-centric practices; Software architecture; System evolution,Architectural decision; Design practice; Knowledge management activities; Life span; Long-lived systems; Quality attributes; Refactorings; Software architects; System evolution; Time spent; Knowledge management; Planning; Technical presentations; Software architecture,Architecture knowledge management;Architecture-centric practices;Software architecture;System evolution;Architectural decision;Design practice;Knowledge management activities;Life span;Long-lived systems;Quality attributes;Refactorings;Software architects;Time spent;Knowledge management;Planning;Technical presentations,"Ozkaya, I.; SEI, CMU, 4500 Fifth Ave., Pittsburgh, PA 15221, United States; email: ozkaya@sei.cmu.edu",,,,,,,02705257,9781605589671,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-78649884682,,United States;Sweden,sei.cmu.edu,,,"Ozkaya I., Wallin P., Axelsson J."
"Zeng, K.P., Huss, S.A.",Architecture refinements by code refactoring of behavioral VHDL-AMS models,2006,"2006 IEEE INTERNATIONAL SYMPOSIUM ON CIRCUITS AND SYSTEMS, VOLS 1-11, PROCEEDINGS",,,,1475,+,2,0,,,"[Zeng, Kaiping; Huss, Sorin A.] Tech Univ Darmstadt, Dept Comp Sci, Integrated Circuits & Syst Lab, Hochschulstrasse 10, D-64289 Darmstadt, Germany",,"This paper presents an automatic structure synthesis technique by partitioning the system representation, which consists of interconnected analog and mixed-signal behavioral models coded in VHDL-AMS. The proposed model code refining methodology restructures, refines, and simplifies behavioral models by means of code transformations of given abstract models. The fundamental approach for these transforms is code refactoring - an approach taken from software engineering and adjusted to the requirements of analog circuit synthesis. Through code refactoring one improves the comprehensibility, expandability, and reusability of a behavioral block model and restructures the model such that subsequent circuit synthesis steps may produce adequate structural representations of the intended behavior. Application examples demonstrate the feasibility of this novel approach to architecture synthesis.",,,,zeng@vlsi.informatik.tu-darmstadt.de,,"345 E 47TH ST, NEW YORK, NY 10017 USA",IEEE International Symposium on Circuits and Systems,"Kos, GREECE","MAY 21-24, 2006",IEEE,0271-4302,978-0-7803-9389-9,,,English,IEEE INT SYMP CIRC S,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000245413501238,,Germany,vlsi.informatik.tu-darmstadt.de,Tech Univ Darmstadt,"Tech Univ Darmstadt, Germany","Zeng, Kaiping; Huss, Sorin A."
"Avgeriou P., Stal M., Hilliard R.",Architecture sustainability,2013,IEEE Software,30,6, 6648570,40,44,,13,10.1109/MS.2013.120,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84887708399&doi=10.1109%2fMS.2013.120&partnerID=40&md5=eb767e7d5f29f8c89576451f98e9d5de,"University of Groningen, Netherlands; Siemens AG, Netherlands; Freelance Software Systems Architect, Netherlands","Avgeriou, P., University of Groningen, Netherlands; Stal, M., Siemens AG, Netherlands; Hilliard, R., Freelance Software Systems Architect, Netherlands","Software architecture is the foundation of software system development, encompassing a system's architects' and stakeholders' strategic decisions. A special issue of IEEE Software is intended to raise awareness of architecture sustainability issues and increase interest and work in the area. The first Web extra at http://youtu.be/wUGHvocfix0 is an audio interview in which Davide Falessi speaks with guest editors Paris Avgeriou and Rich Hilliard about the importance of architecture sustainability including the three types of approaches they distinguish for handling change systematically, listed in an order of increasing severity: refactoring, renovating, and rearchitecting. The second Web extra at http://youtu.be/T-neSlUhAv0 is an audio interview in which Brian Brannon speaks with guest editor Michael Stal about his experiences with architecture sustainability as a principal engineer at Siemens AG's Corporate Research and Technology division. © 2013 IEEE.",architecture sustainability; software,Corporate research; Refactorings; Siemens ag; Software systems; Strategic decisions; Sustainability issues; Computer software; Software engineering; Sustainable development,architecture sustainability;software;Corporate research;Refactorings;Siemens ag;Software systems;Strategic decisions;Sustainability issues;Computer software;Software engineering;Sustainable development,University of GroningenNetherlands,,,,,,,07407459,,IESOE,,English,IEEE Software,Article,Scopus,,2-s2.0-84887708399,,Netherlands,No email,,,"Avgeriou P., Stal M., Hilliard R."
"Olbrich, S.M., Cruzes, D.S., Sjoberg, D.I.K.",Are all Code Smells Harmful? A Study of God Classes and Brain Classes in the Evolution of three Open Source Systems,2010,2010 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE,,,,,,10,51,,,"[Olbrich, Steffen M.] Fraunhofer IESE, Kaiserslautern, Germany; [Cruzes, Daniela S.] Norwegian Univ Sci & Technol, Dept Comp & Informat Engn, Trondheim, Norway; [Sjoberg, Dag I. K.] Univ Oslo, Dept Informat, Oslo, Norway",,"Code smells are particular patterns in object-oriented systems that are perceived to lead to difficulties in the maintenance of such systems. It is held that to improve maintainability, code smells should be eliminated by refactoring. It is claimed that classes that are involved in certain code smells are liable to be changed more frequently and have more defects than other classes in the code. We investigated the extent to which this claim is true for God Classes and Brain Classes, with and without normalizing the effects with respect to the class size. We analyzed historical data from 7 to 10 years of the development of three open-source software systems. The results show that God and Brain Classes were changed more frequently and contained more defects than other kinds of class. However, when we normalized the measured effects with respect to size, then God and Brain Classes were less subject to change and had fewer defects than other classes. Hence, under the assumption that God and Brain Classes contain on average as much functionality per line of code as other classes, the presence of God and Brain Classes is not necessarily harmful; in fact, such classes may be an efficient way of organizing code.",Code smells; detection strategies; change frequency; defects; software evolution; open source,BAD SMELLS; METRICS; IMPACT,Code smells;detection strategies;change frequency;defects;software evolution;open source;BAD SMELLS;METRICS;IMPACT,steffen.olbrich@iese.fraunhofer.de; dcruzes@idi.ntnu.no; dagsj@ifi.uio.no,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Software Maintenance,"Timisoara, ROMANIA","SEP 12-18, 2010",IEEE,1063-6773,978-1-4244-8629-8,,,English,PROC IEEE INT CONF S,Proceedings Paper,WoS,Computer Science,WOS:000287356400020,2-s2.0-78650166517,Germany;Norway,iese.fraunhofer.de,Fraunhofer IESE;Norwegian Univ Sci & Technol;Univ Oslo,"Fraunhofer IESE, Germany;Norwegian Univ Sci & Technol, Norway;Univ Oslo, Norway","Olbrich, Steffen M.; Cruzes, Daniela S.; Sjoberg, Dag I. K."
"Pellegrini, L., Lenarduzzi, V.",Are Code smells the root cause of faults? A continuous experimentation approach,2018,19TH INTERNATIONAL CONFERENCE ON AGILE SOFTWARE DEVELOPMENT (XP '18),,,,,,3,0,10.1145/3234152.3234153,,"[Pellegrini, Luca] Free Univ Bozen Bolzano, Bolzano, Italy; [Lenarduzzi, Valentina] Tampere Univ Technol, Tampere, Finland",,"Code Smells are quite a good instrument to evaluate code's quality, even if they provide a general analysis: no one can assure that determined code smells are really responsible for faults. More and more software companies pay attention to produce qualitative software, in order to reduce the number of bugs. But how can they know, which code-refactoring really can decrease the faults' number? In this work, we aim to find out which code smells are really the cause of bugs and, through a continuous monitoring system, continuously propose companies code refactoring, with the aim of reduce drastically the number of bugs.",Code Smells; Fault; Continuous Experimentation,,Code Smells;Fault;Continuous Experimentation,luca.pellegrini@stu-inf.unibz.it; valentina.lenarduzzi@tut.fi,"Wagner, S; Hoda, R; Aguiar, A","1515 BROADWAY, NEW YORK, NY 10036-9998 USA",19th International Conference on Agile Software Development (XP),"Univ Porto, Fac Engn, Porto, PORTUGAL","MAY 21-25, 2018",ASSOC COMPUTING MACHINERY,,978-1-4503-6422-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000474466600028,2-s2.0-85065792313,Italy;Finland,stu-inf.unibz.it,Free Univ Bozen Bolzano;Tampere Univ Technol,"Free Univ Bozen Bolzano, Italy;Tampere Univ Technol, Finland","Pellegrini, Luca; Lenarduzzi, Valentina"
"Terra, R., Valente, M.T., Czarnecki, K., Bigonha, R.S.",A recommendation system for repairing violations detected by static architecture conformance checking,2015,SOFTWARE-PRACTICE & EXPERIENCE,45,3,,315,342,28,12,10.1002/spe.2228,,"[Terra, Ricardo; Valente, Marco Tulio; Bigonha, Roberto S.] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil; [Terra, Ricardo; Czarnecki, Krzysztof] Univ Waterloo, Waterloo, ON N2L 3G1, Canada",,"This paper describes a recommendation system that provides refactoring guidelines for maintainers when tackling architectural erosion. The paper formalizes 32refactoring recommendations to repair violations raised by static architecture conformance checking approaches; it describes a toolcalled ArchFixthat triggers the proposed recommendations; and it evaluates the application of this tool in two industrial-strength systems. For the first systema 21 KLOC open-source strategic management systemour approach has indicated correct refactoring recommendations for 31 out of 41 violations detected as the result of an architecture conformance process. For the second systema 728 KLOC customer care system used by a major telecommunication companyour approach has triggered correct recommendations for 624 out of 787 violations, as asserted by the system's architect. Moreover, the architects have scored 82% of these recommendations as having moderate or major complexity. Copyright (c) 2013 John Wiley & Sons, Ltd.",software architecture; refactoring; recommendation system,SOFTWARE; MODULARIZATION; DESIGN,software architecture;refactoring;recommendation system;SOFTWARE;MODULARIZATION;DESIGN,terra@dcc.ufmg.br,,"111 RIVER ST, HOBOKEN 07030-5774, NJ USA",,,,WILEY,0038-0644,,,,English,SOFTWARE PRACT EXPER,Article,WoS,Computer Science,WOS:000348429500002,2-s2.0-84920884159,Brazil;Canada,dcc.ufmg.br,Univ Fed Minas Gerais;Univ Waterloo,"Univ Fed Minas Gerais, Brazil;Univ Waterloo, Canada","Terra, Ricardo; Valente, Marco Tulio; Czarnecki, Krzysztof; Bigonha, Roberto S."
"Aslan, F.",A Refactorable Object-Relational Mapping,2012,"ICECCO'12: 9TH INTERNATIONAL CONFERENCE ON ELECTRONICS, COMPUTER AND COMPUTATION",,,,284,287,4,0,,,"[Aslan, Fatih] Yalova Univ, Comp Engn, Yalova, Turkey",,"Object-Relational (O/R) mapping techniques have been in use widely and many tools are available. However, they do not support refactorings. Some basic procedures can be generated to enable refactorings happening on source code and consequently database in order to keep the consistency between objects in the programming environment and related tables in the database. Particularly, the constraints being the most important aspects of relational databases in terms of defining relationships and complicating refactorings need to be meticulously handled. To that end, a novel O/R mapping is successfully implemented and a refactoring, Move Field, is performed with a clear example.",Object/Relatioal mapping; refactoring; agile programming; persistent data,,Object/Relatioal mapping;refactoring;agile programming;persistent data,fatihaslan82@gmail.com,"Kiray, V; Ozcan, R; Malas, T","KECIOREN, ANKARA, 06010, TURKEY",9th International Conference on Electronics Computer and Computation (ICECCO 2012),"Ankara, TURKEY","NOV 01-03, 2012",TURGUT OZAL UNIV,,978-605-87394-6-8,,,English,,Proceedings Paper,WoS,Computer Science; Engineering; Telecommunications,WOS:000396806300067,,Turkey,gmail.com,Yalova Univ,"Yalova Univ, Turkey","Aslan, Fatih"
"Bukowitz Beluzzo L., Nasser Matos S., Henrique Pacher T.",A refactoring architecture for measuring and identifying spots of design patterns insertion in source code,2019,ICSOFT 2018 - Proceedings of the 13th International Conference on Software Technologies,,,,632,639,,0,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85071516266&partnerID=40&md5=f823c06957e4a40d15935f124dce4599,"UTFPR, Ponta Grossa, Parana, Brazil","Bukowitz Beluzzo, L., UTFPR, Ponta Grossa, Parana, Brazil; Nasser Matos, S., UTFPR, Ponta Grossa, Parana, Brazil; Henrique Pacher, T., UTFPR, Ponta Grossa, Parana, Brazil","This work presents an architecture for detecting insertion spots of design patterns in an object-oriented source code. The proposed architecture contains a Service that implements Detection Methods (DMS) present in the literature such as identification of precursors, prolog rules and facts, among others. The DMS notifies the Metrics Service (MS) which patterns can be used. The evaluation of the application of the patterns undertaken by the MS is performed by means of quality metrics such as maintainability, flexibility, and so forth. The MS notifies the Client App (CA) of the advantages and disadvantages of using the eligible patterns. The CA interacts with the user to retrieve decisions about which changes to perform in source code according to the design pattern real benefit and notifies the Applier Service (AS), that applies the patterns in the source code. The difference between the proposed architecture and the literature is that it allows a thorough interaction with the user and it creates an extendable environment to cover several pattern detection/insertion methods. The architecture allows automated support to users engaged in the refactoring process based on design patterns. Copyright © 2018 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved",Design Patterns; Refactoring; Software Architecture,Codes (symbols); Computer programming languages; Design; Object oriented programming; Software architecture; Automated support; Design Patterns; Detection methods; Object oriented; Pattern detection; Proposed architectures; Quality metrics; Refactorings; Pattern recognition,Design Patterns;Refactoring;Software Architecture;Codes (symbols);Computer programming languages;Design;Object oriented programming;Automated support;Detection methods;Object oriented;Pattern detection;Proposed architectures;Quality metrics;Refactorings;Pattern recognition,,Maciaszek L.Maciaszek L.van Sinderen M.,,,,,SciTePress,,9789897583209,,,English,ICSOFT - Proc. Int. Conf. Softw. Technol.,Conference Paper,Scopus,,2-s2.0-85071516266,,Brazil,No email,,,"Bukowitz Beluzzo L., Nasser Matos S., Henrique Pacher T."
"Alves, E.L.G., Machado, P.D.L., Massoni, T., Santos, S.T.C.",A Refactoring-Based Approach for Test Case Selection and Prioritization,2013,2013 8TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST (AST),,,,93,99,7,8,,,"[Alves, Everton L. G.; Machado, Patricia D. L.; Massoni, Tiago; Santos, Samuel T. C.] Univ Fed Campina Grande, SPLab Software Practices Lab, Campina Grande, Brazil",,"Refactoring edits, commonly applied during software development, may introduce faults in a previously-stable code. Therefore, regression testing is usually applied to check whether the code maintains its previous behavior. In order to avoid rerunning the whole regression suite, test case prioritization techniques have been developed to order test cases for earlier achievement of a given goal, for instance, improving the rate of fault detection during regression testing execution. However, as current techniques are usually general purpose, they may not be effective for early detection of refactoring faults. In this paper, we propose a refactoring-based approach for selecting and prioritizing regression test cases, which specializes selection/prioritization tasks according to the type of edit made. The approach has been evaluated through a case study that compares it to well-known prioritization techniques by using a real open-source Java system. This case study indicates that the approach can be more suitable for early detection of refactoring faults when comparing to the other prioritization techniques.",,,,everton@copin.ufcg.edu.br; patricia@computacao.ufcg.edu.br; massoni@computacao.ufcg.edu.br; samuel.santos@ccc.ufcg.edu.br,,"345 E 47TH ST, NEW YORK, NY 10017 USA",8th International Workshop on Automation of Software Test (AST),"San Francisco, CA","MAY 18-19, 2013",IEEE,,978-1-4673-6161-3,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000332877400016,2-s2.0-84885003347,Brazil,copin.ufcg.edu.br,Univ Fed Campina Grande,"Univ Fed Campina Grande, Brazil","Alves, Everton L. G.; Machado, Patricia D. L.; Massoni, Tiago; Santos, Samuel T. C."
"Bastide, G.",A refactoring-based tool for software component adaptation,2006,"10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS",,,,313,+,2,1,,,"[Bastide, Gautier] Ecole Mines Douai, 941 Rue Charles Bourseul, F-59508 Douai, France",,"Adapting software components usable by a particular application is a crucial issue in software component based technology. In fact, software components can be used in contexts that can be different from the context assumptions made by the component designers. We present in this paper a tool aiming at adapting software component structure. Among the motivations of this kind of adaptation, we note its possible application to prepare a flexible deployment of software components according to the available resources (CPU, memory). Our adaptation process is based on refactoring and fragmentation of component source code. To support this structural adaptation technique, we developed an adaptation process which we have experimented using the Java framework of the Fractal component model.",,,,bastide@ensm-douai.fr,,"10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1264 USA",10th European Conference on Software Maintenance and Reengineering,"Bari, ITALY","MAR 22-24, 2006",IEEE COMPUTER SOC,,0-7695-2536-9,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000237194400034,2-s2.0-46149106168,France,ensm-douai.fr,Ecole Mines Douai,"Ecole Mines Douai, France","Bastide, Gautier"
"Teixeira, J.E., Neto, H.E.V.T., de Faveri, C., Saccol, D.D., Vizzotto, J.K., Piveta, E.K.",A Refactoring Catalog for Lambda Expressions in Java,2019,INTERNATIONAL JOURNAL OF SOFTWARE ENGINEERING AND KNOWLEDGE ENGINEERING,29,6,,791,818,28,0,10.1142/S021819401950027X,,"[Teixeira Junior, Janio Elias] Univ Estadual Tocantins, 108 Sul Alameda 11 Lote 03, BR-77020122 Palmas, TO, Brazil; [Valdivieso Tobar Neto, Heres Edison] Secretaria Fazenda Estado Tocantins, 103 Norte Rua 05 Lote 02, BR-77001020 Palmas, TO, Brazil; [de Faveri, Cristiano] Univ Nova Lisboa, Fac Sci & Technol, NOVA LINCS, Dept Comp Sci, P-2829516 Caparica, Portugal; [Saccol, Deise de Brum; Vizzotto, Juliana Kaizer; Piveta, Eduardo Kessler] Univ Fed Santa Maria, Av Roraima 1000, BR-97105900 Santa Maria, RS, Brazil",,"Language evolution provides room for improvements in existing programs. Developers can update a system design by using new language features in existing code bases. In this sense, we present a catalog with a set of refactorings to deal with lambda expressions in Java. A case study evaluates the applicability of the proposed refactorings in a set of open source projects, using an Eclipse-based tool for searching for refactoring opportunities dealing with lambda expressions.",Refactoring; closures; lambda expressions; Java,,Refactoring;closures;lambda expressions;Java,janiojunior@gmail.com; heresneto@gmail.com; c.faveri@campus.fct.unl.br; deise@inf.ufsm.br; juvizzotto@inf.ufsm.br; piveta@inf.ufsm.br,,"5 TOH TUCK LINK, SINGAPORE 596224, SINGAPORE",,,,WORLD SCIENTIFIC PUBL CO PTE LTD,0218-1940,,,,English,INT J SOFTW ENG KNOW,Article,WoS,Computer Science; Engineering,WOS:000472796800003,2-s2.0-85068043422,Brazil;Portugal,gmail.com,Univ Estadual Tocantins;Secretaria Fazenda Estado Tocantins;Univ Nova Lisboa;Univ Fed Santa Maria,"Univ Estadual Tocantins, Brazil;Secretaria Fazenda Estado Tocantins, Brazil;Univ Nova Lisboa, Portugal;Univ Fed Santa Maria, Brazil","Teixeira Junior, Janio Elias; Valdivieso Tobar Neto, Heres Edison; de Faveri, Cristiano; Saccol, Deise de Brum; Vizzotto, Juliana Kaizer; Piveta, Eduardo Kessler"
"Sherwany, A., Zaza, N., Nystrom, N.",A Refactoring Library for Scala Compiler Extensions,2015,COMPILER CONSTRUCTION (CC 2015),9031,,,31,48,18,0,10.1007/978-3-662-46663-6_2,,"[Sherwany, Amanj; Zaza, Nosheen; Nystrom, Nathaniel] USI, Fac Informat, Lugano, Switzerland",,"Compiler plugins enable languages to be extended with new functionality by adding compiler passes that perform additional static checking, code generation, or code transformations. However, compiler plugins are often difficult to build. A plugin can perform arbitrary code transformations, easily allowing a developer to generate incorrect code. Moreover, the base compiler assumes many complex, sometimes undocumented invariants, requiring plugin developers to acquire intimate knowledge of the design and implementation of the compiler. To address these issues in the context of the Scala compiler plugin framework, we introduce Piuma. Piuma is a library that provides, first, an API to perform many common refactoring tasks needed by plugin writers, and, second, a DSL to eliminate much of the boilerplate code required for plugin development. We demonstrate the usefulness of our library by implementing five diverse compiler plugins. We show that, using Piuma, plugins require less code and are easier to understand than plugins developed using the base Scala compiler plugin API.",Scala; compiler extensions; refactoring,,Scala;compiler extensions;refactoring,amanj.sherwany@usi.ch; nosheen.zaza@usi.ch; nate.nystrom@usi.ch,"Franke, B","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",24th International Conference on Compiler Construction (CC) held as Part of the European Joint Conferences on Theory and Practice of Software (EATPS),"London, ENGLAND","APR 10-18, 2015",SPRINGER-VERLAG BERLIN,0302-9743,978-3-662-46663-6; 978-3-662-46662-9,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science; Science & Technology - Other Topics,WOS:000362037000002,,Switzerland,usi.ch,USI,"USI, Switzerland","Sherwany, Amanj; Zaza, Nosheen; Nystrom, Nathaniel"
"Chang, F.C., Huang, H.C.",A refactoring method for cache-efficient swarm intelligence algorithms,2012,INFORMATION SCIENCES,192,,,39,49,11,61,10.1016/j.ins.2010.02.025,,"[Huang, Hsiang-Cheh] Natl Univ Kaohsiung, Dept Elect Engn, Kaohsiung, Taiwan; [Chang, Feng-Cheng] Tamkang Univ, Dept Innovat Informat & Technol, Taipei, Taiwan",,"With advances in hardware technology, conventional approaches to software development are not effective for developing efficient algorithms for run-time environments. The problem comes from the overly simplified hardware abstraction model in the software development procedure. The mismatch between the hypothetical hardware model and real hardware design should be compensated for in designing an efficient algorithm. In this paper, we focus on two schemes: one is the memory hierarchy, and the other is the algorithm design. Both the cache properties and the cache-aware development are investigated. We then propose a few simple guidelines for revising a developed algorithm in order to increase the utilization of the cache. To verify the effectiveness of the guidelines proposed, optimization techniques, including particle swarm optimization (PSO) and the genetic algorithm (GA), are employed. Simulation results demonstrate that the guidelines are potentially helpful for revising various algorithms. (C) 2010 Elsevier Inc. All rights reserved.",,OPTIMIZATION,OPTIMIZATION,135170@mail.tku.edu.tw; hch.nuk@gmail.com,,"360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA",,,,ELSEVIER SCIENCE INC,0020-0255,,,,English,INFORM SCIENCES,Article,WoS,Computer Science,WOS:000302511900004,2-s2.0-84863230634,Taiwan,mail.tku.edu.tw,Natl Univ Kaohsiung;Tamkang Univ,"Natl Univ Kaohsiung, Taiwan;Tamkang Univ, Taiwan","Chang, Feng-Cheng; Huang, Hsiang-Cheh"
"Damevski K., Muralimanohar M.",A refactoring tool to extract GPU kernels,2011,Proceedings - International Conference on Software Engineering,,,,29,32,,6,10.1145/1984732.1984739,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79959833156&doi=10.1145%2f1984732.1984739&partnerID=40&md5=a4494b692addd514d5bf6e8eff370a09,"Virginia State University, 1 Hayden Dr., Petersburg, VA 23806, United States","Damevski, K., Virginia State University, 1 Hayden Dr., Petersburg, VA 23806, United States; Muralimanohar, M., Virginia State University, 1 Hayden Dr., Petersburg, VA 23806, United States","Significant performance gains can be achieved by using hardware architectures that integrate GPUs with conventional CPUs to form a hybrid and highly parallel computational engine. However, programming these novel architectures is tedious and error prone, reducing their ease of acceptance in an even wider range of computationally intensive applications. In this paper we discuss a refactoring technique, called Extract Kernel that transforms a loop written in C into a parallel function that uses NVIDIA's CUDA framework to execute on a GPU. The selected approach and the challenges encountered are described, as well as some early results that demonstrate the potential of this refactoring. © 2011 ACM.",cuda; gpu; refactoring,cuda; Error prones; gpu; Hardware architecture; Novel architecture; Parallel functions; Performance Gain; Refactoring tools; Refactorings; Software engineering; Program processors,cuda;gpu;refactoring;Error prones;Hardware architecture;Novel architecture;Parallel functions;Performance Gain;Refactoring tools;Refactorings;Software engineering;Program processors,"Damevski, K.; Virginia State University, 1 Hayden Dr., Petersburg, VA 23806, United States; email: kdamevski@vsu.edu",,,,,,,02705257,9781450305792,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-79959833156,,United States,vsu.edu,,,"Damevski K., Muralimanohar M."
"Guerra, E., Alves, F., Kulesza, U., Fernandes, C.",A reference architecture for organizing the internal structure of metadata-based frameworks,2013,JOURNAL OF SYSTEMS AND SOFTWARE,86,5,,1239,1256,18,4,10.1016/j.jss.2012.12.024,,"[Guerra, Eduardo; Fernandes, Clovis] Aeronaut Inst Technol, BR-12228900 Sao Jose Dos Campos, SP, Brazil; [Alves, Felipe; Kulesza, Uira] Univ Fed Rio Grande do Norte, BR-59078970 Natal, RN, Brazil",,"Metadata-based frameworks enable behavior adaptation through the configuration of custom metadata in application classes. Most of the current frameworks used in the industry for building enterprise applications adopt this approach. However, there is a lack of proven techniques for building such kind of framework, allowing for a better organization of its internal structure. In this paper we propose a pattern language and a reference architecture for better organizing the internal structure of metadata-based frameworks, which were defined as a result of a pattern mining process applied to a set of existing open source frameworks. To evaluate the resulting structure generated by the reference architecture application, a case study examined three frameworks developed according to the proposed reference architecture, each one referring to a distinct application domain. The assessment was conducted by using a metrics suite, metrics thresholds derived from a large set of open source metadata-based frameworks, a process for automatic detection of design disharmonies and manual source code analysis. As a result of this study, framework developers can understand and use the proposed reference architecture to develop new frameworks and refactor existing ones. The assessment revealed that the organization provided by the reference architecture is suitable for metadata-based frameworks, helping in the division of responsibility and functionality among their classes. (C) 2012 Elsevier Inc. All rights reserved.",Framework; Metadata; Metadata-based framework; Software architecture; Reference architecture; Pattern language,,Framework;Metadata;Metadata-based framework;Software architecture;Reference architecture;Pattern language,guerraem@gmail.com; felipe_app@yahoo.com.br; uirakulesza@gmail.com; clovistf@uol.com.br,,"360 PARK AVE SOUTH, NEW YORK, NY 10010-1710 USA",,,,ELSEVIER SCIENCE INC,0164-1212,,,,English,J SYST SOFTWARE,Article,WoS,Computer Science,WOS:000317322400006,,Brazil,gmail.com,Aeronaut Inst Technol;Univ Fed Rio Grande do Norte,"Aeronaut Inst Technol, Brazil;Univ Fed Rio Grande do Norte, Brazil","Guerra, Eduardo; Alves, Felipe; Kulesza, Uira; Fernandes, Clovis"
"Cojocar G.S., Guran A.M.",Are monitoring crosscutting concerns really refactorable into aspects? An empirical study,2019,"Proceedings - 2019 IEEE/ACM 3rd International Workshop on Refactoring, IWOR 2019",,, 8844416,59,62,,0,10.1109/IWoR.2019.00018,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85073415740&doi=10.1109%2fIWoR.2019.00018&partnerID=40&md5=bc1ed6bb2a7e1a01effa7d88f72bf8c1,"Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Cojocar, G.-S., Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania; Guran, A.-M., Department of Computer Science, Babeş-Bolyai University, Cluj-Napoca, Romania","Monitoring concerns' implementation crosscuts a software's system core concerns' implementation, leading to difficult to maintain and understand source code. Other paradigms have been proposed for crosscutting concerns implementation that should improve the understandability and maintainability of the software system. However, can we easily refactor monitoring concerns implementation in order to implement them using these paradigms? How will the new implementation affect the software system's source code? In this paper we present our study of monitoring concerns implementation in Java-based software systems, from the point of view of refactoring into aspects. We discuss the challenges that have to be overcome and how will the refactoring impact important characteristics of the overall system. © 2019 IEEE.",Aspects; Monitoring concerns; Refactoring,Aspects; Cross-cutting concerns; Empirical studies; Refactorings; Software systems; Source codes; Understandability; Computer software,Aspects;Monitoring concerns;Refactoring;Cross-cutting concerns;Empirical studies;Refactorings;Software systems;Source codes;Understandability;Computer software,,,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781728122700,,,English,"Proc. - IEEE/ACM Int. Workshop Refactoring, IWOR",Conference Paper,Scopus,,2-s2.0-85073415740,,Romania,No email,,,"Cojocar G.-S., Guran A.-M."
"Balogh, G., Gergely, T., Beszedes, A., Gyimothy, T.",Are My Unit Tests in the Right Package?,2016,2016 IEEE 16TH INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION (SCAM),,,,137,146,10,3,10.1109/SCAM.2016.10,,"[Balogh, Gergo; Gergely, Tamas; Beszedes, Arpad; Gyimothy, Tibor] Univ Szeged, Software Engn Dept, Szeged, Hungary",,"The software development industry has adopted written and de facto standards for creating effective and maintainable unit tests. Unfortunately, like any other source code artifact, they are often written without conforming to these guidelines, or they may evolve into such a state. In this work, we address a specific type of issues related to unit tests. We seek to automatically uncover violations of two fundamental rules: 1) unit tests should exercise only the unit they were designed for, and 2) they should follow a clear packaging convention. Our approach is to use code coverage to investigate the dynamic behaviour of the tests with respect to the code elements of the program, and use this information to identify highly correlated groups of tests and code elements (using community detection algorithm). This grouping is then compared to the trivial grouping determined by package structure, and any discrepancies found are treated as ""bad smells."" We report on our related measurements on a set of large open source systems with notable unit test suites, and provide guidelines through examples for refactoring the problematic tests.",Code coverage; unit testing; clusterization; pack-age hierarchy; community detection; test smells and refactoring,,Code coverage;unit testing;clusterization;pack-age hierarchy;community detection;test smells and refactoring,geryxyz@inf.u-szeged.hu; gertom@inf.u-szeged.hu; beszedes@inf.u-szeged.hu; gyimothy@inf.u-szeged.hu,,"345 E 47TH ST, NEW YORK, NY 10017 USA",16th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM),"Raleigh, NC","OCT 02-03, 2016",IEEE,1942-5430,978-1-5090-3849-7,,,English,IEEE INT WORK C SO,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000391207000017,2-s2.0-85010809669,Hungary,inf.u-szeged.hu,Univ Szeged,"Univ Szeged, Hungary","Balogh, Gergo; Gergely, Tamas; Beszedes, Arpad; Gyimothy, Tibor"
"Eshkevari, L., Dos Santos, F., Cordy, J.R., Antoniol, G.",Are PHP Applications Ready for Hack?,2015,"2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER)",,,,63,72,10,7,,,"[Eshkevari, Laleh; Antoniol, Giuliano] Ecole Polytech Montreal, Dept Genie Informat & Genie Logiciel, Montreal, PQ, Canada; [Dos Santos, Fabien] Ecole Polytech Univ Montpellier, Dept Informat & Gest, Montpellier, France; [Cordy, James R.] Queens Univ, Sch Comp, Kingston, ON K7L 3N6, Canada",,"PHP is by far the most popular WEB scripting language, accounting for more than 80% of existing websites. PHP is dynamically typed, which means that variables take on the type of the objects that they are assigned, and may change type as execution proceeds. While some type changes are likely not harmful, others involving function calls and global variables may be more difficult to understand and the source of many bugs. Hack, a new PHP variant endorsed by Facebook, attempts to address this problem by adding static typing to PHP variables, which limits them to a single consistent type throughout execution. This paper defines an empirical taxonomy of PHP type changes along three dimensions: the complexity or burden imposed to understand the type change; whether or not the change is potentially harmful; and the actual types changed. We apply static and dynamic analyses to three widely used WEB applications coded in PHP (WordPress, Drupal and phpBB) to investigate (1) to what extent developers really use dynamic typing, (2) what kinds of type changes are actually encountered; and (3) how difficult it might be to refactor the code to avoid type changes, and thus meet the constraints of Hack's static typing. We report evidence that dynamic typing is actually a relatively uncommon practice in production PHP programs, and that most dynamic type changes are simple representational changes, such as between strings and integers. We observe that most PHP type changes in these programs are relatively simple, and that the largest proportion of them are easy to refactor to consistent static typing using simple local renaming transformations. Overall, the paper casts doubt on the usefulness of dynamic typing in PHP, and indicates that for many production applications, conversion to Hack's static typing may not be very difficult.",PHP; Dynamic typing; Type safety,WEB APPLICATIONS,PHP;Dynamic typing;Type safety;WEB APPLICATIONS,laleh.mousavi-eshkevari@polymtl.ca; Fabien.dos-santos@polytech.univ-montp2.fr; cordy@cs.queensu.ca; antoniol@ieee.org,,"345 E 47TH ST, NEW YORK, NY 10017 USA","22nd IEEE International Conference on Software Analysis, Evolution, and Reengineering (SANER)","Montreal, CANADA","MAR 02-06, 2015",IEEE,,978-1-4799-8469-5,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000380389500007,,Canada;France,polymtl.ca,Ecole Polytech Montreal;Ecole Polytech Univ Montpellier;Queens Univ,"Ecole Polytech Montreal, Canada;Ecole Polytech Univ Montpellier, France;Queens Univ, Canada","Eshkevari, Laleh; Dos Santos, Fabien; Cordy, James R.; Antoniol, Giuliano"
"Duan, J.A., Zhu, Q.X., Guan, Z.",A Requirement-Driven Approach to Enterprise Application Development,2010,WEB INFORMATION SYSTEMS AND MINING,6318,,,295,+,2,1,,,"[Duan, Jinan; Zhu, Qunxiong] Beijing Univ Chem Technol, Dept Informat Sci & Technol, Beijing, Peoples R China; [Guan, Zhong] Liaoning Shihua Univ, Dept Public & United Front Work, Fushun Liaoning, Peoples R China",,"The requirements changes are the root causes of evolution of enterprise applications. How to effectively develop enterprise application with the frequently changing requirements is still a challenge to software engineering. The two main aspects are how to capture requirements changes and then how to reflect them to the applications. Use cases and refactoring are excellent tools to capture functional requirements and to change object-oriented software gradually. This paper presents a requirement-driven approach to enterprise application development. The approach uses refined use cases to capture the requirements and to build domain models, controller logics and views. It transforms requirement changes into the refactorings of refined use cases, thus it can propagate the modification to the application. With rapidly continuous iterations, this approach tries to give a solution to the problems of enterprise applications development.",enterprise application; requirement-driven; refined use cases; refactoring,,enterprise application;requirement-driven;refined use cases;refactoring,jarenduan@gmail.com; zhuqx@mail.buct.edu.cn; guanzhong1978227@163.com,"Wang, FL; Gong, ZG; Luo, XF; Lei, JS","HEIDELBERGER PLATZ 3, D-14197 BERLIN, GERMANY",International Conference on Web Information Systems and Mining,"Sanya, PEOPLES R CHINA","OCT 23-24, 2010",SPRINGER-VERLAG BERLIN,0302-9743,978-3-642-16514-6,,,English,LECT NOTES COMPUT SC,Proceedings Paper,WoS,Computer Science,WOS:000286404600037,2-s2.0-78649519165,China,gmail.com,Beijing Univ Chem Technol;Liaoning Shihua Univ,"Beijing Univ Chem Technol, China;Liaoning Shihua Univ, China","Duan, Jinan; Zhu, Qunxiong; Guan, Zhong"
"Duan J., Zhu Q.",A requirement-driven approach to enterprise application evolution,2011,"ICIC Express Letters, Part B: Applications",2,2,,313,318,,2,,https://www.scopus.com/inward/record.uri?eid=2-s2.0-79952399473&partnerID=40&md5=d37e5d4433821a9e2deb8edcbc6d451a,"School of Information Science and Technology, Beijing University of Chemical Technology, No. 15, Beisanhuan East Road, Chaoyang District, Beijing 100029, China","Duan, J., School of Information Science and Technology, Beijing University of Chemical Technology, No. 15, Beisanhuan East Road, Chaoyang District, Beijing 100029, China; Zhu, Q., School of Information Science and Technology, Beijing University of Chemical Technology, No. 15, Beisanhuan East Road, Chaoyang District, Beijing 100029, China","The requirements are usually constantly changing during the life-cycles of enterprise applications. It has become the root cause of enterprise application evolution. Traditional ways like use cases and refactoring guide us to capture requirements and change object-oriented software gradually, however, effectively evolving enterprise application with the frequently changing requirements is still a challenge to software engineering. This paper presents a requirement-driven approach to enterprise application evolution. The approach uses Refined Use Cases (RUCs) [1] to capture the requirements. It introduces instance-type and event-model systems in order to model applications. When requirements change, it propagates modifications to the application by performing refactorings of RUCs and models. With rapidly continuous iterations, the approach keeps producing versions fulfilling new requirements, which helps to evolve enterprise applications successfully. © 2011 ISSN 2185-2766.",Enterprise application evolution; Refactoring; Refined Use Cases; Requirement-driven,Enterprise applications; Model application; Model system; Object oriented software; Refactoring; Refactorings; Refined Use Cases; Requirement-driven; Requirements change; Root cause; Industry; Refining; Software engineering; Object oriented programming,Enterprise application evolution;Refactoring;Refined Use Cases;Requirement-driven;Enterprise applications;Model application;Model system;Object oriented software;Refactorings;Requirements change;Root cause;Industry;Refining;Software engineering;Object oriented programming,"Duan, J.; School of Information Science and Technology, Beijing University of Chemical Technology, No. 15, Beisanhuan East Road, Chaoyang District, Beijing 100029, China; email: jarenduan@gmail.com",,,,,,,21852766,,,,English,ICIC Express Lett Part B Appl.,Article,Scopus,,2-s2.0-79952399473,,China,gmail.com,,,"Duan J., Zhu Q."
"Concas G., Monni C., Orru M., Tonelli R.",Are refactoring practices related to clusters in java software?,2014,Lecture Notes in Business Information Processing,179 LNBIP,,,269,276,,4,10.1007/978-3-319-06862-6,https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904555590&doi=10.1007%2f978-3-319-06862-6&partnerID=40&md5=492f4ca64bfc4bea34bef943ac41e803,"DIEE, Department of Electrical and Electronic Engineering, Pzza D'Armi, Cagliari, Italy","Concas, G., DIEE, Department of Electrical and Electronic Engineering, Pzza D'Armi, Cagliari, Italy; Monni, C., DIEE, Department of Electrical and Electronic Engineering, Pzza D'Armi, Cagliari, Italy; Orru, M., DIEE, Department of Electrical and Electronic Engineering, Pzza D'Armi, Cagliari, Italy; Tonelli, R., DIEE, Department of Electrical and Electronic Engineering, Pzza D'Armi, Cagliari, Italy","Refactoring is widely used among the practices of Agile software development. In this preliminary work we present an empirical study carried out on several releases of 5 software systems written in Java. We focus our attention on the effect of refactoring activities on the topology of the software network. We find that refactoring activities involve classes linked together into clusters inside the software network and the clusters may be modified in different ways by the refactoring activity. This could lead to significative changes in source code, whose knowledge could be valuable for people involved in software development. © Springer International Publishing Switzerland 2014.",Clustering; Refactoring; Software Networks,Data processing; Agile software development; Clustering; Empirical studies; Java software; Refactorings; Software network; Software systems; Source codes; Software design,Clustering;Refactoring;Software Networks;Data processing;Agile software development;Empirical studies;Java software;Refactorings;Software network;Software systems;Source codes;Software design,,,,,,,Springer Verlag,18651348,9783319068619,,,English,Lect. Notes Bus. Inf. Process.,Conference Paper,Scopus,,2-s2.0-84904555590,,Italy,No email,,,"Concas G., Monni C., Orru M., Tonelli R."
"Weissgerber P., Diehl S.",Are refactorings less error-prone than other changes?,2006,Proceedings - International Conference on Software Engineering,,,,112,118,,49,10.1145/1137983.1138011,https://www.scopus.com/inward/record.uri?eid=2-s2.0-77954017992&doi=10.1145%2f1137983.1138011&partnerID=40&md5=12a1322e3ab3f0cdce1e7ab8b7cc08de,"University of Trier, Computer Science Department, 54286 Trier, Germany","Weißgerber, P., University of Trier, Computer Science Department, 54286 Trier, Germany; Diehl, S., University of Trier, Computer Science Department, 54286 Trier, Germany","Refactorings are program transformations which should preserve the program behavior. Consequently, we expect that during phases when there are mostly refactorings in the change history of a system, only few new bugs are introduced. For our case study we analyzed the version histories of several open source systems and reconstructed the refactorings performed. Furthermore, we obtained bug reports from various sources depending on the system. Based on this data we identify phases when the above hypothesis holds and those when it doesn't. Copyright 2006 ACM.",re-engineering; refactoring; reverse engineering; software evolution,Bug reports; Change history; Error prones; Open source system; Program behavior; Program transformations; refactoring; Refactorings; Open systems; Reengineering; Reverse engineering; Computer software,re-engineering;refactoring;reverse engineering;software evolution;Bug reports;Change history;Error prones;Open source system;Program behavior;Program transformations;Refactorings;Open systems;Reengineering;Computer software,"Weißgerber, P.; University of Trier, Computer Science Department, 54286 Trier, Germany; email: weissger@uni-trier.de",,,,,,,02705257,1595933972; 9781595933973,PCSED,,English,Proc Int Conf Software Eng,Conference Paper,Scopus,,2-s2.0-77954017992,,Germany,uni-trier.de,,,"Weissgerber P., Diehl S."
"Mahmoudi, M., Nadi, S., Tsantalis, N.",Are Refactorings to Blame? An Empirical Study of Refactorings in Merge Conflicts,2019,"2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER)",,,,151,162,12,0,,,"[Mahmoudi, Mehran; Nadi, Sarah] Univ Alberta, Edmonton, AB, Canada; [Tsantalis, Nikolaos] Concordia Univ, Montreal, PQ, Canada",,"With the rise of distributed software development, branching has become a popular approach that facilitates collaboration between software developers. One of the biggest challenges that developers face when using multiple development branches is dealing with merge conflicts. Conflicts occur when inconsistent changes happen to the code. Resolving these conflicts can be a cumbersome task as it requires prior knowledge about the changes in each of the development branches. A type of change that could potentially lead to complex conflicts is code refactoring. Previous studies have proposed techniques for facilitating conflict resolution in the presence of refactorings. However, the magnitude of the impact that refactorings have on merge conflicts has never been empirically evaluated. In this paper, we perform an empirical study on almost 3,000 well-engineered open-source Java software repositories and investigate the relation between merge conflicts and 15 popular refactoring types. Our results show that refactoring operations are involved in 22% of merge conflicts, which is remarkable taking into account that we investigated a relatively small subset of all possible refactoring types. Furthermore, certain refactoring types, such as EXTRACT METHOD, tend to be more problematic for merge conflicts. Our results also suggest that conflicts that involve refactored code are usually more complex, compared to conflicts with no refactoring changes.",refactoring; git; merge conflict; software evolution,SOFTWARE; GITHUB; CODE,refactoring;git;merge conflict;software evolution;SOFTWARE;GITHUB;CODE,mehran@ualberta.ca; nadi@ualberta.ca; tsantalis@cse.concordia.ca,"Wang, X; Lo, D; Shihab, E","345 E 47TH ST, NEW YORK, NY 10017 USA","26th IEEE International Conference on Software Analysis, Evolution and Reengineering (SANER)","Hangzhou, PEOPLES R CHINA","FEB 24-27, 2019",IEEE,,978-1-7281-0591-8,,,English,,Proceedings Paper,WoS,Computer Science,WOS:000469754100017,2-s2.0-85064160319,Canada,ualberta.ca,Univ Alberta;Concordia Univ,"Univ Alberta, Canada;Concordia Univ, Canada","Mahmoudi, Mehran; Nadi, Sarah; Tsantalis, Nikolaos"
"Ancan O., Cares C.",Are relevant the code smells on maintainability effort? A laboratory experiment,2019,IEEE ICA-ACCA 2018 - IEEE International Conference on Automation/23rd Congress of the Chilean Association of Automatic Control: Towards an Industry 4.0 - Proceedings,,, 8609845,,,,0,10.1109/ICA-ACCA.2018.8609845,https://www.scopus.com/inward/record.uri?eid=2-s2.0-85062193704&doi=10.1109%2fICA-ACCA.2018.8609845&partnerID=40&md5=25fedbd99b0abaa77e73805cb0c8018b,"Departamento de Ciencias de la Computación e Informática, Universidad de la Frontera, Temuco, Chile; Centro de Estudios de Ingenieriá de Software (CEIS), Universidad de la Frontera, Temuco, Chile","Ancan, O., Departamento de Ciencias de la Computación e Informática, Universidad de la Frontera, Temuco, Chile; Cares, C., Centro de Estudios de Ingenieriá de Software (CEIS), Universidad de la Frontera, Temuco, Chile","In Software Engineering, maintainability is considered a non-functional feature that gives the software the ability to be modified effectively and efficiently. In the late 1990s, code smells emerged as a way to approach potential failures. Although the link between code smells and effort has been studied, there are few quantitative studies trying to demonstrate the relationship between code smells and effort of maintenance. In this paper an experiment is used to analyze whether there are any differences in effort when performing perfective maintenance with and without a code smell. However, no significant differences were found between the control group and the experimental group, indicating that elimination of code smells would not substantially impact effort. The result is relevant because refactoring efforts appear not having a significative effect on maintainability. Finally, the presence of a threshold of code smells concentration would make it possible to determine when refactoring would become a viable activity. © 2018 IEEE.",code smells; effort; empirical study; experiment; maintainability,Automation; Experiments; Industry 4.0; Maintainability; Odors; Process control; Software engineering; Code smell; effort; Empirical studies; Experimental groups; Laboratory experiments; Non-functional features; Perfective maintenance; Quantitative study; Codes (symbols),code smells;effort;empirical study;experiment;maintainability;Automation;Experiments;Industry 4.0;Odors;Process control;Software engineering;Code smell;Empirical studies;Experimental groups;Laboratory experiments;Non-functional features;Perfective maintenance;Quantitative study;Codes (symbols),,Munoz C.Lefranc G.Fernandez-Fernandez M.Rubio E.Duran-Faundez C.,,,,,Institute of Electrical and Electronics Engineers Inc.,,9781538655863,,,Spanish,IEEE ICA-ACCA - IEEE Int. Conf. Autom./ Congr. Chil. Assoc. Autom. Control: Towards Ind. - Proc.,Conference Paper,Scopus,,2-s2.0-85062193704,,Chile,No email,,,"Ancan O., Cares C."
"Pantiuchina, J., Mondini, M., Khanna, D., Wang, X.F., Abrahamsson, P.",Are Software Startups Applying Agile Practices? The State of the Practice from a Large Survey,2017,"AGILE PROCESSES IN SOFTWARE ENGINEERING AND EXTREME PROGRAMMING (XP 2017): 18TH INTERNATIONAL CONFERENCE, XP 2017",283,,,167,183,17,12,10.1007/978-3-319-57633-6_11,,"[Pantiuchina, Jevgenija; Mondini, Marco; Khanna, Dron; Wang, Xiaofeng] Free Univ Bozen Bolzano, Piazza Domenicani 3, I-39100 Bolzano, Italy; [Abrahamsson, Pekka] Norwegian Univ Sci Technol, N-7491 Trondheim, Norway",,"Software startups operate under various uncertainties and the demand on their ability to deal with change is high. Agile methods are considered a suitable and viable development approach for them. However, the competing needs for speed and quality may render certain agile practices less suitable than others in the startup context. The adoption of agile practices can be further complicated in software startups that adopt the Lean Startup approach. To make the best of agile practices, it is necessary to first understand whether and how they are used in software startups. This study targets at a better understanding of the use of agile practices in software startups, with a particular focus on lean startups. Based on a large survey of 1526 software startups, we examined the use of five agile practices, including quality related (regular refactoring and test first), speed related (frequent release and agile planning) and communication practice (daily standup meeting). The findings show that speed related agile practices are used to a greater extent in comparison to quality practices. Daily standup meeting is least used. Software startups who adopt the Lean Startup approach do not sacrifice quality for speed more than other startups do.",Software startups; Agile practice; Lean startup; Minimum viable product; Pivot; Quality vs Speed,,Software startups;Agile practice;Lean startup;Minimum viable product;Pivot;Quality vs Speed,Jevgenija.Pantiuchina@unibz.it; marco.mondini@unibz.it; dron.khanna@unibz.it; xiaofeng.wang@unibz.it; pekkaa@ntnu.no,"Baumeister, H; Lichter, H; Riebisch, M","GEWERBESTRASSE 11, CHAM, CH-6330, SWITZERLAND",8th International Conference on Agile Processes in Software Engineering and Extreme Programming (XP),"Cologne, GERMANY","MAY 22-26, 2017",SPRINGER INTERNATIONAL PUBLISHING AG,1865-1348,978-3-319-57633-6; 978-3-319-57632-9,,,English,LECT NOTES BUS INF P,Proceedings Paper,WoS,Computer Science,WOS:000426186600011,2-s2.0-85018688189,Italy;Norway,unibz.it,Free Univ Bozen Bolzano;Norwegian Univ Sci Technol,"Free Univ Bozen Bolzano, Italy;Norwegian Univ Sci Technol, Norway","Pantiuchina, Jevgenija; Mondini, Marco; Khanna, Dron; Wang, Xiaofeng; Abrahamsson, Pekka"
"Devi, U., Sharma, A., Kesswani, N.",A Review on Quality Models to Analyse the Impact of Refactored Code on Maintainability with reference to Software Product Line,2016,PROCEEDINGS OF THE 10TH INDIACOM - 2016 3RD INTERNATIONAL CONFERENCE ON COMPUTING FOR SUSTAINABLE GLOBAL DEVELOPMENT,,,,3705,3708,4,1,,,"[Devi, U.; Sharma, A.] IIS Univ, Dept Comp Sci & IT, Jaipur, Rajasthan, India; [Kesswani, N.] Cent Univ Rajasthan, Dept Comp Sci & IT, Kishangarh, Rajasthan, India",,"Code cloning is a major problem in object oriented methodology and advanced software methodologies like Software Product Line methodology (SPL). SPL Maintainability is a critical quality factor which is influenced by code cloning detection and correction. There are quality models to study and analyze such impacts. But existing quality models fall short in assessing the impact of code clones on them. Since SPL maintainability is one of the key factors when considering software quality, our study revolves around it. Also, the fact that not much experiments have been performed to assess and measure the impact of refactored code on SPL maintainability, we wish to divulge in that particular area. A review has been done which validates the need to quantify SPL maintainability before and after it has been refactored.",Code Clones; Maintainability; Refactoring; Software; Product Lines (SPL).,,Code Clones;Maintainability;Refactoring;Software;Product Lines (SPL).,,"Hoda, MN","345 E 47TH ST, NEW YORK, NY 10017 USA",3rd International Conference on Computing for Sustainable Global Development (INDIACom),"New Delhi, INDIA","MAR 16-18, 2016",IEEE,,978-9-3805-4419-9,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000388117503156,2-s2.0-84997503403,India,No email,IIS Univ;Cent Univ Rajasthan,"IIS Univ, India;Cent Univ Rajasthan, India","Devi, U.; Sharma, A.; Kesswani, N."
"Zhao, S., Bian, Y.X., Zhang, S.S.",A Review on Refactoring Sequential Program to Parallel Code in Multicore Era,2015,PROCEEDINGS OF 2015 INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTING AND INTERNET OF THINGS,,,,151,154,4,0,,,"[Zhao, Song; Bian, Yixin; Zhang, Sen Sen] Harbin Normal Univ, Coll Comp Sci & Informat Engn, Harbin, Peoples R China",,"Nowdays it is inevitable to face the emergence of multicore processors and parallel platforms. In the multicore time, sequential programs need to be refactored for parallelism. Refactoring is a process of adjusting the code structure of a program keeping its internal function. However, refactoring sequential code to concurrent program is not trivial. In this paper, a survey of the current literature that frequently reported parallel refactoring are carried out. It is important for programmers or computer researchers to exploit multicore platform in order to get better understand and perform refactoring in parallel. This review can help the research community to know the different directions about development of parallel refactoring in order to improve the quality of software.",refactoring; parallel; sequential program; multicore; concurrent program,,refactoring;parallel;sequential program;multicore;concurrent program,32111400@qq.com,,"345 E 47TH ST, NEW YORK, NY 10017 USA",International Conference on Intelligent Computing and Internet of Things,"Harbin, PEOPLES R CHINA","JAN 17-18, 2015",IEEE,,978-1-4799-7534-1,,,English,,Proceedings Paper,WoS,Computer Science; Telecommunications,WOS:000380424500031,2-s2.0-84938071157,China,qq.com,Harbin Normal Univ,"Harbin Normal Univ, China","Zhao, Song; Bian, Yixin; Zhang, Sen Sen"
"Potanin, A., Damitio, M., Noble, J.",Are Your Incoming Aliases Really Necessary? Counting the Cost of Object Ownership,2013,PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013),,,,742,751,10,2,,,"[Potanin, Alex; Damitio, Monique; Noble, James] Victoria Univ Wellington, Wellington, New Zealand",,"Object ownership enforces encapsulation within object-oriented programs by forbidding incoming aliases into objects' representations. Many common data structures, such as collections with iterators, require incoming aliases, so there has been much work on relaxing ownership's encapsulation to permit multiple incoming aliases. This research asks the opposite question: Are your aliases really necessary? In this paper, we count the cost of programming with strong object encapsulation. We refactored the JDK 5.0 collection classes so that they did not use incoming aliases, following either the owner-as-dominator or the owner-as-accessor encapsulation discipline. We measured the performance time overhead the refactored collections impose on a set of microbenchmarks and on the DaCapo, SPECjbb and SPECjvm benchmark suites. While the microbenchmarks show that individual operations and iterations can be significantly slower on encapsulated collection (especially for owner-as-dominator), we found less than 3% slowdown for owner-as-accessor across the large scale benchmarks. As a result, we propose that well-known design patterns such as Iterator commonly used by software engineers around the world need to be adjusted to take ownership into account. As most design patterns are used as a building block in constructing larger pieces of software, a small adjustment to respect ownership will not have any impact on the productivity of programmers but will have a huge impact on the quality of the resulting code with respect to aliasing.",,,,alex@ecs.vuw.ac.nz; monique@ecs.vuw.ac.nz; kjx@ecs.vuw.ac.nz,"Notkin, D; Cheng, BHC; Pohl, K","345 E 47TH ST, NEW YORK, NY 10017 USA",35th International Conference on Software Engineering (ICSE),"San Francisco, CA","MAY 18-26, 2013",IEEE,,978-1-4673-3076-3,,,English,,Proceedings Paper,WoS,Computer Science; Engineering,WOS:000333965800075,,New Zealand,ecs.vuw.ac.nz,Victoria Univ Wellington,"Victoria Univ Wellington, New Zealand","Potanin, Alex; Damitio, Monique; Noble, James"
"Hozano, M., Garcia, A., Fonseca, B., Costa, E.",Are you smelling it? Investigating how similar developers detect code smells,2018,INFORMATION AND SOFTWARE TECHNOLOGY,93,,,130,146,17,6,10.1016/j.infsof.2017.09.002,,"[Hozano, Mario] Univ Fed Campina Grande, Dept Comp Syst, Campina Grande, PB, Brazil; [Hozano, Mario] UFAL, Nucleo Ciencias Exatas, Arapiraca, AL, Brazil; [Garcia, Alessandro] Pontificia Univ Catolica Rio de Janeiro, Informat Dept, Opus Res Grp LES, Rio de Janeiro, RJ, Brazil; [Fonseca, Baldoino; Costa, Evandro] Univ Fed Alagoas, Comp Inst, Maceio, AL, Brazil",,"Context: A code smell indicates a poor implementation choice that often worsens software quality. Thus, code smell detection is an elementary technique to identify refactoring opportunities in software systems. Unfortunately, there is limited knowledge on how similar two or more developers detect smells in code. In particular, few studies have investigated if developers agree or disagree when recognizing a smell and which factors can influence on such (dis)agreement. Objective: We perform a broader study to investigate how similar the developers detect code smells. We also analyze whether certain factors related to the developers' profiles concerning background and experience may influence such (dis)agreement. Moreover, we analyze if the heuristics adopted by developers on detecting code smells may influence on their (dis)agreement. Method: We conducted an empirical study with 75 developers who evaluated instances of 15 different code smell types. For each smell type, we analyzed the agreement among the developers and we assessed the influence of 6 different factors on the developers' evaluations. Altogether more than 2700 evaluations were collected, resulting in substantial quantitative and qualitative analyses. Results: The results indicate that the developers presented a low agreement on detecting all 15 smell types analyzed in our study. The results also suggest that factors related to background and experience did not have a consistent influence on the agreement among the developers. On the other hand, the results show that the agreement was consistently influenced by specific heuristics employed by developers. Conclusions: Our findings reveal that the developers detect code smells in significantly different ways. As a consequence, these findings introduce some questions concerning the results of previous studies that did not consider the different perceptions of developers on detecting code smells. Moreover, our findings shed light towards improving state-of-the-art techniques for accurate, customized detection of code smells. (C) 2017 Elsevier B.V. All rights reserved.",Code smell; Detection; Software maintenance; Empirical study,BAD,Code smell;Detection;Software maintenance;Empirical study;BAD,hozano@gmail.com,,"PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS",,,,ELSEVIER SCIENCE BV,0950-5849,,,,English,INFORM SOFTWARE TECH,Article,WoS,Computer Science,WOS:000414878200009,2-s2.0-85029407321,Brazil,gmail.com,Univ Fed Campina Grande;UFAL;Pontificia Univ Catolica Rio de Janeiro;Univ Fed Alagoas,"Univ Fed Campina Grande, Brazil;UFAL, Brazil;Pontificia Univ Catolica Rio de Janeiro, Brazil;Univ Fed Alagoas, Brazil","Hozano, Mario; Garcia, Alessandro; Fonseca, Baldoino; Costa, Evandro"